/*! For license information please see core.min.js.LICENSE.txt */
var OamtctUiLib;(()=>{var __webpack_modules__={487:t=>{var e={utf8:{stringToBytes:function(t){return e.bin.stringToBytes(unescape(encodeURIComponent(t)))},bytesToString:function(t){return decodeURIComponent(escape(e.bin.bytesToString(t)))}},bin:{stringToBytes:function(t){for(var e=[],a=0;a<t.length;a++)e.push(255&t.charCodeAt(a));return e},bytesToString:function(t){for(var e=[],a=0;a<t.length;a++)e.push(String.fromCharCode(t[a]));return e.join("")}}};t.exports=e},12:t=>{var e,a;e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a={rotl:function(t,e){return t<<e|t>>>32-e},rotr:function(t,e){return t<<32-e|t>>>e},endian:function(t){if(t.constructor==Number)return 16711935&a.rotl(t,8)|4278255360&a.rotl(t,24);for(var e=0;e<t.length;e++)t[e]=a.endian(t[e]);return t},randomBytes:function(t){for(var e=[];t>0;t--)e.push(Math.floor(256*Math.random()));return e},bytesToWords:function(t){for(var e=[],a=0,s=0;a<t.length;a++,s+=8)e[s>>>5]|=t[a]<<24-s%32;return e},wordsToBytes:function(t){for(var e=[],a=0;a<32*t.length;a+=8)e.push(t[a>>>5]>>>24-a%32&255);return e},bytesToHex:function(t){for(var e=[],a=0;a<t.length;a++)e.push((t[a]>>>4).toString(16)),e.push((15&t[a]).toString(16));return e.join("")},hexToBytes:function(t){for(var e=[],a=0;a<t.length;a+=2)e.push(parseInt(t.substr(a,2),16));return e},bytesToBase64:function(t){for(var a=[],s=0;s<t.length;s+=3)for(var o=t[s]<<16|t[s+1]<<8|t[s+2],i=0;i<4;i++)8*s+6*i<=8*t.length?a.push(e.charAt(o>>>6*(3-i)&63)):a.push("=");return a.join("")},base64ToBytes:function(t){t=t.replace(/[^A-Z0-9+\/]/gi,"");for(var a=[],s=0,o=0;s<t.length;o=++s%4)0!=o&&a.push((e.indexOf(t.charAt(s-1))&Math.pow(2,-2*o+8)-1)<<2*o|e.indexOf(t.charAt(s))>>>6-2*o);return a}},t.exports=a},738:t=>{function e(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}t.exports=function(t){return null!=t&&(e(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&e(t.slice(0,0))}(t)||!!t._isBuffer)}},568:(t,e,a)=>{var s,o,i,r,n;s=a(12),o=a(487).utf8,i=a(738),r=a(487).bin,(n=function(t,e){t.constructor==String?t=e&&"binary"===e.encoding?r.stringToBytes(t):o.stringToBytes(t):i(t)?t=Array.prototype.slice.call(t,0):Array.isArray(t)||t.constructor===Uint8Array||(t=t.toString());for(var a=s.bytesToWords(t),l=8*t.length,h=1732584193,c=-271733879,p=-1732584194,d=271733878,v=0;v<a.length;v++)a[v]=16711935&(a[v]<<8|a[v]>>>24)|4278255360&(a[v]<<24|a[v]>>>8);a[l>>>5]|=128<<l%32,a[14+(l+64>>>9<<4)]=l;var b=n._ff,u=n._gg,f=n._hh,g=n._ii;for(v=0;v<a.length;v+=16){var S=h,m=c,C=p,_=d;h=b(h,c,p,d,a[v+0],7,-680876936),d=b(d,h,c,p,a[v+1],12,-389564586),p=b(p,d,h,c,a[v+2],17,606105819),c=b(c,p,d,h,a[v+3],22,-1044525330),h=b(h,c,p,d,a[v+4],7,-176418897),d=b(d,h,c,p,a[v+5],12,1200080426),p=b(p,d,h,c,a[v+6],17,-1473231341),c=b(c,p,d,h,a[v+7],22,-45705983),h=b(h,c,p,d,a[v+8],7,1770035416),d=b(d,h,c,p,a[v+9],12,-1958414417),p=b(p,d,h,c,a[v+10],17,-42063),c=b(c,p,d,h,a[v+11],22,-1990404162),h=b(h,c,p,d,a[v+12],7,1804603682),d=b(d,h,c,p,a[v+13],12,-40341101),p=b(p,d,h,c,a[v+14],17,-1502002290),h=u(h,c=b(c,p,d,h,a[v+15],22,1236535329),p,d,a[v+1],5,-165796510),d=u(d,h,c,p,a[v+6],9,-1069501632),p=u(p,d,h,c,a[v+11],14,643717713),c=u(c,p,d,h,a[v+0],20,-373897302),h=u(h,c,p,d,a[v+5],5,-701558691),d=u(d,h,c,p,a[v+10],9,38016083),p=u(p,d,h,c,a[v+15],14,-660478335),c=u(c,p,d,h,a[v+4],20,-405537848),h=u(h,c,p,d,a[v+9],5,568446438),d=u(d,h,c,p,a[v+14],9,-1019803690),p=u(p,d,h,c,a[v+3],14,-187363961),c=u(c,p,d,h,a[v+8],20,1163531501),h=u(h,c,p,d,a[v+13],5,-1444681467),d=u(d,h,c,p,a[v+2],9,-51403784),p=u(p,d,h,c,a[v+7],14,1735328473),h=f(h,c=u(c,p,d,h,a[v+12],20,-1926607734),p,d,a[v+5],4,-378558),d=f(d,h,c,p,a[v+8],11,-2022574463),p=f(p,d,h,c,a[v+11],16,1839030562),c=f(c,p,d,h,a[v+14],23,-35309556),h=f(h,c,p,d,a[v+1],4,-1530992060),d=f(d,h,c,p,a[v+4],11,1272893353),p=f(p,d,h,c,a[v+7],16,-155497632),c=f(c,p,d,h,a[v+10],23,-1094730640),h=f(h,c,p,d,a[v+13],4,681279174),d=f(d,h,c,p,a[v+0],11,-358537222),p=f(p,d,h,c,a[v+3],16,-722521979),c=f(c,p,d,h,a[v+6],23,76029189),h=f(h,c,p,d,a[v+9],4,-640364487),d=f(d,h,c,p,a[v+12],11,-421815835),p=f(p,d,h,c,a[v+15],16,530742520),h=g(h,c=f(c,p,d,h,a[v+2],23,-995338651),p,d,a[v+0],6,-198630844),d=g(d,h,c,p,a[v+7],10,1126891415),p=g(p,d,h,c,a[v+14],15,-1416354905),c=g(c,p,d,h,a[v+5],21,-57434055),h=g(h,c,p,d,a[v+12],6,1700485571),d=g(d,h,c,p,a[v+3],10,-1894986606),p=g(p,d,h,c,a[v+10],15,-1051523),c=g(c,p,d,h,a[v+1],21,-2054922799),h=g(h,c,p,d,a[v+8],6,1873313359),d=g(d,h,c,p,a[v+15],10,-30611744),p=g(p,d,h,c,a[v+6],15,-1560198380),c=g(c,p,d,h,a[v+13],21,1309151649),h=g(h,c,p,d,a[v+4],6,-145523070),d=g(d,h,c,p,a[v+11],10,-1120210379),p=g(p,d,h,c,a[v+2],15,718787259),c=g(c,p,d,h,a[v+9],21,-343485551),h=h+S>>>0,c=c+m>>>0,p=p+C>>>0,d=d+_>>>0}return s.endian([h,c,p,d])})._ff=function(t,e,a,s,o,i,r){var n=t+(e&a|~e&s)+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._gg=function(t,e,a,s,o,i,r){var n=t+(e&s|a&~s)+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._hh=function(t,e,a,s,o,i,r){var n=t+(e^a^s)+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._ii=function(t,e,a,s,o,i,r){var n=t+(a^(e|~s))+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._blocksize=16,n._digestsize=16,t.exports=function(t,e){if(null==t)throw new Error("Illegal argument "+t);var a=s.wordsToBytes(n(t,e));return e&&e.asBytes?a:e&&e.asString?r.bytesToString(a):s.bytesToHex(a)}},305:module=>{var ZLIB=ZLIB||{},BASE,NMAX;void 0===ZLIB.common_initialized&&(ZLIB.Z_NO_FLUSH=0,ZLIB.Z_PARTIAL_FLUSH=1,ZLIB.Z_SYNC_FLUSH=2,ZLIB.Z_FULL_FLUSH=3,ZLIB.Z_FINISH=4,ZLIB.Z_BLOCK=5,ZLIB.Z_TREES=6,ZLIB.Z_OK=0,ZLIB.Z_STREAM_END=1,ZLIB.Z_NEED_DICT=2,ZLIB.Z_ERRNO=-1,ZLIB.Z_STREAM_ERROR=-2,ZLIB.Z_DATA_ERROR=-3,ZLIB.Z_MEM_ERROR=-4,ZLIB.Z_BUF_ERROR=-5,ZLIB.Z_VERSION_ERROR=-6,ZLIB.Z_DEFLATED=8,ZLIB.z_stream=function(){this.next_in=0,this.avail_in=0,this.total_in=0,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=null,this.state=null,this.data_type=0,this.adler=0,this.input_data="",this.output_data="",this.error=0,this.checksum_function=null},ZLIB.gz_header=function(){this.text=0,this.time=0,this.xflags=0,this.os=255,this.extra=null,this.extra_len=0,this.extra_max=0,this.name=null,this.name_max=0,this.comment=null,this.comm_max=0,this.hcrc=0,this.done=0},ZLIB.common_initialized=!0),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-inflate.js"),function(){var DEF_WBITS=15,HEAD=0,FLAGS=1,TIME=2,OS=3,EXLEN=4,EXTRA=5,NAME=6,COMMENT=7,HCRC=8,DICTID=9,DICT=10,TYPE=11,TYPEDO=12,STORED=13,COPY_=14,COPY=15,TABLE=16,LENLENS=17,CODELENS=18,LEN_=19,LEN=20,LENEXT=21,DIST=22,DISTEXT=23,MATCH=24,LIT=25,CHECK=26,LENGTH=27,DONE=28,BAD=29,MEM=30,SYNC=31,ENOUGH_LENS=852,ENOUGH_DISTS=592,ENOUGH=ENOUGH_LENS+ENOUGH_DISTS,CODES=0,LENS=1,DISTS=2,inflate_table_lbase=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],inflate_table_lext=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,203,69],inflate_table_dbase=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],inflate_table_dext=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function inflate_table(t,e){var a,s,o,i,r,n,l,h,c,p,d,v,b,u,f,g,S,m,C,_,A,E,I=t.next,T=e==DISTS?t.distbits:t.lenbits,k=t.work,B=t.lens,w=e==DISTS?t.nlen:0,R=t.codes;a=e==LENS?t.nlen:e==DISTS?t.ndist:19;var D=new Array(16),x=new Array(16);for(s=0;s<=15;s++)D[s]=0;for(o=0;o<a;o++)D[B[w+o]]++;for(n=T,r=15;r>=1&&0==D[r];r--);if(n>r&&(n=r),0==r)return g={op:64,bits:1,val:0},R[I++]=g,R[I++]=g,e==DISTS?t.distbits=1:t.lenbits=1,t.next=I,0;for(i=1;i<r&&0==D[i];i++);for(n<i&&(n=i),c=1,s=1;s<=15;s++)if(c<<=1,(c-=D[s])<0)return-1;if(c>0&&(e==CODES||1!=r))return t.next=I,-1;for(x[1]=0,s=1;s<15;s++)x[s+1]=x[s]+D[s];for(o=0;o<a;o++)0!=B[w+o]&&(k[x[B[w+o]]++]=o);switch(e){case CODES:m=_=k,C=0,A=0,E=19;break;case LENS:m=inflate_table_lbase,C=-257,_=inflate_table_lext,A=-257,E=256;break;default:m=inflate_table_dbase,_=inflate_table_dext,C=0,A=0,E=-1}if(d=0,o=0,s=i,S=I,l=n,h=0,u=-1,f=(p=1<<n)-1,e==LENS&&p>=ENOUGH_LENS||e==DISTS&&p>=ENOUGH_DISTS)return t.next=I,1;for(;;){g={op:0,bits:s-h,val:0},k[o]<E?g.val=k[o]:k[o]>E?(g.op=_[A+k[o]],g.val=m[C+k[o]]):g.op=96,v=1<<s-h,i=b=1<<l;do{R[S+(d>>>h)+(b-=v)]=g}while(0!=b);for(v=1<<s-1;d&v;)v>>>=1;if(0!=v?(d&=v-1,d+=v):d=0,o++,0==--D[s]){if(s==r)break;s=B[w+k[o]]}if(s>n&&(d&f)!=u){for(0==h&&(h=n),S+=i,c=1<<(l=s-h);l+h<r&&!((c-=D[l+h])<=0);)l++,c<<=1;if(p+=1<<l,e==LENS&&p>=ENOUGH_LENS||e==DISTS&&p>=ENOUGH_DISTS)return t.next=I,1;R[I+(u=d&f)]={op:l,bits:n,val:S-I}}}return 0!=d&&(R[S+d]={op:64,bits:s-h,val:0}),t.next=I+p,e==DISTS?t.distbits=n:t.lenbits=n,0}function inflate_fast(t,e){var a,s,o,i,r,n,l,h,c,p,d,v,b,u,f,g,S,m,C,_,A,E,I=-1,T=-1;a=t.state,s=t.input_data,i=(o=t.next_in)+t.avail_in-5,n=(r=t.next_out)-(e-t.avail_out),l=r+(t.avail_out-257),h=a.wsize,c=a.whave,p=a.wnext,d=a.window,v=a.hold,b=a.bits,u=a.codes,f=a.lencode,g=a.distcode,S=(1<<a.lenbits)-1,m=(1<<a.distbits)-1;t:do{b<15&&(v+=(255&s.charCodeAt(o++))<<b,b+=8,v+=(255&s.charCodeAt(o++))<<b,b+=8),C=u[f+(v&S)];e:for(;;){if(v>>>=_=C.bits,b-=_,0==(_=C.op))t.output_data+=String.fromCharCode(C.val),r++;else{if(!(16&_)){if(0==(64&_)){C=u[f+(C.val+(v&(1<<_)-1))];continue e}if(32&_){a.mode=TYPE;break t}t.msg="invalid literal/length code",a.mode=BAD;break t}A=C.val,(_&=15)&&(b<_&&(v+=(255&s.charCodeAt(o++))<<b,b+=8),A+=v&(1<<_)-1,v>>>=_,b-=_),b<15&&(v+=(255&s.charCodeAt(o++))<<b,b+=8,v+=(255&s.charCodeAt(o++))<<b,b+=8),C=u[g+(v&m)];a:for(;;){if(v>>>=_=C.bits,b-=_,!(16&(_=C.op))){if(0==(64&_)){C=u[g+(C.val+(v&(1<<_)-1))];continue a}t.msg="invalid distance code",a.mode=BAD;break t}if(E=C.val,b<(_&=15)&&(v+=(255&s.charCodeAt(o++))<<b,(b+=8)<_&&(v+=(255&s.charCodeAt(o++))<<b,b+=8)),E+=v&(1<<_)-1,v>>>=_,b-=_,E>(_=r-n)){if((_=E-_)>c&&a.sane){t.msg="invalid distance too far back",a.mode=BAD;break t}I=0,T=-1,0==p?(I+=h-_,_<A&&(A-=_,t.output_data+=d.substring(I,I+_),r+=_,_=0,I=-1,T=r-E)):(I+=p-_,_<A&&(A-=_,t.output_data+=d.substring(I,I+_),I=-1,T=(r+=_)-E))}else I=-1,T=r-E;if(I>=0)t.output_data+=d.substring(I,I+A),r+=A,I+=A;else{var k=A;for(k>r-T&&(k=r-T),t.output_data+=t.output_data.substring(T,T+k),r+=k,T+=k,r+=A-=k;A>2;)t.output_data+=t.output_data.charAt(T++),t.output_data+=t.output_data.charAt(T++),t.output_data+=t.output_data.charAt(T++),A-=3;A&&(t.output_data+=t.output_data.charAt(T++),A>1&&(t.output_data+=t.output_data.charAt(T++)))}break a}}break e}}while(o<i&&r<l);o-=A=b>>>3,v&=(1<<(b-=A<<3))-1,t.next_in=o,t.next_out=r,t.avail_in=o<i?i-o+5:5-(o-i),t.avail_out=r<l?l-r+257:257-(r-l),a.hold=v,a.bits=b}function new_array(t){var e,a=new Array(t);for(e=0;e<t;e++)a[e]=0;return a}function getarg(t,e,a){return t&&e in t?t[e]:a}function checksum_none(){return 0}function inflate_state(){var t;this.mode=0,this.last=0,this.wrap=0,this.havedict=0,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=0,this.distcode=0,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=0,this.lens=new_array(320),this.work=new_array(288),this.codes=new Array(ENOUGH);var e={op:0,bits:0,val:0};for(t=0;t<ENOUGH;t++)this.codes[t]=e;this.sane=0,this.back=0,this.was=0}ZLIB.inflate_copyright=" inflate 1.2.6 Copyright 1995-2012 Mark Adler ",ZLIB.inflateResetKeep=function(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg=null,e.wrap&&(t.adler=1&e.wrap),e.mode=HEAD,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=0,e.distcode=0,e.next=0,e.sane=1,e.back=-1,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.inflateReset=function(t,e){var a,s;return t&&t.state?(s=t.state,void 0===e&&(e=DEF_WBITS),e<0?(a=0,e=-e):(a=1+(e>>>4),e<48&&(e&=15)),1==a&&"function"==typeof ZLIB.adler32?t.checksum_function=ZLIB.adler32:2==a&&"function"==typeof ZLIB.crc32?t.checksum_function=ZLIB.crc32:t.checksum_function=checksum_none,e&&(e<8||e>15)?ZLIB.Z_STREAM_ERROR:(s.window&&s.wbits!=e&&(s.window=null),s.wrap=a,s.wbits=e,s.wsize=0,s.whave=0,s.wnext=0,ZLIB.inflateResetKeep(t))):ZLIB.Z_STREAM_ERROR},ZLIB.inflateInit=function(t){var e=new ZLIB.z_stream;return e.state=new inflate_state,ZLIB.inflateReset(e,t),e},ZLIB.inflatePrime=function(t,e,a){var s;return t&&t.state?(s=t.state,e<0?(s.hold=0,s.bits=0,ZLIB.Z_OK):e>16||s.bits+e>32?ZLIB.Z_STREAM_ERROR:(a&=(1<<e)-1,s.hold+=a<<s.bits,s.bits+=e,ZLIB.Z_OK)):ZLIB.Z_STREAM_ERROR};var lenfix_ary=null,lenfix_def="([    {op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},{op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},    {op:0,bits:9,val:192},{op:16,bits:7,val:10},{op:0,bits:8,val:96},{op:0,bits:8,val:32},{op:0,bits:9,val:160},{op:0,bits:8,val:0},{op:0,bits:8,val:128},    {op:0,bits:8,val:64},{op:0,bits:9,val:224},{op:16,bits:7,val:6},{op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:144},{op:19,bits:7,val:59},    {op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:208},{op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:176},    {op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},{op:0,bits:9,val:240},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},    {op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},{op:0,bits:8,val:52},{op:0,bits:9,val:200},{op:17,bits:7,val:13},{op:0,bits:8,val:100},    {op:0,bits:8,val:36},{op:0,bits:9,val:168},{op:0,bits:8,val:4},{op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:232},{op:16,bits:7,val:8},    {op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:152},{op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:216},    {op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},{op:0,bits:9,val:184},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},    {op:0,bits:9,val:248},{op:16,bits:7,val:3},{op:0,bits:8,val:82},{op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},    {op:0,bits:8,val:50},{op:0,bits:9,val:196},{op:17,bits:7,val:11},{op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:164},{op:0,bits:8,val:2},    {op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:228},{op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:148},    {op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},{op:0,bits:9,val:212},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},    {op:0,bits:9,val:180},{op:0,bits:8,val:10},{op:0,bits:8,val:138},{op:0,bits:8,val:74},{op:0,bits:9,val:244},{op:16,bits:7,val:5},{op:0,bits:8,val:86},    {op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:204},{op:17,bits:7,val:15},    {op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:172},{op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:236},    {op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},{op:0,bits:9,val:156},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},    {op:0,bits:9,val:220},{op:18,bits:7,val:27},{op:0,bits:8,val:110},{op:0,bits:8,val:46},{op:0,bits:9,val:188},{op:0,bits:8,val:14},{op:0,bits:8,val:142},    {op:0,bits:8,val:78},{op:0,bits:9,val:252},{op:96,bits:7,val:0},{op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},    {op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:194},{op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:162},    {op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},{op:0,bits:9,val:226},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},    {op:0,bits:9,val:146},{op:19,bits:7,val:59},{op:0,bits:8,val:121},{op:0,bits:8,val:57},{op:0,bits:9,val:210},{op:17,bits:7,val:17},{op:0,bits:8,val:105},    {op:0,bits:8,val:41},{op:0,bits:9,val:178},{op:0,bits:8,val:9},{op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:242},{op:16,bits:7,val:4},    {op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},{op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:202},    {op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},{op:0,bits:9,val:170},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},    {op:0,bits:9,val:234},{op:16,bits:7,val:8},{op:0,bits:8,val:93},{op:0,bits:8,val:29},{op:0,bits:9,val:154},{op:20,bits:7,val:83},{op:0,bits:8,val:125},    {op:0,bits:8,val:61},{op:0,bits:9,val:218},{op:18,bits:7,val:23},{op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:186},{op:0,bits:8,val:13},    {op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:250},{op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},    {op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},{op:0,bits:9,val:198},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},    {op:0,bits:9,val:166},{op:0,bits:8,val:3},{op:0,bits:8,val:131},{op:0,bits:8,val:67},{op:0,bits:9,val:230},{op:16,bits:7,val:7},{op:0,bits:8,val:91},    {op:0,bits:8,val:27},{op:0,bits:9,val:150},{op:20,bits:7,val:67},{op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:214},{op:18,bits:7,val:19},    {op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:182},{op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:246},    {op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},    {op:0,bits:9,val:206},{op:17,bits:7,val:15},{op:0,bits:8,val:103},{op:0,bits:8,val:39},{op:0,bits:9,val:174},{op:0,bits:8,val:7},{op:0,bits:8,val:135},    {op:0,bits:8,val:71},{op:0,bits:9,val:238},{op:16,bits:7,val:9},{op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:158},{op:20,bits:7,val:99},    {op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:222},{op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:190},    {op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},{op:0,bits:9,val:254},{op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},    {op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},{op:0,bits:9,val:193},{op:16,bits:7,val:10},{op:0,bits:8,val:96},    {op:0,bits:8,val:32},{op:0,bits:9,val:161},{op:0,bits:8,val:0},{op:0,bits:8,val:128},{op:0,bits:8,val:64},{op:0,bits:9,val:225},{op:16,bits:7,val:6},    {op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:145},{op:19,bits:7,val:59},{op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:209},    {op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:177},{op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},    {op:0,bits:9,val:241},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},{op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},    {op:0,bits:8,val:52},{op:0,bits:9,val:201},{op:17,bits:7,val:13},{op:0,bits:8,val:100},{op:0,bits:8,val:36},{op:0,bits:9,val:169},{op:0,bits:8,val:4},    {op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:233},{op:16,bits:7,val:8},{op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:153},    {op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:217},{op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},    {op:0,bits:9,val:185},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},{op:0,bits:9,val:249},{op:16,bits:7,val:3},{op:0,bits:8,val:82},    {op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},{op:0,bits:8,val:50},{op:0,bits:9,val:197},{op:17,bits:7,val:11},    {op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:165},{op:0,bits:8,val:2},{op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:229},    {op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:149},{op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},    {op:0,bits:9,val:213},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},{op:0,bits:9,val:181},{op:0,bits:8,val:10},{op:0,bits:8,val:138},    {op:0,bits:8,val:74},{op:0,bits:9,val:245},{op:16,bits:7,val:5},{op:0,bits:8,val:86},{op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},    {op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:205},{op:17,bits:7,val:15},{op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:173},    {op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:237},{op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},    {op:0,bits:9,val:157},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},{op:0,bits:9,val:221},{op:18,bits:7,val:27},{op:0,bits:8,val:110},    {op:0,bits:8,val:46},{op:0,bits:9,val:189},{op:0,bits:8,val:14},{op:0,bits:8,val:142},{op:0,bits:8,val:78},{op:0,bits:9,val:253},{op:96,bits:7,val:0},    {op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},{op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:195},    {op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:163},{op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},    {op:0,bits:9,val:227},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},{op:0,bits:9,val:147},{op:19,bits:7,val:59},{op:0,bits:8,val:121},    {op:0,bits:8,val:57},{op:0,bits:9,val:211},{op:17,bits:7,val:17},{op:0,bits:8,val:105},{op:0,bits:8,val:41},{op:0,bits:9,val:179},{op:0,bits:8,val:9},    {op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:243},{op:16,bits:7,val:4},{op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},    {op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:203},{op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},    {op:0,bits:9,val:171},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},{op:0,bits:9,val:235},{op:16,bits:7,val:8},{op:0,bits:8,val:93},    {op:0,bits:8,val:29},{op:0,bits:9,val:155},{op:20,bits:7,val:83},{op:0,bits:8,val:125},{op:0,bits:8,val:61},{op:0,bits:9,val:219},{op:18,bits:7,val:23},    {op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:187},{op:0,bits:8,val:13},{op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:251},    {op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},{op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},    {op:0,bits:9,val:199},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},{op:0,bits:9,val:167},{op:0,bits:8,val:3},{op:0,bits:8,val:131},    {op:0,bits:8,val:67},{op:0,bits:9,val:231},{op:16,bits:7,val:7},{op:0,bits:8,val:91},{op:0,bits:8,val:27},{op:0,bits:9,val:151},{op:20,bits:7,val:67},    {op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:215},{op:18,bits:7,val:19},{op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:183},    {op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:247},{op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},    {op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},{op:0,bits:9,val:207},{op:17,bits:7,val:15},{op:0,bits:8,val:103},    {op:0,bits:8,val:39},{op:0,bits:9,val:175},{op:0,bits:8,val:7},{op:0,bits:8,val:135},{op:0,bits:8,val:71},{op:0,bits:9,val:239},{op:16,bits:7,val:9},    {op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:159},{op:20,bits:7,val:99},{op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:223},    {op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:191},{op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},    {op:0,bits:9,val:255}])",distfix_ary=null,distfix_def="([    {op:16,bits:5,val:1},{op:23,bits:5,val:257},{op:19,bits:5,val:17},{op:27,bits:5,val:4097},{op:17,bits:5,val:5},{op:25,bits:5,val:1025},    {op:21,bits:5,val:65},{op:29,bits:5,val:16385},{op:16,bits:5,val:3},{op:24,bits:5,val:513},{op:20,bits:5,val:33},{op:28,bits:5,val:8193},    {op:18,bits:5,val:9},{op:26,bits:5,val:2049},{op:22,bits:5,val:129},{op:64,bits:5,val:0},{op:16,bits:5,val:2},{op:23,bits:5,val:385},    {op:19,bits:5,val:25},{op:27,bits:5,val:6145},{op:17,bits:5,val:7},{op:25,bits:5,val:1537},{op:21,bits:5,val:97},{op:29,bits:5,val:24577},    {op:16,bits:5,val:4},{op:24,bits:5,val:769},{op:20,bits:5,val:49},{op:28,bits:5,val:12289},{op:18,bits:5,val:13},{op:26,bits:5,val:3073},    {op:22,bits:5,val:193},{op:64,bits:5,val:0}])";function fixedtables(state){var i;for(lenfix_ary||(lenfix_ary=eval(lenfix_def)),distfix_ary||(distfix_ary=eval(distfix_def)),state.lencode=0,state.distcode=512,i=0;i<512;i++)state.codes[i]=lenfix_ary[i];for(i=0;i<32;i++)state.codes[i+512]=distfix_ary[i];state.lenbits=9,state.distbits=5}function updatewindow(t){var e=t.state,a=t.output_data.length;return null===e.window&&(e.window=""),0==e.wsize&&(e.wsize=1<<e.wbits),a>=e.wsize?e.window=t.output_data.substring(a-e.wsize):e.whave+a<e.wsize?e.window+=t.output_data:e.window=e.window.substring(e.whave-(e.wsize-a))+t.output_data,e.whave=e.window.length,e.whave<e.wsize?e.wnext=e.whave:e.wnext=0,0}function CRC2(t,e){var a=[255&e,e>>>8&255];t.state.check=t.checksum_function(t.state.check,a,0,2)}function CRC4(t,e){var a=[255&e,e>>>8&255,e>>>16&255,e>>>24&255];t.state.check=t.checksum_function(t.state.check,a,0,4)}function LOAD(t,e){return e.strm=t,e.left=t.avail_out,e.next=t.next_in,e.have=t.avail_in,e.hold=t.state.hold,e.bits=t.state.bits,e}function RESTORE(t){var e=t.strm;e.next_in=t.next,e.avail_out=t.left,e.avail_in=t.have,e.state.hold=t.hold,e.state.bits=t.bits}function INITBITS(t){t.hold=0,t.bits=0}function PULLBYTE(t){return 0!=t.have&&(t.have--,t.hold+=(255&t.strm.input_data.charCodeAt(t.next++))<<t.bits,t.bits+=8,!0)}function NEEDBITS(t,e){for(;t.bits<e;)if(!PULLBYTE(t))return!1;return!0}function BITS(t,e){return t.hold&(1<<e)-1}function DROPBITS(t,e){t.hold>>>=e,t.bits-=e}function BYTEBITS(t){t.hold>>>=7&t.bits,t.bits-=7&t.bits}function REVERSE(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}var inflate_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];ZLIB.inflate=function(t,e){var a,s,o,i,r,n,l,h,c,p=-1,d=-1;if(!t||!t.state||!t.input_data&&0!=t.avail_in)return ZLIB.Z_STREAM_ERROR;(a=t.state).mode==TYPE&&(a.mode=TYPEDO),LOAD(t,s={}),o=s.have,i=s.left,c=ZLIB.Z_OK;t:for(;;)switch(a.mode){case HEAD:if(0==a.wrap){a.mode=TYPEDO;break}if(!NEEDBITS(s,16))break t;if(2&a.wrap&&35615==s.hold){a.check=t.checksum_function(0,null,0,0),CRC2(t,s.hold),INITBITS(s),a.mode=FLAGS;break}if(a.flags=0,null!==a.head&&(a.head.done=-1),!(1&a.wrap)||((BITS(s,8)<<8)+(s.hold>>>8))%31){t.msg="incorrect header check",a.mode=BAD;break}if(BITS(s,4)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",a.mode=BAD;break}if(DROPBITS(s,4),h=BITS(s,4)+8,0==a.wbits)a.wbits=h;else if(h>a.wbits){t.msg="invalid window size",a.mode=BAD;break}a.dmax=1<<h,t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=512&s.hold?DICTID:TYPE,INITBITS(s);break;case FLAGS:if(!NEEDBITS(s,16))break t;if(a.flags=s.hold,(255&a.flags)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",a.mode=BAD;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=BAD;break}null!==a.head&&(a.head.text=s.hold>>>8&1),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.mode=TIME;case TIME:if(!NEEDBITS(s,32))break t;null!==a.head&&(a.head.time=s.hold),512&a.flags&&CRC4(t,s.hold),INITBITS(s),a.mode=OS;case OS:if(!NEEDBITS(s,16))break t;null!==a.head&&(a.head.xflags=255&s.hold,a.head.os=s.hold>>>8),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.mode=EXLEN;case EXLEN:if(1024&a.flags){if(!NEEDBITS(s,16))break t;a.length=s.hold,null!==a.head&&(a.head.extra_len=s.hold),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.head.extra=""}else null!==a.head&&(a.head.extra=null);a.mode=EXTRA;case EXTRA:if(1024&a.flags&&((r=a.length)>s.have&&(r=s.have),r&&(null!==a.head&&null!==a.head.extra&&(h=a.head.extra_len-a.length,a.head.extra+=t.input_data.substring(s.next,s.next+(h+r>a.head.extra_max?a.head.extra_max-h:r))),512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,r)),s.have-=r,s.next+=r,a.length-=r),a.length))break t;a.length=0,a.mode=NAME;case NAME:if(2048&a.flags){if(0==s.have)break t;null!==a.head&&null===a.head.name&&(a.head.name=""),r=0;do{if(h=t.input_data.charAt(s.next+r),r++,"\0"===h)break;null!==a.head&&a.length<a.head.name_max&&(a.head.name+=h,a.length++)}while(r<s.have);if(512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,r)),s.have-=r,s.next+=r,"\0"!==h)break t}else null!==a.head&&(a.head.name=null);a.length=0,a.mode=COMMENT;case COMMENT:if(4096&a.flags){if(0==s.have)break t;r=0,null!==a.head&&null===a.head.comment&&(a.head.comment="");do{if(h=t.input_data.charAt(s.next+r),r++,"\0"===h)break;null!==a.head&&a.length<a.head.comm_max&&(a.head.comment+=h,a.length++)}while(r<s.have);if(512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,r)),s.have-=r,s.next+=r,"\0"!==h)break t}else null!==a.head&&(a.head.comment=null);a.mode=HCRC;case HCRC:if(512&a.flags){if(!NEEDBITS(s,16))break t;if(s.hold!=(65535&a.check)){t.msg="header crc mismatch",a.mode=BAD;break}INITBITS(s)}null!==a.head&&(a.head.hcrc=a.flags>>>9&1,a.head.done=1),t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=TYPE;break;case DICTID:if(!NEEDBITS(s,32))break t;t.adler=a.check=REVERSE(s.hold),INITBITS(s),a.mode=DICT;case DICT:if(0==a.havedict)return RESTORE(s),ZLIB.Z_NEED_DICT;t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=TYPE;case TYPE:if(e==ZLIB.Z_BLOCK||e==ZLIB.Z_TREES)break t;case TYPEDO:if(a.last){BYTEBITS(s),a.mode=CHECK;break}if(!NEEDBITS(s,3))break t;switch(a.last=BITS(s,1),DROPBITS(s,1),BITS(s,2)){case 0:a.mode=STORED;break;case 1:if(fixedtables(a),a.mode=LEN_,e==ZLIB.Z_TREES){DROPBITS(s,2);break t}break;case 2:a.mode=TABLE;break;case 3:t.msg="invalid block type",a.mode=BAD}DROPBITS(s,2);break;case STORED:if(BYTEBITS(s),!NEEDBITS(s,32))break t;if((65535&s.hold)!=(s.hold>>>16&65535^65535)){t.msg="invalid stored block lengths",a.mode=BAD;break}if(a.length=65535&s.hold,INITBITS(s),a.mode=COPY_,e==ZLIB.Z_TREES)break t;case COPY_:a.mode=COPY;case COPY:if(r=a.length){if(r>s.have&&(r=s.have),r>s.left&&(r=s.left),0==r)break t;t.output_data+=t.input_data.substring(s.next,s.next+r),t.next_out+=r,s.have-=r,s.next+=r,s.left-=r,a.length-=r;break}a.mode=TYPE;break;case TABLE:if(!NEEDBITS(s,14))break t;if(a.nlen=BITS(s,5)+257,DROPBITS(s,5),a.ndist=BITS(s,5)+1,DROPBITS(s,5),a.ncode=BITS(s,4)+4,DROPBITS(s,4),a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=BAD;break}a.have=0,a.mode=LENLENS;case LENLENS:for(;a.have<a.ncode;){if(!NEEDBITS(s,3))break t;var v=BITS(s,3);a.lens[inflate_order[a.have++]]=v,DROPBITS(s,3)}for(;a.have<19;)a.lens[inflate_order[a.have++]]=0;if(a.next=0,a.lencode=0,a.lenbits=7,c=inflate_table(a,CODES)){t.msg="invalid code lengths set",a.mode=BAD;break}a.have=0,a.mode=CODELENS;case CODELENS:for(;a.have<a.nlen+a.ndist;){for(;!((n=a.codes[a.lencode+BITS(s,a.lenbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(n.val<16)DROPBITS(s,n.bits),a.lens[a.have++]=n.val;else{if(16==n.val){if(!NEEDBITS(s,n.bits+2))break t;if(DROPBITS(s,n.bits),0==a.have){t.msg="invalid bit length repeat",a.mode=BAD;break}h=a.lens[a.have-1],r=3+BITS(s,2),DROPBITS(s,2)}else if(17==n.val){if(!NEEDBITS(s,n.bits+3))break t;DROPBITS(s,n.bits),h=0,r=3+BITS(s,3),DROPBITS(s,3)}else{if(!NEEDBITS(s,n.bits+7))break t;DROPBITS(s,n.bits),h=0,r=11+BITS(s,7),DROPBITS(s,7)}if(a.have+r>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=BAD;break}for(;r--;)a.lens[a.have++]=h}}if(a.mode==BAD)break;if(0==a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=BAD;break}if(a.next=0,a.lencode=a.next,a.lenbits=9,c=inflate_table(a,LENS)){t.msg="invalid literal/lengths set",a.mode=BAD;break}if(a.distcode=a.next,a.distbits=6,c=inflate_table(a,DISTS)){t.msg="invalid distances set",a.mode=BAD;break}if(a.mode=LEN_,e==ZLIB.Z_TREES)break t;case LEN_:a.mode=LEN;case LEN:if(s.have>=6&&s.left>=258){RESTORE(s),inflate_fast(t,i),LOAD(t,s),a.mode==TYPE&&(a.back=-1);break}for(a.back=0;!((n=a.codes[a.lencode+BITS(s,a.lenbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(n.op&&0==(240&n.op)){for(l=n;n=a.codes[a.lencode+l.val+(BITS(s,l.bits+l.op)>>>l.bits)],!(l.bits+n.bits<=s.bits);)if(!PULLBYTE(s))break t;DROPBITS(s,l.bits),a.back+=l.bits}if(DROPBITS(s,n.bits),a.back+=n.bits,a.length=n.val,0==n.op){a.mode=LIT;break}if(32&n.op){a.back=-1,a.mode=TYPE;break}if(64&n.op){t.msg="invalid literal/length code",a.mode=BAD;break}a.extra=15&n.op,a.mode=LENEXT;case LENEXT:if(a.extra){if(!NEEDBITS(s,a.extra))break t;a.length+=BITS(s,a.extra),DROPBITS(s,a.extra),a.back+=a.extra}a.was=a.length,a.mode=DIST;case DIST:for(;!((n=a.codes[a.distcode+BITS(s,a.distbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(0==(240&n.op)){for(l=n;n=a.codes[a.distcode+l.val+(BITS(s,l.bits+l.op)>>>l.bits)],!(l.bits+n.bits<=s.bits);)if(!PULLBYTE(s))break t;DROPBITS(s,l.bits),a.back+=l.bits}if(DROPBITS(s,n.bits),a.back+=n.bits,64&n.op){t.msg="invalid distance code",a.mode=BAD;break}a.offset=n.val,a.extra=15&n.op,a.mode=DISTEXT;case DISTEXT:if(a.extra){if(!NEEDBITS(s,a.extra))break t;a.offset+=BITS(s,a.extra),DROPBITS(s,a.extra),a.back+=a.extra}a.mode=MATCH;case MATCH:if(0==s.left)break t;if(r=i-s.left,a.offset>r){if((r=a.offset-r)>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=BAD;break}r>a.wnext?(r-=a.wnext,p=a.wsize-r,d=-1):(p=a.wnext-r,d=-1),r>a.length&&(r=a.length)}else p=-1,d=t.next_out-a.offset,r=a.length;if(r>s.left&&(r=s.left),s.left-=r,a.length-=r,p>=0)t.output_data+=a.window.substring(p,p+r),t.next_out+=r,r=0;else{t.next_out+=r;do{t.output_data+=t.output_data.charAt(d++)}while(--r)}0==a.length&&(a.mode=LEN);break;case LIT:if(0==s.left)break t;t.output_data+=String.fromCharCode(a.length),t.next_out++,s.left--,a.mode=LEN;break;case CHECK:if(a.wrap){if(!NEEDBITS(s,32))break t;if(i-=s.left,t.total_out+=i,a.total+=i,i&&(t.adler=a.check=t.checksum_function(a.check,t.output_data,t.output_data.length-i,i)),i=s.left,(a.flags?s.hold:REVERSE(s.hold))!=a.check){t.msg="incorrect data check",a.mode=BAD;break}INITBITS(s)}a.mode=LENGTH;case LENGTH:if(a.wrap&&a.flags){if(!NEEDBITS(s,32))break t;if(s.hold!=(4294967295&a.total)){t.msg="incorrect length check",a.mode=BAD;break}INITBITS(s)}a.mode=DONE;case DONE:c=ZLIB.Z_STREAM_END;break t;case BAD:c=ZLIB.Z_DATA_ERROR;break t;case MEM:return ZLIB.Z_MEM_ERROR;case SYNC:default:return ZLIB.Z_STREAM_ERROR}return RESTORE(s),(a.wsize||i!=t.avail_out&&a.mode<BAD&&(a.mode<CHECK||e!=ZLIB.Z_FINISH))&&updatewindow(t)?(a.mode=MEM,ZLIB.Z_MEM_ERROR):(o-=t.avail_in,i-=t.avail_out,t.total_in+=o,t.total_out+=i,a.total+=i,a.wrap&&i&&(t.adler=a.check=t.checksum_function(a.check,t.output_data,0,t.output_data.length)),t.data_type=a.bits+(a.last?64:0)+(a.mode==TYPE?128:0)+(a.mode==LEN_||a.mode==COPY_?256:0),(0==o&&0==i||e==ZLIB.Z_FINISH)&&c==ZLIB.Z_OK&&(c=ZLIB.Z_BUF_ERROR),c)},ZLIB.inflateEnd=function(t){return t&&t.state?(t.state.window=null,t.state=null,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.z_stream.prototype.inflate=function(t,e){var a,s;this.input_data=t,this.next_in=getarg(e,"next_in",0),this.avail_in=getarg(e,"avail_in",t.length-this.next_in),a=getarg(e,"flush",ZLIB.Z_SYNC_FLUSH),s=getarg(e,"avail_out",-1);var o="";do{if(this.avail_out=s>=0?s:16384,this.output_data="",this.next_out=0,this.error=ZLIB.inflate(this,a),0!=this.error&&console.log("zlib error",this.error),s>=0)return this.output_data;if(o+=this.output_data,this.avail_out>0)break}while(this.error==ZLIB.Z_OK);return o},ZLIB.z_stream.prototype.inflateReset=function(t){return ZLIB.inflateReset(this,t)}}(),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-adler32.js"),BASE=65521,NMAX=5552,ZLIB.adler32=function(t,e,a,s){return"string"==typeof e?function(t,e,a,s){var o,i;if(o=t>>>16&65535,t&=65535,1==s)return(t+=255&e.charCodeAt(a))>=BASE&&(t-=BASE),(o+=t)>=BASE&&(o-=BASE),t|o<<16;if(null===e)return 1;if(s<16){for(;s--;)o+=t+=255&e.charCodeAt(a++);return t>=BASE&&(t-=BASE),t|(o%=BASE)<<16}for(;s>=NMAX;){s-=NMAX,i=347;do{o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++)}while(--i);t%=BASE,o%=BASE}if(s){for(;s>=16;)s-=16,o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++);for(;s--;)o+=t+=255&e.charCodeAt(a++);t%=BASE,o%=BASE}return t|o<<16}(t,e,a,s):function(t,e,a,s){var o,i;if(o=t>>>16&65535,t&=65535,1==s)return(t+=e[a])>=BASE&&(t-=BASE),(o+=t)>=BASE&&(o-=BASE),t|o<<16;if(null===e)return 1;if(s<16){for(;s--;)o+=t+=e[a++];return t>=BASE&&(t-=BASE),t|(o%=BASE)<<16}for(;s>=NMAX;){s-=NMAX,i=347;do{o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++]}while(--i);t%=BASE,o%=BASE}if(s){for(;s>=16;)s-=16,o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++];for(;s--;)o+=t+=e[a++];t%=BASE,o%=BASE}return t|o<<16}(t,e,a,s)},ZLIB.adler32_combine=function(t,e,a){var s,o,i;return a<0?4294967295:(o=(i=a%=BASE)*(s=65535&t),o%=BASE,(s+=(65535&e)+BASE-1)>=BASE&&(s-=BASE),s>=BASE&&(s-=BASE),(o+=(t>>16&65535)+(e>>16&65535)+BASE-i)>=131042&&(o-=131042),o>=BASE&&(o-=BASE),s|o<<16)},void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-crc32.js"),function(){var t=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];function e(t,e){var a,s=0;for(a=0;e;)1&e&&(a^=t[s]),e>>=1,s++;return a}function a(t,a){var s;for(s=0;s<32;s++)t[s]=e(a,a[s])}ZLIB.crc32=function(e,a,s,o){return"string"==typeof a?function(e,a,s,o){if(null==a)return 0;for(e^=4294967295;o>=8;)e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,o-=8;if(o)do{e=t[255&(e^a.charCodeAt(s++))]^e>>>8}while(--o);return 4294967295^e}(e,a,s,o):function(e,a,s,o){if(null==a)return 0;for(e^=4294967295;o>=8;)e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,o-=8;if(o)do{e=t[255&(e^a[s++])]^e>>>8}while(--o);return 4294967295^e}(e,a,s,o)},ZLIB.crc32_combine=function(t,s,o){var i,r,n,l;if(o<=0)return t;for(n=new Array(32),(l=new Array(32))[0]=3988292384,r=1,i=1;i<32;i++)l[i]=r,r<<=1;a(n,l),a(l,n);do{if(a(n,l),1&o&&(t=e(n,t)),0==(o>>=1))break;a(l,n),1&o&&(t=e(l,t)),o>>=1}while(0!=o);return t^s}}(),module.exports=ZLIB}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var a=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](a,a.exports,__webpack_require__),a.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var a in e)__webpack_require__.o(e,a)&&!__webpack_require__.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AMTDesktop:()=>i,AMTKeyCodeConverter:()=>w,AMTKvmDataRedirector:()=>p,AMTRedirector:()=>c,AmtTerminal:()=>d,CommsHelper:()=>g,ConsoleLogger:()=>v,DataProcessor:()=>k,Desktop:()=>t,Encoding:()=>_,FrameBufferBellServerCutText:()=>m,HandshakeState:()=>b,ImageHelper:()=>C,KeyBoardHelper:()=>D,LogLevel:()=>n,MouseHelper:()=>x,Protocol:()=>r,RLEDecoder:()=>E,SecurityOptions:()=>u,SecurityResponse:()=>f,ServerCutTextHandler:()=>A,ServerInit:()=>S,StateProcessorFactory:()=>I,TerminalDataProcessor:()=>T,TypeConverter:()=>a});class t{processData(t){}onStateChange(t){}start(){}onSendKvmData(t){}}const e=t=>null!=t&&""!==t&&!1!==t&&0!==t;class a{static ReadShort(t,e){return(t.charCodeAt(e)<<8)+t.charCodeAt(e+1)}static ReadShortX(t,e){return(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ReadInt(t,e){return 16777216*t.charCodeAt(e)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadSInt(t,e){return(t.charCodeAt(e)<<24)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadIntX(t,e){return 16777216*t.charCodeAt(e+3)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ShortToStr(t){return String.fromCharCode(t>>8&255,255&t)}static ShortToStrX(t){return String.fromCharCode(255&t,t>>8&255)}static IntToStr(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)}static IntToStrX(t){return String.fromCharCode(255&t,t>>8&255,t>>16&255,t>>24&255)}static MakeToArray(t){return t&&null!=t&&"object"!=typeof t?[t]:t}static SplitArray(t){return t.split(",")}static Clone(t){return JSON.parse(JSON.stringify(t))}static EscapeHtml(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof t||"number"==typeof t?t:void 0}static ArrayElementMove(t,e,a){t.splice(a,0,t.splice(e,1)[0])}static ObjectToStringEx(t,a){let s="";if(0!==t&&(!e(t)||null==t))return"(Null)";if(t instanceof Array)for(var o in t)s+="<br />"+this.gap(a)+"Item #"+o+": "+this.ObjectToStringEx(t[o],a+1);else if(t instanceof Object)for(var i in t)s+="<br />"+this.gap(a)+i+" = "+this.ObjectToStringEx(t[i],a+1);else s+=this.EscapeHtml(t);return s}static ObjectToStringEx2(t,a){let s="";if(0!==t&&(!e(t)||null==t))return"(Null)";if(t instanceof Array)for(var o in t)s+="\r\n"+this.gap2(a)+"Item #"+o+": "+this.ObjectToStringEx2(t[o],a+1);else if(t instanceof Object)for(var i in t)s+="\r\n"+this.gap2(a)+i+" = "+this.ObjectToStringEx2(t[i],a+1);else s+=this.EscapeHtml(t);return s}static gap(t){let e="";for(let a=0;a<4*t;a++)e+="&nbsp;";return e}static gap2(t){let e="";for(let a=0;a<4*t;a++)e+=" ";return e}static ObjectToString(t){return this.ObjectToStringEx(t,0)}static ObjectToString2(t){return this.ObjectToStringEx2(t,0)}static hex2rstr(t){if("string"!=typeof t||0===t.length)return"";let e="";const a=(""+t).match(/../g);let s;for(;s=a.shift();)e+=String.fromCharCode(Number("0x"+s));return e}static char2hex(t){return(t+256).toString(16).substr(-2).toUpperCase()}static rstr2hex(t){let e,a="";for(e=0;e<t.length;e++)a+=this.char2hex(t.charCodeAt(e));return a}static encode_utf8(t){return unescape(encodeURIComponent(t))}static decode_utf8(t){return decodeURIComponent(escape(t))}static data2blob(t){const e=new Array(t.length);for(let a=0;a<t.length;a++)e[a]=t.charCodeAt(a);return new Blob([new Uint8Array(e)])}static random(t){return Math.floor(Math.random()*t)}static trademarks(t){return t.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}}var s=__webpack_require__(305),o=__webpack_require__.n(s);class i extends t{constructor(t,e){super(),this.protocol=2,this.inflate=o().inflateInit(15),this.bpp=1,this.state=0,this.focusMode=0,this.useZRLE=!0,this.frameRateDelay=2,this.canvasCtx=e,this.sparecache={},this.buttonmask=0,this.canvasControl=this.canvasCtx.canvas,this.lastMouseMoveTime=(new Date).getTime(),this.logger=t,this.setDeskFocus=(t,e)=>{},this.getDeskFocus=t=>{}}processData(t){this.onProcessData(t)}onStateChange(t){this.logger.verbose(`state change in AMTDesktop: ${t}`),0===t&&(this.canvasCtx.fillStyle="#FFFFFF",this.canvasCtx.fillRect(0,0,this.canvasCtx.canvas.width,this.canvasCtx.canvas.width))}start(){this.logger.verbose("Starting desktop here"),this.state=0,this.inflate.inflateReset(),this.onKvmDataPending=[],this.onKvmDataAck=-1,this.kvmDataSupported=!1;for(const t in this.sparecache)delete this.sparecache[t]}onSendKvmData(t){!0!==this.onKvmDataAck?this.onKvmDataPending.push(t):(e(this.urlvars)&&e(this.urlvars.kvmdatatrace)&&console.log(`KVM-Send (${t.length}) data`),t="\0KvmDataChannel\0"+t,this.onSend(String.fromCharCode(6,0,0,0)+a.IntToStr(t.length)+t),this.onKvmDataAck=!1)}}var r,n,l=__webpack_require__(568),h=__webpack_require__.n(l);!function(t){t[t.SOL=1]="SOL",t[t.KVM=2]="KVM",t[t.IDER=3]="IDER"}(r||(r={}));class c{constructor(t,e,a,s,o,i,r,n,l,h){this.fileReader=a,this.randomNonceChars="abcdef0123456789",this.host=s,this.port=o,this.user=i,this.pass=r,this.tls=n,this.tlsv1only=l,this.protocol=e,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=h,this.amtAccumulator="",this.authUri="",this.logger=t}getWsLocation(){return this.isBrowser()&&!e(this.server)?`${window.location.protocol.replace("http","ws")}//\n      ${window.location.host}\n      ${window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))}\n      /webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`:`${String(this.server)}/webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`}isBrowser(){try{const t="undefined"!=typeof window;return t&&this.logger.debug("!!!!!BROWSER!!!!!"),t}catch(t){return!1}}start(t){this.connectState=0,this.socket=new t(this.getWsLocation()),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);e(this.fileReader)&&e(this.fileReader.readAsBinaryString)?this.fileReader.onload=(t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))}).bind(this):e(this.fileReader)&&e(this.fileReader.readAsArrayBuffer)&&(this.fileReader.onloadend=(t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())}).bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){e(this.urlvars)&&e(this.urlvars.redirtrace)&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose(`Connected to websocket server. With protocol ${this.protocol} (2 = KVM)`),this.logger.info(`Start Redirect Session for protocol. ${this.protocol}`),this.protocol===r.SOL&&this.socketSend(this.RedirectStartSol),this.protocol===r.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol===r.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(t){try{if(this.inDataCount++,"object"==typeof t.data){if(this.fileReaderInUse)return void this.fileReaderAcc.push(t.data);if(null!=this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([t.data]));else if(null!=this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(t.data);else{let e="";const a=new Uint8Array(t.data),s=a.byteLength;for(let t=0;t<s;t++)e+=String.fromCharCode(a[t]);this.onSocketData(e)}}else this.onSocketData(t.data)}catch(t){this.logger.error(t),this.stop(),this.onError()}}onSocketData(t){if(e(t)&&-1!==this.connectState){if("object"==typeof t){let e="";const a=new Uint8Array(t),s=a.byteLength;for(let t=0;t<s;t++)e+=String.fromCharCode(a[t]);t=e}else if("string"!=typeof t)return;if((this.protocol===r.KVM||this.protocol===r.IDER)&&1===this.connectState)return this.onProcessData(t);for(this.amtAccumulator+=t;this.amtAccumulator.length>=1;){let t=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose(`Start Redirection Session reply received for  ${this.protocol}`),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:{if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;const e=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+e)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),t=13+e;break}default:this.stop()}break;case 20:{if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;const s=a.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+s)return;const o=this.amtAccumulator.charCodeAt(1),i=this.amtAccumulator.charCodeAt(4),r=[];for(let t=0;t<s;t++)r.push(this.amtAccumulator.charCodeAt(9+t));const n=this.amtAccumulator.substring(9,9+s);if(t=9+s,0===i)e(r.includes(4))?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+a.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):e(r.includes(3))?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+a.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):e(r.includes(1))?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+a.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!==i&&4!==i||1!==o)if(0===o){if(1===this.protocol){const t=1e4,e=100,s=0,o=1e4,i=100,r=0;this.socketSend(String.fromCharCode(32,0,0,0)+a.IntToStrX(this.amtSequence++)+a.ShortToStrX(t)+a.ShortToStrX(e)+a.ShortToStrX(s)+a.ShortToStrX(o)+a.ShortToStrX(i)+a.ShortToStrX(r)+a.IntToStrX(0))}2===this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3===this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let t=0;const e=n.charCodeAt(t),s=n.substring(t+1,t+1+e);t+=e+1;const o=n.charCodeAt(t),r=n.substring(t+1,t+1+o);t+=o+1;let l=0,h=null;const c=this.generateRandomNonce(32),p="00000002";let d="";4===i&&(l=n.charCodeAt(t),h=n.substring(t+1,t+1+l),t+=l+1,d=`${p}:${c}:${String(h)} :`);const v=this.hex_md5(this.hex_md5(this.user+":"+s+":"+this.pass)+":"+r+":"+d+this.hex_md5("POST:"+this.authUri));let b=this.user.length+s.length+r.length+this.authUri.length+c.length+p.length+v.length+7;4===i&&(b+=parseInt(h.length)+1);let u=String.fromCharCode(19,0,0,0,i)+a.IntToStrX(b)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(s.length)+s+String.fromCharCode(r.length)+r+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(c.length)+c+String.fromCharCode(p.length)+p+String.fromCharCode(v.length)+v;4===i&&(u+=String.fromCharCode(h.length)+h),this.socketSend(u)}break}case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),t=23,this.socketSend(String.fromCharCode(39,0,0,0)+a.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1===this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),t=10;break;case 42:{if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");const e=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<e)break;this.onProcessData(this.amtAccumulator.substring(10,e)),t=e;break}case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),t=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),t=this.amtAccumulator.length;break;default:return this.logger.error(`Unknown Intel AMT command:  ${this.amtAccumulator.charCodeAt(0)}  acclen=${this.amtAccumulator.length}`),void this.stop()}if(0===t)return;this.amtAccumulator=this.amtAccumulator.substring(t)}}}hex_md5(t){return this.logger.verbose("MD5 the string"),h()(t)}socketSend(t){e(this.urlvars)&&e(this.urlvars.redirtrace)&&this.logger.verbose(`REDIR-SEND(${t.length}): ${a.rstr2hex(t)}`);try{if(null!=this.socket&&1===this.socket.readyState){const e=new Uint8Array(t.length);this.logger.verbose(`Redir Send( ${t.length}): ${a.rstr2hex(t)}`);for(let a=0;a<t.length;++a)e[a]=t.charCodeAt(a);this.socket.send(e.buffer)}}catch(t){this.logger.error(`Socket send error: ${String(t)}`)}}send(t){this.logger.verbose("Send called "+t),null!=this.socket&&1===this.connectState&&(this.protocol===r.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+a.IntToStrX(this.amtSequence++)+a.ShortToStrX(t.length)+t):this.socketSend(t))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+a.IntToStrX(this.amtSequence++))}generateRandomNonce(t){let e="";for(let a=0;a<t;a++)e+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return e}onSocketClosed(t){e(this.urlvars)&&e(this.urlvars.redirtrace)&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(t){console.info("onstatechange",t),this.state!==t&&(this.state=t,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}class p extends c{constructor(t,e,a,s,o,i,r,n,l,h){super(t,e,a,s,o,i,r,n,l,h)}}class d{constructor(){this.terminalEmulation=1,this.fxEmulation=0,this.fxLineBreak=0,this.AsciiToUnicode=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,171,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.AsciiToUnicodeIntel=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,174,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.StateChange=t=>{},this.TermSendKeys=t=>this.onSend(t)}}!function(t){t[t.VERBOSE=5]="VERBOSE",t[t.INFO=4]="INFO",t[t.DEBUG=3]="DEBUG",t[t.WARNING=2]="WARNING",t[t.ERROR=1]="ERROR"}(n||(n={}));class v{constructor(t){this.minLevel=t}log(t,e){switch(t){case n.VERBOSE:this.verbose(e);break;case n.INFO:this.info(e);break;case n.DEBUG:this.debug(e);break;case n.WARNING:this.warn(e);break;case n.ERROR:this.error(e)}}debug(t){this.minLevel>=n.DEBUG&&console.debug(t)}info(t){this.minLevel>=n.INFO&&console.info(t)}error(t){this.minLevel>=n.ERROR&&console.error(t)}warn(t){this.minLevel>=n.WARNING&&console.warn(t)}verbose(t){this.minLevel>=n.VERBOSE&&console.log(t)}}class b{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=12?(e=12,this.updateRFBState(1),this.wsSocket.send("RFB 003.008\n"),e):0}}class u{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=1?(e=t.charCodeAt(0)+1,this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(2),e):0}}class f{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;if(t.length>=4){if(e=4,0!==a.ReadInt(t,0))throw new Error("Error. Stopping. Security response not None.");return this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(3),e}return 0}}class g{static sendRefresh(t,e){if(!t.holding)if(t.focusMode>0){const s=2*t.focusMode;e.send(String.fromCharCode(3,1)+a.ShortToStr(Math.max(Math.min(t.oldMouseX,t.lastMouseX)-t.focusMode,0))+a.ShortToStr(Math.max(Math.min(t.oldMouseY,t.lastMouseY)-t.focusMode,0))+a.ShortToStr(s+Math.abs(t.oldMouseX-t.lastMouseX))+a.ShortToStr(s+Math.abs(t.oldMouseY-t.lastMouseY))),t.oldMouseX=t.lastMouseX,t.oldMouseY=t.lastMouseY}else e.send(String.fromCharCode(3,1,0,0,0,0)+a.ShortToStr(t.rwidth)+a.ShortToStr(t.rheight))}static sendKey(t,e,s){if("object"==typeof e)for(const a in e)g.sendKey(t,e[a][0],e[a][1]);else t.send(String.fromCharCode(4,s,0,0)+a.IntToStr(e))}static sendKvmData(t,s,o){!0!==t.onKvmDataAck?t.onKvmDataPending.push(o):(e(t.urlvars)&&e(t.urlvars.kvmdatatrace)&&console.log(`KVM-Send(${String(o.length)}): ${String(o)}`),o="\0KvmDataChannel\0"+o,s.send(`${String.fromCharCode(6,0,0,0)}${a.IntToStr(o.length)}${String(o)}`),t.onKvmDataAck=!1)}static sendKeepAlive(t,e){t.lastKeepAlive<Date.now()-5e3&&(t.lastKeepAlive=Date.now(),e.send(String.fromCharCode(6,0,0,0)+a.IntToStr(16)+"\0KvmDataChannel\0"))}static sendCtrlAltDelMsg(t){g.sendCad(t)}static sendCad(t){g.sendKey(t,65507,1),g.sendKey(t,65513,1),g.sendKey(t,65535,1),g.sendKey(t,65535,0),g.sendKey(t,65513,0),g.sendKey(t,65507,0)}}class S{constructor(t,e,a){this.wsSocket=t,this.parent=e,this.updateRFBState=a}processState(t){let e=0;if(t.length>=24){this.parent.rotation=0;const s=a.ReadInt(t,20);if(t.length<24+s)return 0;e=24+s,null!=this.parent.updateScreenDimensions&&this.parent.updateScreenDimensions(a.ReadShort(t,0),a.ReadShort(t,2)),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=a.ReadShort(t,0),this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=a.ReadShort(t,2);let o="";return this.parent.useZRLE&&(o+=a.IntToStr(16)),o+=a.IntToStr(0),o+=a.IntToStr(1092),this.parent.logger.verbose("Send supported encodings"),this.wsSocket.send(String.fromCharCode(2,0)+a.ShortToStr(o.length/4+1)+o+a.IntToStr(-223)),1===this.parent.bpp&&this.wsSocket.send(String.fromCharCode(0,0,0,0,8,8,0,1)+a.ShortToStr(7)+a.ShortToStr(7)+a.ShortToStr(3)+String.fromCharCode(5,2,0,0,0,0)),this.updateRFBState(4),this.parent.onStateChange(3),this.parent.logger.info("Start new frame."),g.sendRefresh(this.parent,this.wsSocket),this.parent.oldMouseX=-1,e}return 0}}class m{constructor(t,e,a){this.wsSocket=t,this.serverCutTextHandler=e,this.updateRFBState=a}processState(t){let e=0;switch(t.charCodeAt(0)){case 0:if(t.length<4)return 0;this.updateRFBState(100+a.ReadShort(t,2)),e=4;break;case 2:e=1;break;case 3:if(t.length<8)return 0;var s=a.ReadInt(t,4)+8;if(t.length<s)return 0;e=this.serverCutTextHandler.handleServerCutText(t)}return e}}class C{static putImage(t,e,a){if(t.holding)return;const s=C.arotX(t,e,a);a=C.arotY(t,e,a),e=s,t.canvasCtx.putImageData(t.spare,e,a)}static setPixel(t,e,a){let s,o,i=4*a;t.rotation>0&&(1===t.rotation?(s=a%t.sparew,o=Math.floor(a/t.sparew),i=4*(a=s*t.sparew2+(t.sparew2-1-o))):2===t.rotation?i=t.sparew*t.spareh*4-4-i:3===t.rotation&&(s=a%t.sparew,o=Math.floor(a/t.sparew),i=4*(a=(t.sparew2-1-s)*t.sparew2+o))),1===t.bpp?(t.spare.data[i++]=224&e,t.spare.data[i++]=(28&e)<<3,t.spare.data[i++]=C.fixColor((3&e)<<6)):(t.spare.data[i++]=e>>8&248,t.spare.data[i++]=e>>3&252,t.spare.data[i++]=(31&e)<<3),t.spare.data[i]=255}static arotX(t,e,a){return 0===t.rotation?e:1===t.rotation?t.canvasCtx.canvas.width-t.sparew2-a:2===t.rotation?t.canvasCtx.canvas.width-t.sparew2-e:3===t.rotation?a:0}static arotY(t,e,a){return 0===t.rotation?a:1===t.rotation?e:2===t.rotation?t.canvasCtx.canvas.height-t.spareh2-a:3===t.rotation?t.canvasCtx.canvas.height-t.spareh-e:0}static crotX(t,e,a){return 0===t.rotation?e:1===t.rotation?a:2===t.rotation?t.canvasCtx.canvas.width-e:3===t.rotation?t.canvasCtx.canvas.height-a:0}static crotY(t,e,a){return 0===t.rotation?a:1===t.rotation?t.canvasCtx.canvas.width-e:2===t.rotation?t.canvasCtx.canvas.height-a:3===t.rotation?e:0}static rotX(t,e,a){return 0===t.rotation||1===t.rotation?e:2===t.rotation?e-t.canvasCtx.canvas.width:3===t.rotation?e-t.canvasCtx.canvas.height:0}static rotY(t,e,a){return 0===t.rotation?a:1===t.rotation?a-t.canvasCtx.canvas.width:2===t.rotation?a-t.canvasCtx.canvas.height:3===t.rotation?a:0}static setRotation(t,e){for(;e<0;)e+=4;const a=e%4;if(t.holding)return t.rotation=a,!1;if(a===t.rotation)return!0;let s=t.canvasCtx.canvas.width,o=t.canvasCtx.canvas.height;1!==t.rotation&&3!==t.rotation||(s=t.canvasCtx.canvas.height,o=t.canvasCtx.canvas.width),null==t.tcanvas&&(t.tcanvas=document.createElement("canvas"));const i=t.tcanvas.getContext("2d");return i.setTransform(1,0,0,1,0,0),i.canvas.width=s,i.canvas.height=o,i.rotate(-90*t.rotation*Math.PI/180),0===t.rotation&&i.drawImage(t.canvasCtx.canvas,0,0),1===t.rotation&&i.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,0),2===t.rotation&&i.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,-t.canvasCtx.canvas.height),3===t.rotation&&i.drawImage(t.canvasCtx.canvas,0,-t.canvasCtx.canvas.height),0!==t.rotation&&2!==t.rotation||(t.canvasCtx.canvas.height=s,t.canvasCtx.canvas.width=o),1!==t.rotation&&3!==t.rotation||(t.canvasCtx.canvas.height=o,t.canvasCtx.canvas.width=s),t.canvasCtx.setTransform(1,0,0,1,0,0),t.canvasCtx.rotate(90*a*Math.PI/180),t.rotation=a,t.canvasCtx.drawImage(t.tcanvas,C.rotX(t,0,0),C.rotY(t,0,0)),t.width=t.canvasCtx.canvas.width,t.height=t.canvasCtx.canvas.height,null!=t.onScreenResize&&t.onScreenResize(t.width,t.height,t.canvasId),!0}static fixColor(t){return t>127?t+32:t}}class _{constructor(t,e,a,s){this.wsSocket=t,this.parent=e,this.rleDecoder=a,this.updateRFBState=s}processState(t){let s=0;if(t.length>=12){const o=a.ReadShort(t,0),i=a.ReadShort(t,2),r=a.ReadShort(t,4),n=a.ReadShort(t,6),l=r*n,h=a.ReadInt(t,8);if(h<17){if(r<1||r>64||n<1||n>64)throw this.parent.logger.error(`Invalid tile size (${r},${n}), disconnecting.`),new Error("Invalid tile size");if(this.parent.sparew!==r||this.parent.spareh!==n){this.parent.sparew=this.parent.sparew2=r,this.parent.spareh=this.parent.spareh2=n,1!==this.parent.rotation&&3!==this.parent.rotation||(this.parent.sparew2=n,this.parent.spareh2=r);const t=`${this.parent.sparew2}x${this.parent.spareh2}`;this.parent.spare=this.parent.sparecache[t],e(this.parent.spare)||(this.parent.sparecache[t]=this.parent.spare=this.parent.canvasCtx.createImageData(this.parent.sparew2,this.parent.spareh2))}}if(4294967073===h)this.parent.logger.verbose("Desktop size"),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=r,this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=n,this.wsSocket.send(String.fromCharCode(3,0,0,0,0,0)+a.ShortToStr(this.parent.width)+a.ShortToStr(this.parent.height)),s=12,null!=this.parent.onScreenSizeChange&&this.parent.onScreenSizeChange(this.parent.ScreenWidth,this.parent.ScreenHeight);else if(0===h){let e=12;const a=12+l*this.parent.bpp;if(t.length<a)return 0;s=a;for(let a=0;a<l;a++)C.setPixel(this.parent,t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),a);C.putImage(this.parent,o,i)}else{if(16!==h)throw this.parent.logger.error(`Unknown Encoding: ${h} , HEX: ${a.rstr2hex(t)}`),new Error(`Unknown Encoding: ${h}`);{if(t.length<16)return 0;const e=a.ReadInt(t,12);if(t.length<16+e)return 0;const h=16,c=5,p=0;if(e>5&&0===t.charCodeAt(h)&&a.ReadShortX(t,h+1)===e-c)this.rleDecoder.Decode(t,h+5,o,i,r,n,l,e);else{const a=t.substring(h,h+e-p),s=this.parent.inflate.inflate(a);if(!(s.length>0))throw this.parent.logger.error("Invalid deflate data."),new Error("invalid deflate data");this.rleDecoder.Decode(s,0,o,i,r,n,l,s.length)}s=16+e}}if(100==--this.parent.state){this.parent.logger.debug("Frame completed. Update state and request new frame"),this.updateRFBState(4);const t=()=>g.sendRefresh(this.parent,this.wsSocket);0===this.parent.frameRateDelay?g.sendRefresh(this.parent,this.wsSocket):setTimeout(t,this.parent.frameRateDelay)}}return s}}class A{constructor(t,e){this.wsSocket=t,this.parent=e}handleServerCutText(t){if(t.length<8)return 0;const s=a.ReadInt(t,4)+8;if(t.length<s)return 0;if(null!=this.parent.onKvmData){const a=t.substring(8,s);a.length>=16&&"\0KvmDataChannel"===a.substring(0,15)&&(this.parent.kvmDataSupported||(this.parent.kvmDataSupported=!0,console.log("KVM Data Channel Supported.")),(-1===this.parent.onKvmDataAck&&16===a.length||0!==a.charCodeAt(15))&&(this.parent.onKvmDataAck=!0),e(this.parent.urlvars)&&e(this.parent.urlvars.kvmdatatrace)&&console.log(`KVM-Recv((${a.length-16})):  ${a.substring(16)}`),a.length>16&&this.parent.onKvmData(a.substring(16)),!0===this.parent.onKvmDataAck&&this.parent.onKvmDataPending.length>0&&this.wsSocket.onSendKvmData(this.parent.onKvmDataPending.shift()))}return s}}class E{constructor(t){this.parent=t}Decode(t,e,a,s,o,i,r,n){const l=t.charCodeAt(e++);let h,c,p;const d={};let v,b=0,u=0;if(0===l){for(this.parent.logger.verbose("Raw encoding"),v=0;v<r;v++)C.setPixel(this.parent,t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),v);C.putImage(this.parent,a,s)}else if(1===l){c=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),this.parent.canvasCtx.fillStyle="rgb("+(1===this.parent.bpp?`${224&c}, ${(28&c)<<3}, ${C.fixColor((3&c)<<6)}`:`${c>>8&248}, ${c>>3&252},${(31&c)<<3}`)+")",this.parent.logger.verbose("fillstyle: "+this.parent.canvasCtx.fillStyle);const r=C.rotX(this.parent,a,s);s=C.rotY(this.parent,a,s),a=r,this.parent.canvasCtx.fillRect(a,s,o,i)}else if(l>1&&l<17){this.parent.logger.verbose("Read the packed palette");let o=4,i=15;for(v=0;v<l;v++)d[v]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(2===l?(o=1,i=1):l<=4&&(o=2,i=3);b<r&&e<t.length;)for(c=t.charCodeAt(e++),v=8-o;v>=0;v-=o)C.setPixel(this.parent,d[c>>v&i],b++);C.putImage(this.parent,a,s)}else if(128===l){for(this.parent.logger.verbose("RLE encoded tile");b<r&&e<t.length;){c=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),u=1;do{u+=p=t.charCodeAt(e++)}while(255===p);for(;--u>=0;)C.setPixel(this.parent,c,b++)}C.putImage(this.parent,a,s)}else if(l>129){for(this.parent.logger.verbose("Read the RLE palette"),v=0;v<l-128;v++)d[v]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(this.parent.logger.verbose("Decode RLE on palette");b<r&&e<t.length;){if(u=1,h=t.charCodeAt(e++),c=d[h%128],h>127)do{u+=p=t.charCodeAt(e++)}while(255===p);for(;--u>=0;)C.setPixel(this.parent,c,b++)}C.putImage(this.parent,a,s)}}}class I{constructor(t,e,a){this.stateProcessors={},this.stateProcessors[0]=new b(t,a),this.stateProcessors[1]=new u(t,a),this.stateProcessors[2]=new f(t,a),this.stateProcessors[3]=new S(t,e,a);const s=new A(t,e);this.stateProcessors[4]=new m(t,s,a),this.stateProcessors["100plus"]=new _(t,e,new E(e),a)}getProcessor(t){return t<=100?this.stateProcessors[t]:this.stateProcessors["100plus"]}}class T{constructor(t){this.processData=t=>{null!=this.terminal.capture&&(this.terminal.capture+=t);let e="";for(let a=0;a<t.length;a++){const s=t.charCodeAt(a);"J"===t[a]?this.clearTerminal():e+=0!=(128&s)?String.fromCharCode(this.terminal.AsciiToUnicode[127&s]):`${t[a]}`}this.processDataToXterm(e)},this.terminal=t}}class k{constructor(t,e,a){this.acc="",this.stateProcessorFac=new I(e,a,this.updateRFBState.bind(this)),this.parent=a,this.logger=t}processData(t){if(!e(t))return;this.acc+=t;let a=0;for(this.logger.verbose(`Process Data ACC length:  ${this.acc.length}`);this.acc.length>0;){const t=this.stateProcessorFac.getProcessor(this.parent.state),e=this.parent.state;if(a=t.processState(this.acc),this.logger.verbose(`State  ${e}  Processed. cmdSize returned ${a}`),0===a)return;this.acc=this.acc.substring(a),this.logger.verbose(`remaining acc  ${this.acc.length} command size: ${a} new parent state: ${this.parent.state}`)}}updateRFBState(t){this.parent.state=t}}const B={Pause:19,CapsLock:20,Space:32,Quote:39,Minus:45,NumpadMultiply:42,NumpadAdd:43,PrintScreen:44,Comma:44,NumpadSubtract:45,NumpadDecimal:46,Period:46,Slash:47,NumpadDivide:47,Semicolon:59,Equal:61,OSLeft:91,BracketLeft:91,OSRight:91,Backslash:92,BracketRight:93,ContextMenu:93,Backquote:96,NumLock:144,ScrollLock:145,Backspace:65288,Tab:65289,Enter:65293,NumpadEnter:65293,Escape:65307,Delete:65535,Home:65360,PageUp:65365,PageDown:65366,ArrowLeft:65361,ArrowUp:65362,ArrowRight:65363,ArrowDown:65364,End:65367,Insert:65379,F1:65470,F2:65471,F3:65472,F4:65473,F5:65474,F6:65475,F7:65476,F8:65477,F9:65478,F10:65479,F11:65480,F12:65481,ShiftLeft:65505,ShiftRight:65506,ControlLeft:65507,ControlRight:65508,AltLeft:65513,AltRight:65514,MetaLeft:65511,MetaRight:65512};class w{static convertAMTKeyCode(t){return e(t.code.startsWith("Key"))&&4===t.code.length?t.code.charCodeAt(3)+(!1===t.shiftKey?32:0):e(t.code.startsWith("Digit"))&&6===t.code.length?t.code.charCodeAt(5):e(t.code.startsWith("Numpad"))&&7===t.code.length?t.code.charCodeAt(6):B[t.code]}}var R;!function(t){t[t.Up=0]="Up",t[t.Down=1]="Down"}(R||(R={}));class D{constructor(t,e){this.Comms=e,this.parent=t}GrabKeyInput(){this.KeyInputGrab||(document.onkeyup=this.handleKeyUp.bind(this),document.onkeydown=this.handleKeyDown.bind(this),document.onkeypress=this.handleKeys.bind(this),this.KeyInputGrab=!0)}UnGrabKeyInput(){this.KeyInputGrab&&(document.onkeyup=null,document.onkeydown=null,document.onkeypress=null,this.KeyInputGrab=!1)}handleKeys(t){return this.haltEvent(t)}haltEvent(t){return e(t.preventDefault)&&t.preventDefault(),e(t.stopPropagation)&&t.stopPropagation(),!1}handleKeyUp(t){return this.handleKeyEvent(R.Up,t)}handleKeyDown(t){return this.handleKeyEvent(R.Down,t)}handleKeyEvent(t,a){let s=a;if(e(s)||(s=window.event),e(s.code)){const e=w.convertAMTKeyCode(s);this.parent.logger.verbose(`Key ${t} : ${String(e)}`),null!=e&&g.sendKey(this.Comms,e,t)}else{let e=s.keyCode;173===e&&(e=189),61===e&&(e=187);let a=e;!1===s.shiftKey&&e>=65&&e<=90&&(a=e+32),e>=112&&e<=124&&(a=e+65358),8===e&&(a=65288),9===e&&(a=65289),13===e&&(a=65293),16===e&&(a=65505),17===e&&(a=65507),18===e&&(a=65513),27===e&&(a=65307),33===e&&(a=65365),34===e&&(a=65366),35===e&&(a=65367),36===e&&(a=65360),37===e&&(a=65361),38===e&&(a=65362),39===e&&(a=65363),40===e&&(a=65364),45===e&&(a=65379),46===e&&(a=65535),e>=96&&e<=105&&(a=e-48),106===e&&(a=42),107===e&&(a=43),109===e&&(a=45),110===e&&(a=46),111===e&&(a=47),186===e&&(a=59),187===e&&(a=61),188===e&&(a=44),189===e&&(a=45),190===e&&(a=46),191===e&&(a=47),192===e&&(a=96),219===e&&(a=91),220===e&&(a=92),221===e&&(a=93),222===e&&(a=39),this.parent.logger.verbose(`Key ${t}: ${e}  = ${a}`),g.sendKey(this.Comms,a,t)}return this.haltEvent(s)}}class x{constructor(t,e,a){this.parent=t,this.comm=e,this.debounceTime=a,this.mouseClickCompleted=!0,this.lastEvent=null}GrabMouseInput(){this.MouseInputGrab||(this.MouseInputGrab=!0)}UnGrabMouseInput(){if(!this.MouseInputGrab)return;const t=this.parent.canvasCtx.canvas;t.onmousemove=null,t.onmouseup=null,t.onmousedown=null,this.MouseInputGrab=!1}mousedown(t){return this.parent.buttonmask|=1<<t.button,this.mousemove(t)}mouseup(t){return this.parent.buttonmask&=65535-(1<<t.button),this.mousemove(t)}mousemove(t){if(4!==this.parent.state)return!0;const s=this.getPositionOfControl(this.parent.canvasControl);if(this.parent.lastMouseX=(t.pageX-s[0])*(this.parent.canvasControl.height/this.parent.canvasControl.offsetHeight),this.parent.lastMouseY=(t.pageY-s[1]+(e(this.parent.scrolldiv)?this.parent.scrolldiv.scrollTop:0))*(this.parent.canvasControl.width/this.parent.canvasControl.offsetWidth),e(this.parent.noMouseRotate)||(this.parent.lastMouseX2=C.crotX(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseY=C.crotY(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseX=this.parent.lastMouseX2),this.comm.send(String.fromCharCode(5,this.parent.buttonmask)+a.ShortToStr(this.parent.lastMouseX)+a.ShortToStr(this.parent.lastMouseY)),this.parent.setDeskFocus("DeskFocus",this.parent.focusMode),0!==this.parent.focusMode){const t=Math.min(this.parent.lastMouseX,this.parent.canvasControl.width-this.parent.focusMode),e=Math.min(this.parent.lastMouseY,this.parent.canvasControl.height-this.parent.focusMode),a=2*this.parent.focusMode,o=this.parent.canvasControl,i=o.offsetHeight/this.parent.canvasControl.height,r=o.offsetWidth/this.parent.canvasControl.width,n=this.parent.getDeskFocus("DeskFocus"),l=this.getPositionOfControl(this.parent.canvasControl.parentElement);n.left=`${Math.max((t-this.parent.focusMode)*i,0)+(s[0]-l[0])}px`,n.top=`${Math.max((e-this.parent.focusMode)*r,0)+(s[1]-l[1])}px`,n.width=a*i-6+"px",n.height=a*i-6+"px"}return this.haltEvent(t)}haltEvent(t){return e(t.preventDefault)&&t.preventDefault(),e(t.stopPropagation)&&t.stopPropagation(),!1}getPositionOfControl(t){const e=Array(2);e[0]=e[1]=0;let a=t;for(;null!=a;)e[0]+=a.offsetLeft,e[1]+=a.offsetTop,a=a.offsetParent;return e}}})(),OamtctUiLib=__webpack_exports__})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,