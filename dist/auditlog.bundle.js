!function(e,t){for(var i in t)e[i]=t[i]}(exports,function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=62)}([function(e,t){e.exports=require("react")},function(e,t,i){"use strict";i.d(t,"a",(function(){return a})),i.d(t,"c",(function(){return r})),i.d(t,"b",(function(){return s}));var n=i(10),o=i.n(n);const a=e=>e.map(e=>{let t=Object.assign({},e.headerComponentParams);const i=e.headerName?o.a.t(e.headerName):void 0,n=e.headerTooltip?o.a.t(e.headerTooltip):i;return t.description=e.headerComponentParams&&e.headerComponentParams.description?o.a.t(e.headerComponentParams.description):i,Object.assign(Object.assign({},e),{headerName:i,headerComponentParams:t,headerTooltip:n})}),r=e=>o.a.t(e),s=(e,t)=>o.a.t(e,{translate:t})},function(e,t,i){"use strict";i.d(t,"a",(function(){return l})),i.d(t,"e",(function(){return d})),i.d(t,"h",(function(){return c})),i.d(t,"g",(function(){return p})),i.d(t,"i",(function(){return u})),i.d(t,"j",(function(){return g})),i.d(t,"b",(function(){return h})),i.d(t,"d",(function(){return f})),i.d(t,"f",(function(){return v})),i.d(t,"c",(function(){return y})),i.d(t,"k",(function(){return w})),i.d(t,"l",(function(){return A}));var n=i(15),o=i.n(n),a=i(16),r=i.n(a);const s=e=>Array.isArray(e)?e.map(s):null!==e&&"object"==typeof e?Object.entries(e).reduce((e,[t,i])=>(e[r()(t)]=s(i),e),{}):e,l=(e,t)=>((e,t)=>Object.keys(t).reduce((i,n)=>o.a.copy(n,t[n],e,i),{}))(s(e),t),d=e=>"function"==typeof e,c=e=>e>=8&&e<=32,p=e=>new RegExp("^[a-zA-Z0-9$@$!%*#?&-_~^]+$").test(e),u=e=>new RegExp("^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9$@$!%*#?&-_~^]{8,32}$").test(e),g=e=>new RegExp("^(102[4-9]|10[3-9][0-9]|1[1-9][0-9]{2}|[2-9][0-9]{3}|[1-3][0-9]{4}|4[0-8][0-9]{3}|490[0-9]{2}|491[0-4][0-9]|4915[01])$").test(e),h=e=>!e||new RegExp("[^a-zA-Z0-9._-]").test(e),f=(e,t)=>3==e?m(t):6==e?b(t):201==e?x(t):"",m=e=>new RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e),b=e=>new RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e),x=e=>/^(?=.{1,254}$)((?=[a-z0-9-]{1,63}\.)(xn--+)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}$/.test(e),v=(...e)=>e.filter(e=>!!e).join(" ").trim(),y=e=>{const t={"#":"%23","%":"%25"};return e.replace(/#|%/g,e=>t[e])},w=(e,t)=>{const i={Accept:"application/json","Content-Type":"application/json"};return t?i["X-MPS-API-Key"]=e:i["X-RPS-API-Key"]=e,i},A=e=>!!/(\.pfx)$/i.exec(e)},,function(e,t){e.exports=require("@fortawesome/react-fontawesome")},function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(2);class o{static get(e,t,i={}){const a=Object(n.k)(t);return o.fetch(e,Object.assign(Object.assign({},i),{method:"GET",headers:a}))}static post(e,t={},i,a,r={}){const s=Object(n.k)(i,a);return a?o.fetch(e,Object.assign(Object.assign({},r),{method:"POST",body:t,headers:s})):o.fetchRPS(e,Object.assign(Object.assign({},r),{method:"POST",body:t,headers:s}))}static delete(e,t,i={}){const a=Object(n.k)(t);return o.fetchRPS(e,Object.assign(Object.assign({},i),{method:"DELETE",headers:a}))}static patch(e,t={},i,a={}){const r=Object(n.k)(i);return o.fetchRPS(e,Object.assign(Object.assign({},a),{method:"PATCH",body:t,headers:r}))}static fetch(e,t={}){return t.mode="cors",t.credentials="include",t.withCredentials=!0,fetch(e,t).then(e=>e.json())}static fetchRPS(e,t={}){return fetch(e,t).then(e=>e.text())}}},function(e,t,i){"use strict";i.d(t,"b",(function(){return r})),i.d(t,"c",(function(){return s})),i.d(t,"a",(function(){return l}));var n=i(0),o=i.n(n),a=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i};const r=o.a.createContext({data:{}});class s extends o.a.Component{constructor(e){super(e)}render(){return o.a.createElement(r.Provider,{value:{data:this.props.data}},this.props.children)}}const l=e=>{var{children:t}=e;a(e,["children"]);return o.a.createElement(r.Consumer,null,t)}},function(e,t,i){"use strict";var n=i(0),o=i.n(n),a=i(11);const r=i.n(a).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:e})=>s(e)};
border: ${({type:e})=>"1px solid "+s(e)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,s=e=>"success"===e?"#4caf50":"warning"===e?"#ff9800":"error"===e?"#f44336":"#000000";t.a=({message:e,type:t})=>o.a.createElement(r,{type:t},e)},function(e,t,i){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function s(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},n=[],o=0;o<e.length;o++){var a=e[o],l=t.base?a[0]+t.base:a[0],d=i[l]||0,c="".concat(l," ").concat(d);i[l]=d+1;var p=s(c),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(r[p].references++,r[p].updater(u)):r.push({identifier:c,updater:m(u,t),references:1}),n.push(c)}return n}function d(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=i.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=a(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var c,p=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=p(t,o);else{var a=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(a,r[t]):e.appendChild(a)}}function g(e,t,i){var n=i.css,o=i.media,a=i.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var h=null,f=0;function m(e,t){var i,n,o;if(t.singleton){var a=f++;i=h||(h=d(t)),n=u.bind(null,i,a,!1),o=u.bind(null,i,a,!0)}else i=d(t),n=g.bind(null,i,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var o=s(i[n]);r[o].references--}for(var a=l(e,t),d=0;d<i.length;d++){var c=s(i[d]);0===r[c].references&&(r[c].updater(),r.splice(c,1))}i=a}}}},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var o=(r=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[i].concat(a).concat([o]).join("\n")}var r,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var a=0;a<this.length;a++){var r=this[a][0];null!=r&&(o[r]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&o[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t){e.exports=require("i18next")},function(e,t){e.exports=require("styled-components")},,,,function(e,t){e.exports=require("dot-object")},function(e,t){e.exports=require("camelcase")},,,,,function(e,t){e.exports=require("ag-grid-react")},,,,function(e,t){e.exports=require("ag-grid-community/dist/styles/ag-grid.css")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports=require("moment")},function(e,t){e.exports=require("export-to-csv")},,,,,function(e,t,i){"use strict";i.r(t),i.d(t,"AuditLog",(function(){return P}));var n=i(0),o=i(21),a=i(56),r=i.n(a);const s={checkForEmpty:(e,t="---")=>e||t},{checkForEmpty:l}=s,d={auditappid:{headerName:"auditLog.grid.column.auditappid",field:"auditAppId",headerComponentParams:{description:"auditLog.grid.column.auditappiddescription"}},eventid:{headerName:"auditLog.grid.column.eventId",field:"eventId",headerComponentParams:{description:"auditLog.grid.column.eventIddescription"}},initiatortype:{headerName:"auditLog.grid.column.initiatortype",field:"initiatorType"},auditapp:{headerName:"auditLog.grid.column.auditapp",field:"auditApp",headerComponentParams:{description:"auditLog.grid.column.auditappdescription",enableSorting:!0},tooltipField:"auditApp",minWidth:150},event:{headerName:"auditLog.grid.column.event",field:"event",headerComponentParams:{description:"auditLog.grid.column.eventdescription"},tooltipField:"event",minWidth:150},initiator:{headerName:"auditLog.grid.column.initiator",field:"initiator",headerComponentParams:{description:"auditLog.grid.column.initiatordescription"},minWidth:150},time:{headerName:"auditLog.grid.column.time",field:"time",cellRendererFramework:({value:e})=>{const t=(e=>{if(e){const t=r.a.utc(e).local();return l(t.unix()>0?t.format("YYYY-MM-DD HH:mm"):"")}return e})(e);return t||""},headerComponentParams:{description:"auditLog.grid.column.timedescription"},minWidth:150},mclocationtype:{headerName:"auditLog.grid.column.mclocationtype",field:"mCLocationType",headerComponentParams:{description:"auditLog.grid.column.mclocationtypedescription"}},netaddress:{headerName:"auditLog.grid.column.netaddress",field:"netAddress",headerComponentParams:{description:"auditLog.grid.column.netaddressdescription"},minWidth:150},exstr:{headerName:"auditLog.grid.column.exstr",field:"exStr",headerComponentParams:{description:"auditLog.grid.column.exstrdescription"},minWidth:150}},c={auditAppId:"auditAppId",eventId:"eventId",initiator:"initiator",time:"time",auditApp:"auditApp",event:"event",netAddress:"netAddress",exStr:"exStr"};var p=i(5);i(69);const u=e=>n.createElement("div",{className:"tooltip"},n.createElement("span",{style:e.styles,id:"tooltip-content",className:"tooltip__text"},e.message));var g=i(4);class h extends n.Component{constructor(e){super(e),this.tooltipStyles={},this.adjustTooltipStyle=()=>{this.tooltipStyles.left=0,this.tooltipStyles.marginLeft=0,this.tooltipStyles.width="130px",this.props.description.length<34?this.tooltipStyles.top="-48px":this.props.description.length<68?this.tooltipStyles.top="-64px":this.tooltipStyles.top="-68px"},this.prepareTooltipStyle=e=>{let t=document.getElementById("grid-wrapper").getBoundingClientRect().left,i=e.target.getBoundingClientRect();this.tooltipStyles={},this.tooltipStyles.position="fixed",this.tooltipStyles.left=i.left-(100+i.width/2)-t,this.props.description.length<34?this.tooltipStyles.top="-30px":this.props.description.length<68?this.tooltipStyles.top="-48px":this.tooltipStyles.top="-60px",this.tooltipStyles.left<0&&this.adjustTooltipStyle()},this.handleMouseClick=e=>{this.prepareTooltipStyle(e),this.setState((e,t)=>({isMouseOver:!0,message:t.description}))},this.handleMouseLeave=e=>{this.setState((e,t)=>({isMouseOver:!1,message:""}))},this.state={isMouseOver:!1,message:""}}render(){let e=n.createElement("div",{className:"customHeaderMenuButton "+this.props.displayName,onClick:this.handleMouseClick,onMouseLeave:this.handleMouseLeave},n.createElement(g.FontAwesomeIcon,{className:this.props.displayName,icon:"info-circle"}));return n.createElement(n.Fragment,null,this.state.isMouseOver&&n.createElement(u,{message:this.state.message,styles:this.tooltipStyles}),n.createElement("div",{style:{display:"flex"}},this.props.displayName,"   ",e))}}i(71);class f extends n.Component{getReactContainerClasses(){return["custom-tooltip"]}render(){const{api:e,rowIndex:t,column:i}=this.props,o=e.getDisplayedRowAtIndex(t)?e.getDisplayedRowAtIndex(t).data:"",a="auditApp"===i.colDef.field,r="event"===i.colDef.field;return n.createElement(n.Fragment,null,a&&o?n.createElement("div",{className:"custom-tooltip"},n.createElement("p",null,n.createElement("span",null,"Role Name:",o.auditApp)),n.createElement("p",null,n.createElement("span",null,"Role ID: ",o.auditAppId))):null,r&&o?n.createElement("div",{className:"custom-tooltip"},n.createElement("p",null,n.createElement("span",null,"Event: ",o.event)),n.createElement("p",null,n.createElement("span",null,"Event ID: ",o.eventId))):null)}}var m=i(2),b=i(57),x=i(7),v=(i(25),i(73),i(74),i(1)),y=i(6),w=function(e,t,i,n){return new(i||(i=Promise))((function(o,a){function r(e){try{l(n.next(e))}catch(e){a(e)}}function s(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((n=n.apply(e,t||[])).next())}))};const A=new b.ExportToCsv({filename:"AuditLog"});class P extends n.Component{constructor(e){super(e),this.disableNext=!1,this.disablePrev=!0,this.disableGoToPage=!1,this.adjustRowIndex=(e,t,i)=>i>e?1:Math.abs(e-(i-1)),this.transformResponse=e=>(e.forEach(e=>{e.netAddress=e.netAddress.replace(/[^\d.-]/g,""),e.time=e.time.substring(0,e.time.length-5)}),e),this.fetchAuditLog=e=>w(this,void 0,void 0,(function*(){try{const{mpsKey:t}=this.context.data;let i=JSON.stringify({apikey:"xxxxx",method:"AuditLog",payload:{guid:this.props.deviceId,startIndex:e}});return yield p.a.post(`https://${this.props.mpsServer}/amt`,i,t,!0)}catch(e){console.log("An error occured")}})),this.onGridReady=e=>{let t=0,i=0,n="Sorry! Something went wrong. try again later";this.gridApi=e.api,this.gridColumnApi=e.columnApi,this.gridApi.sizeColumnsToFit();let o={rowCount:null,getRows:e=>{this.gridApi.showLoadingOverlay(),0==i?this.fetchAuditLog(e.startRow).then(n=>{void 0!==n.records?(n.records=this.transformResponse(n.records.map(e=>Object(m.a)(e,c))),this.gridApi.hideOverlay(),e.successCallback(n.records.reverse(),n.totalCnt),t=n.totalCnt,i=t-20):(this.setState({errorMsg:n.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay())}).catch(e=>{this.setState({errorMsg:n}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}):(i=this.adjustRowIndex(t,e.startRow,e.endRow),this.fetchAuditLog(i).then(i=>{if(void 0!==i.records){if(i.records=this.transformResponse(i.records.map(e=>Object(m.a)(e,c))),this.gridApi.hideOverlay(),this.gridApi.paginationGetTotalPages()===this.gridApi.paginationGetCurrentPage()+1){let e=t%10;t%10>0&&(i.records=i.records.slice(0,e))}e.successCallback(i.records.reverse(),i.totalCnt),t=i.totalCnt}else this.setState({errorMsg:i.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}).catch(e=>{this.setState({errorMsg:n}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}))}};e.api.setDatasource(o)},this.fetchCompleteAuditLog=()=>w(this,void 0,void 0,(function*(){let e=this.gridApi.paginationGetRowCount(),t=[{auditAppId:"Role ID",eventId:"Event ID",initiator:"Initiator",auditApp:"Role Name",event:"Event",netAddress:"Network Address",time:"Device Time(UTC)",exStr:"Event Details"}];for(let i=0;i<this.gridApi.paginationGetTotalPages();i++){let n=(i+1)*this.gridApi.paginationGetPageSize()-1,o=0===i?0:i+1!==this.gridApi.paginationGetTotalPages()?e-n:1,a=yield this.fetchAuditLog(o);if(void 0===a.records||a.error){this.setState({hasExportFailed:!0,isExporting:!1,snackBarMessage:"Something went wrong! Please try again later."}),setTimeout(()=>{this.setState({hasExportFailed:!1})},4e3);break}if(1===o){let t=e%10;a.records=a.records.slice(0,t)}a=a.records.map(e=>Object(m.a)(e,c)),t=t.concat(this.transformResponse(a).reverse())}this.setState({isExporting:!1,completeAuditLog:t,downloadCSV:!0}),A.generateCsv(this.state.completeAuditLog)})),this.onGridSizeChanged=e=>{let t=document.getElementById("grid-wrapper").offsetWidth,i=[],n=[],o=0,a=e.columnApi.getAllColumns();for(let e=0;e<a.length;e++){let r=a[e];o+=r.getMinWidth(),o>t?n.push(r.colId):i.push(r.colId)}e.columnApi.setColumnsVisible(i,!0),e.columnApi.setColumnsVisible(n,!1),e.api.sizeColumnsToFit()},this.togglePaginationButtons=e=>{switch(e){case"first":this.disablePrev=!0,this.disableNext=!1;break;case"next":this.disablePrev=!1,this.gridApi.paginationGetTotalPages()===this.gridApi.paginationGetCurrentPage()+1&&(this.disableNext=!0);break;case"prev":this.disableNext=!1,0===this.gridApi.paginationGetCurrentPage()&&(this.disablePrev=!0);break;case"last":this.disableNext=!0,this.disablePrev=!1;break;case"fromgoto":this.disableNext=!1,this.disablePrev=!1}},this.onPaginationChanged=()=>{this.gridApi&&this.setState({currentPage:this.gridApi.paginationGetCurrentPage()+1,totalPages:this.gridApi.paginationGetTotalPages()})},this.goToPage=()=>{this.gridApi.paginationGoToPage(this.state.value-1);let e=parseInt(this.state.value);switch(!0){case e<=1:this.togglePaginationButtons("first");break;case e>1&&e<this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("fromgoto");break;case e>=this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("last")}},this.onBtFirst=()=>{this.gridApi.paginationGoToFirstPage(),this.togglePaginationButtons("first")},this.onBtLast=()=>{this.gridApi.paginationGoToLastPage(),this.togglePaginationButtons("last")},this.onBtNext=()=>{this.gridApi.paginationGoToNextPage(),this.togglePaginationButtons("next")},this.onBtPrevious=()=>{this.gridApi.paginationGoToPreviousPage(),this.togglePaginationButtons("prev")},this.onBtExport=()=>{this.setState((e,t)=>({isExporting:!0})),this.fetchCompleteAuditLog()},this.handleChange=e=>{this.setState({value:e.target.value.replace(/[^\d-]/g,"")})},this.columnDefs=[d.initiator,d.auditapp,d.event,d.netaddress,d.time,d.exstr],this.state={rowData:[],errorMsg:"",value:"",currentPage:0,totalPages:0,showTooltip:!1,isExporting:!1,hasExportFailed:!1,snackBarMessage:"",completeAuditLog:[],downloadCSV:!1}}render(){let e=`<div style={{width: "100%", fontSize: "25px", backgroundColor: "#ed645a"}}><span style="padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow; color: red;">${this.state.errorMsg}</span></div>`;let t={agColumnHeader:h,customTooltip:f};return n.createElement(n.Fragment,null,this.state.isExporting?n.createElement("div",{className:"overlay"},n.createElement("div",{className:"overlay__inner"},n.createElement("span",{className:"export-loading-text"},"Please wait while we process the request"),n.createElement("span",{className:"loader"}))):n.createElement("div",null,n.createElement("div",{id:"grid-wrapper",style:{width:"100%",height:"375px"}},n.createElement("div",{className:"ag-theme-balham-dark",style:{height:"100%",width:"100%"}},n.createElement(o.AgGridReact,{columnDefs:Object(v.a)(this.columnDefs),defaultColDef:{tooltipComponent:"customTooltip"},pagination:!0,paginationPageSize:10,cacheBlockSize:10,rowModelType:"infinite",infiniteInitialRowCount:1,onGridReady:this.onGridReady,rowData:this.state.rowData,overlayNoRowsTemplate:e,onPaginationChanged:this.onPaginationChanged,suppressPaginationPanel:!0,suppressScrollOnNewData:!0,onGridSizeChanged:this.onGridSizeChanged,frameworkComponents:t}))),n.createElement("div",{className:"agGrid-footer"},n.createElement("div",{className:"ag-grid-footer-cell align-left"},this.state.showTooltip&&n.createElement(u,{message:"Exports only cached entries",styles:{position:"absolute",bottom:"100%",left:"24px",width:"100px",margin:"0px"}}),n.createElement("button",{className:"export-to-csv",onClick:this.onBtExport},n.createElement(g.FontAwesomeIcon,{icon:"file-export"}),Object(v.c)("auditLog.grid.footer.exporttocsv.title"))),n.createElement("div",{className:"ag-grid-footer-cell agGrid-Paginition align-center"},n.createElement("button",{type:"button",onClick:this.onBtFirst,disabled:this.disablePrev},n.createElement(g.FontAwesomeIcon,{icon:"angle-double-left"})),n.createElement("button",{type:"button",onClick:this.onBtPrevious,disabled:this.disablePrev},n.createElement(g.FontAwesomeIcon,{icon:"angle-left"})),n.createElement("span",null,Object(v.c)("auditLog.grid.footer.pagination.text1")," ",this.state.currentPage," ",Object(v.c)("auditLog.grid.footer.pagination.text2")," ",this.state.totalPages),n.createElement("button",{type:"button",onClick:this.onBtNext,disabled:this.disableNext},n.createElement(g.FontAwesomeIcon,{icon:"angle-right"})),n.createElement("button",{type:"button",onClick:this.onBtLast,disabled:this.disableNext},n.createElement(g.FontAwesomeIcon,{icon:"angle-double-right"}))),n.createElement("div",{className:"ag-grid-footer-cell align-right go-to-page-section"},n.createElement("button",{onClick:this.goToPage,className:"go-to-page"},Object(v.c)("auditLog.grid.footer.gotopage.title")),n.createElement("input",{id:"pagination-page",className:"pagination-input",placeholder:"page #",value:this.state.value,onChange:this.handleChange,type:"text",name:"page__num",disabled:this.disableGoToPage})))),this.state.hasExportFailed&&n.createElement(x.a,{message:this.state.snackBarMessage,type:""}))}}P.contextType=y.b},,,,,,,function(e,t,i){var n=i(8),o=i(70);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};n(o,a);e.exports=o.locals||{}},function(e,t,i){(t=i(9)(!1)).push([e.i,'.tooltip{position:relative;display:inline;align-content:center}.tooltip .tooltip__text{width:200px;z-index:1;white-space:normal;margin:10px 10px 10px 10px;background:#fff;color:#27394f;padding:4px 8px;font-size:12px;line-height:1.4;min-width:100px;text-align:center;border-radius:6px;border:1px solid #000;transition:opacity 1s}.tooltip .tooltip__text::after{content:"";position:absolute;top:100%;left:50%;margin-left:-5px;border-width:5px;border-style:solid;border-color:#fff transparent transparent transparent}.ag-root-wrapper{overflow:visible !important}.ag-root{overflow:visible !important}.ag-header{overflow:visible !important}.ag-header-viewport{overflow:visible !important}',""]),e.exports=t},function(e,t,i){var n=i(8),o=i(72);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};n(o,a);e.exports=o.locals||{}},function(e,t,i){(t=i(9)(!1)).push([e.i,".custom-tooltip{position:absolute;border:1px solid #6495ed;color:#000;pointer-events:none;transition:opacity 1s;background-color:#fff}.custom-tooltip.ag-tooltip-hiding{opacity:0}.custom-tooltip p{margin:5px;white-space:nowrap}",""]),e.exports=t},function(e,t){e.exports=require("ag-grid-community/dist/styles/ag-theme-balham-dark.css")},function(e,t,i){var n=i(8),o=i(75);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};n(o,a);e.exports=o.locals||{}},function(e,t,i){(t=i(9)(!1)).push([e.i,'.agGrid-footer{background:#2d3436;height:26px}.agGrid-footer .ag-grid-footer-cell{width:33%;display:inline-block}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}@keyframes spin{to{-webkit-transform:rotate(360deg)}}@-webkit-keyframes spin{to{-webkit-transform:rotate(360deg)}}.align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}.export-to-csv{align-content:left;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;text-decoration:underline;cursor:pointer}.data-export-info-icon{color:#d0d0d0;padding-left:5px;padding-top:4px;font-size:12px}.agGrid-Paginition{display:inline-block}.agGrid-Paginition button{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.agGrid-Paginition button:disabled{color:#8c8c8c;pointer-events:none}.agGrid-Paginition span{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.go-to-page{padding-top:2px;padding-right:4px;align-content:right;color:#f5f5f5;background:#2d3436;border:none !important;font-size:12px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;outline:none;text-decoration:underline}.pagination-input{float:right;width:75px;margin-top:2px;font-size:12px;background-color:#262c2e;color:#f5f5f5;border:1px solid #f5f5f5;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}::placeholder{color:#f5f5f5}.overlay{margin-top:65px;margin-left:8px;left:0;top:0;width:98.8%;height:400px;position:absolute;background:#000}.overlay__inner{left:0;top:0;width:100%;height:400px;position:absolute}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}.export-loading-text{left:38%;top:25%;color:#fff;position:absolute}@keyframes spin{100%{transform:rotate(360deg)}}@media only screen and (min-width: 320px)and (max-width: 479px){.agGrid-footer{height:50px}.agGrid-footer .ag-grid-footer-cell{width:50%}.agGrid-footer .agGrid-Paginition{text-align:right}.agGrid-footer .go-to-page-section{margin:0px 25%;text-align:center}.agGrid-footer .go-to-page-section .pagination-input{float:none}.overlay .export-loading-text{left:14%}.overlay .loader{width:50px;height:50px;left:38%}}',""]),e.exports=t}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,