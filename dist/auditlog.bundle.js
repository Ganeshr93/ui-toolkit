!function(t,e){for(var i in e)t[i]=e[i]}(exports,function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=83)}([function(t,e){t.exports=require("react")},function(t,e,i){"use strict";i.d(e,"a",(function(){return l})),i.d(e,"f",(function(){return d})),i.d(e,"i",(function(){return c})),i.d(e,"h",(function(){return p})),i.d(e,"j",(function(){return u})),i.d(e,"k",(function(){return g})),i.d(e,"b",(function(){return h})),i.d(e,"d",(function(){return f})),i.d(e,"g",(function(){return x})),i.d(e,"c",(function(){return y})),i.d(e,"l",(function(){return w})),i.d(e,"m",(function(){return A})),i.d(e,"e",(function(){return C}));var n=i(18),o=i.n(n),a=i(19),r=i.n(a);const s=t=>Array.isArray(t)?t.map(s):null!==t&&C("object"==typeof t)?Object.entries(t).reduce((t,[e,i])=>(t[r()(e)]=s(i),t),{}):t,l=(t,e)=>((t,e)=>Object.keys(e).reduce((i,n)=>o.a.copy(n,e[n],t,i),{}))(s(t),e),d=t=>"function"==typeof t,c=t=>t>=8&&t<=32,p=t=>new RegExp("^[a-zA-Z0-9$@$!%*#?&-_~^]+$").test(t),u=t=>new RegExp("^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9$@$!%*#?&-_~^]{8,32}$").test(t),g=t=>new RegExp("^(102[4-9]|10[3-9][0-9]|1[1-9][0-9]{2}|[2-9][0-9]{3}|[1-3][0-9]{4}|4[0-8][0-9]{3}|490[0-9]{2}|491[0-4][0-9]|4915[01])$").test(t),h=t=>!C(t)||new RegExp("[^a-zA-Z0-9._-]").test(t),f=(t,e)=>3===t?m(e):6===t?v(e):201===t?b(e):"",m=t=>new RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(t),v=t=>new RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(t),b=t=>/^(?=.{1,254}$)((?=[a-z0-9-]{1,63}\.)(xn--+)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}$/.test(t),x=(...t)=>t.filter(t=>!!C(t)).join(" ").trim(),y=t=>{const e={"#":"%23","%":"%25"};return t.replace(/#|%/g,t=>e[t])},w=(t,e)=>{const i={Accept:"application/json","Content-Type":"application/json"};return C(e)?i["X-MPS-API-Key"]=t:i["X-RPS-API-Key"]=t,i},A=t=>!!C(/(\.pfx)$/i.exec(t)),C=t=>null!=t&&""!==t&&!1!==t&&0!==t},function(t,e,i){"use strict";i.d(e,"a",(function(){return r})),i.d(e,"c",(function(){return s})),i.d(e,"b",(function(){return l}));var n=i(11),o=i.n(n),a=i(1);const r=t=>t.map(t=>{const e=Object.assign({},t.headerComponentParams),i=Object(a.e)(t.headerName)?o.a.t(t.headerName):void 0,n=Object(a.e)(t.headerTooltip)?o.a.t(t.headerTooltip):i;return e.description=Object(a.e)(t.headerComponentParams)&&Object(a.e)(t.headerComponentParams.description)?o.a.t(t.headerComponentParams.description):i,Object.assign(Object.assign({},t),{headerName:i,headerComponentParams:e,headerTooltip:n})}),s=t=>o.a.t(t),l=(t,e)=>o.a.t(t,{translate:e})},,,function(t,e){t.exports=require("@fortawesome/react-fontawesome")},function(t,e,i){"use strict";i.d(e,"a",(function(){return a}));var n=i(1),o=function(t,e,i,n){return new(i||(i=Promise))((function(o,a){function r(t){try{l(n.next(t))}catch(t){a(t)}}function s(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,s)}l((n=n.apply(t,e||[])).next())}))};class a{static get(t,e,i={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(e);return yield a.fetch(t,Object.assign(Object.assign({},i),{method:"GET",headers:o}))}))}static post(t,e={},i,r,s={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(i,r);return Object(n.e)(r)?yield a.fetch(t,Object.assign(Object.assign({},s),{method:"POST",body:e,headers:o})):yield a.fetchRPS(t,Object.assign(Object.assign({},s),{method:"POST",body:e,headers:o}))}))}static delete(t,e,i={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(e);return yield a.fetchRPS(t,Object.assign(Object.assign({},i),{method:"DELETE",headers:o}))}))}static patch(t,e={},i,r={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(i);return yield a.fetchRPS(t,Object.assign(Object.assign({},r),{method:"PATCH",body:e,headers:o}))}))}static fetch(t,e={}){return o(this,void 0,void 0,(function*(){return e.mode="cors",e.credentials="include",e.withCredentials=!0,yield fetch(t,e).then(t=>o(this,void 0,void 0,(function*(){return yield t.json()})))}))}static fetchRPS(t,e={}){return o(this,void 0,void 0,(function*(){return yield fetch(t,e).then(t=>o(this,void 0,void 0,(function*(){return{status:t.status,data:204===t.status?null:yield t.json()}})))}))}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return a})),i.d(e,"c",(function(){return r})),i.d(e,"a",(function(){return s}));var n=i(0),o=i.n(n);const a=o.a.createContext({data:{}});class r extends o.a.Component{render(){return o.a.createElement(a.Provider,{value:{data:this.props.data}},this.props.children)}}const s=({children:t})=>o.a.createElement(a.Consumer,null,t)},function(t,e,i){"use strict";var n=i(0),o=i.n(n),a=i(12);const r=i.n(a).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:t})=>s(t)};
border: ${({type:t})=>"1px solid "+s(t)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,s=t=>"success"===t?"#4caf50":"warning"===t?"#ff9800":"error"===t?"#f44336":"#000000";e.a=({message:t,type:e})=>o.a.createElement(r,{type:e},t)},function(t,e,i){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),r=[];function s(t){for(var e=-1,i=0;i<r.length;i++)if(r[i].identifier===t){e=i;break}return e}function l(t,e){for(var i={},n=[],o=0;o<t.length;o++){var a=t[o],l=e.base?a[0]+e.base:a[0],d=i[l]||0,c="".concat(l," ").concat(d);i[l]=d+1;var p=s(c),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(r[p].references++,r[p].updater(u)):r.push({identifier:c,updater:m(u,e),references:1}),n.push(c)}return n}function d(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=i.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var r=a(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,p=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function u(t,e,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=p(e,o);else{var a=document.createTextNode(o),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(a,r[e]):t.appendChild(a)}}function g(t,e,i){var n=i.css,o=i.media,a=i.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var h=null,f=0;function m(t,e){var i,n,o;if(e.singleton){var a=f++;i=h||(h=d(e)),n=u.bind(null,i,a,!1),o=u.bind(null,i,a,!0)}else i=d(e),n=g.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var i=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var o=s(i[n]);r[o].references--}for(var a=l(t,e),d=0;d<i.length;d++){var c=s(i[d]);0===r[c].references&&(r[c].updater(),r.splice(c,1))}i=a}}}},function(t,e,i){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var o=(r=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[i].concat(a).concat([o]).join("\n")}var r,s,l;return[i].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var a=0;a<this.length;a++){var r=this[a][0];null!=r&&(o[r]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);n&&o[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),e.push(l))}},e}},function(t,e){t.exports=require("i18next")},function(t,e){t.exports=require("styled-components")},,,,function(t,e){t.exports=require("@fortawesome/free-solid-svg-icons")},function(t,e){t.exports=require("@fortawesome/fontawesome-svg-core")},function(t,e){t.exports=require("dot-object")},function(t,e){t.exports=require("camelcase")},,,,,function(t,e){t.exports=require("ag-grid-react")},,,,,function(t,e){t.exports=require("ag-grid-community/dist/styles/ag-grid.css")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){t.exports=require("moment")},function(t,e){t.exports=require("export-to-csv")},,,,function(t,e,i){"use strict";i.r(e),i.d(e,"AuditLog",(function(){return E}));var n=i(0),o=i(24),a=i(78),r=i.n(a),s=i(1);const l={checkForEmpty:(t,e="---")=>t||e},{checkForEmpty:d}=l,c={auditappid:{headerName:"auditLog.grid.column.auditappid",field:"auditAppId",headerComponentParams:{description:"auditLog.grid.column.auditappiddescription"}},eventid:{headerName:"auditLog.grid.column.eventId",field:"eventId",headerComponentParams:{description:"auditLog.grid.column.eventIddescription"}},initiatortype:{headerName:"auditLog.grid.column.initiatortype",field:"initiatorType"},auditapp:{headerName:"auditLog.grid.column.auditapp",field:"auditApp",headerComponentParams:{description:"auditLog.grid.column.auditappdescription",enableSorting:!0},tooltipField:"auditApp",minWidth:150},event:{headerName:"auditLog.grid.column.event",field:"event",headerComponentParams:{description:"auditLog.grid.column.eventdescription"},tooltipField:"event",minWidth:150},initiator:{headerName:"auditLog.grid.column.initiator",field:"initiator",headerComponentParams:{description:"auditLog.grid.column.initiatordescription"},minWidth:150},time:{headerName:"auditLog.grid.column.time",field:"time",cellRendererFramework:({value:t})=>(t=>{if(Object(s.e)(t)){const e=r.a.utc(t).local();return d(e.unix()>0?e.format("YYYY-MM-DD HH:mm"):"")}return t})(t)||"",headerComponentParams:{description:"auditLog.grid.column.timedescription"},minWidth:150},mclocationtype:{headerName:"auditLog.grid.column.mclocationtype",field:"mCLocationType",headerComponentParams:{description:"auditLog.grid.column.mclocationtypedescription"}},netaddress:{headerName:"auditLog.grid.column.netaddress",field:"netAddress",headerComponentParams:{description:"auditLog.grid.column.netaddressdescription"},minWidth:150},exstr:{headerName:"auditLog.grid.column.exstr",field:"exStr",headerComponentParams:{description:"auditLog.grid.column.exstrdescription"},minWidth:150}},p={auditAppId:"auditAppId",eventId:"eventId",initiator:"initiator",time:"time",auditApp:"auditApp",event:"event",netAddress:"netAddress",exStr:"exStr"};var u=i(6);i(91);const g=t=>n.createElement("div",{className:"tooltip"},n.createElement("span",{style:t.styles,id:"tooltip-content",className:"tooltip__text"},t.message));var h=i(5);class f extends n.Component{constructor(t){super(t),this.tooltipStyles={},this.adjustTooltipStyle=()=>{this.tooltipStyles.left=0,this.tooltipStyles.marginLeft=0,this.tooltipStyles.width="130px",this.props.description.length<34?this.tooltipStyles.top="-48px":this.props.description.length<68?this.tooltipStyles.top="-64px":this.tooltipStyles.top="-68px"},this.prepareTooltipStyle=t=>{const e=document.getElementById("grid-wrapper").getBoundingClientRect().left,i=t.target.getBoundingClientRect();this.tooltipStyles={},this.tooltipStyles.position="fixed",this.tooltipStyles.left=i.left-(100+i.width/2)-e,this.props.description.length<34?this.tooltipStyles.top="-30px":this.props.description.length<68?this.tooltipStyles.top="-48px":this.tooltipStyles.top="-60px",this.tooltipStyles.left<0&&this.adjustTooltipStyle()},this.handleMouseClick=t=>{this.prepareTooltipStyle(t),this.setState((t,e)=>({isMouseOver:!0,message:e.description}))},this.handleMouseLeave=()=>{this.setState((t,e)=>({isMouseOver:!1,message:""}))},this.state={isMouseOver:!1,message:""}}render(){const t=n.createElement("div",{className:"customHeaderMenuButton "+this.props.displayName,onClick:this.handleMouseClick,onMouseLeave:this.handleMouseLeave},n.createElement(h.FontAwesomeIcon,{className:this.props.displayName,icon:"info-circle"}));return n.createElement(n.Fragment,null,this.state.isMouseOver&&n.createElement(g,{message:this.state.message,styles:this.tooltipStyles}),n.createElement("div",{style:{display:"flex"}},this.props.displayName,"   ",t))}}i(93);class m extends n.Component{getReactContainerClasses(){return["custom-tooltip"]}render(){const{api:t,rowIndex:e,column:i}=this.props,o=Object(s.e)(t.getDisplayedRowAtIndex(e))?t.getDisplayedRowAtIndex(e).data:"",a="auditApp"===i.colDef.field,r="event"===i.colDef.field;return n.createElement(n.Fragment,null,a&&Object(s.e)(o)?n.createElement("div",{className:"custom-tooltip"},n.createElement("p",null,n.createElement("span",null,"Role Name:",o.auditApp)),n.createElement("p",null,n.createElement("span",null,"Role ID: ",o.auditAppId))):null,r&&Object(s.e)(o)?n.createElement("div",{className:"custom-tooltip"},n.createElement("p",null,n.createElement("span",null,"Event: ",o.event)),n.createElement("p",null,n.createElement("span",null,"Event ID: ",o.eventId))):null)}}var v=i(79),b=i(8),x=i(17),y=i(16),w=(i(29),i(95),i(96),i(2)),A=i(7),C=function(t,e,i,n){return new(i||(i=Promise))((function(o,a){function r(t){try{l(n.next(t))}catch(t){a(t)}}function s(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,s)}l((n=n.apply(t,e||[])).next())}))};const P=new v.ExportToCsv({filename:"AuditLog"}),S=Object.keys(y).filter(t=>"fas"!==t&&"prefix"!==t).map(t=>y[t]);x.library.add(...S);class E extends n.Component{constructor(t){super(t),this.disableNext=!1,this.disablePrev=!0,this.disableGoToPage=!1,this.adjustRowIndex=(t,e)=>e>t?1:Math.abs(t-(e-1)),this.transformResponse=t=>(t.forEach(t=>{t.netAddress=t.netAddress.replace(/[^\d.-]/g,""),t.time=t.time.substring(0,t.time.length-5)}),t),this.fetchAuditLog=t=>C(this,void 0,void 0,(function*(){try{const{mpsKey:e}=this.context.data,i=JSON.stringify({apikey:"xxxxx",method:"AuditLog",payload:{guid:this.props.deviceId,startIndex:t}}),n=null!=this.props.mpsServer?this.props.mpsServer:"";return yield u.a.post(`https://${n}/amt`,i,e,!0)}catch(t){console.log("An error occured")}})),this.onGridReady=t=>{let e=0,i=0;const n="Sorry! Something went wrong. try again later";this.gridApi=t.api,this.gridColumnApi=t.columnApi,this.gridApi.sizeColumnsToFit();const o={rowCount:null,getRows:t=>{this.gridApi.showLoadingOverlay(),0===i?this.fetchAuditLog(t.startRow).then(n=>{void 0!==n.records?(n.records=this.transformResponse(n.records.map(t=>Object(s.a)(t,p))),this.gridApi.hideOverlay(),t.successCallback(n.records.reverse(),n.totalCnt),e=n.totalCnt,i=e-20):(this.setState({errorMsg:n.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay())}).catch(()=>{this.setState({errorMsg:n}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}):(i=this.adjustRowIndex(e,t.endRow),this.fetchAuditLog(i).then(i=>{if(void 0!==i.records){if(i.records=this.transformResponse(i.records.map(t=>Object(s.a)(t,p))),this.gridApi.hideOverlay(),this.gridApi.paginationGetTotalPages()===parseInt(this.gridApi.paginationGetCurrentPage())+1){const t=e%10;e%10>0&&(i.records=i.records.slice(0,t))}t.successCallback(i.records.reverse(),i.totalCnt),e=i.totalCnt}else this.setState({errorMsg:i.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}).catch(()=>{this.setState({errorMsg:n}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}))}};t.api.setDatasource(o)},this.fetchCompleteAuditLog=()=>C(this,void 0,void 0,(function*(){const t=this.gridApi.paginationGetRowCount();let e=[{auditAppId:"Role ID",eventId:"Event ID",initiator:"Initiator",auditApp:"Role Name",event:"Event",netAddress:"Network Address",time:"Device Time(UTC)",exStr:"Event Details"}];for(let i=0;i<this.gridApi.paginationGetTotalPages();i++){const n=(i+1)*this.gridApi.paginationGetPageSize()-1,o=0===i?0:i+1!==this.gridApi.paginationGetTotalPages()?t-n:1;let a=yield this.fetchAuditLog(o);if(void 0===a.records||Object(s.e)(a.error)){this.setState({hasExportFailed:!0,isExporting:!1,snackBarMessage:"Something went wrong! Please try again later."}),setTimeout(()=>{this.setState({hasExportFailed:!1})},4e3);break}if(1===o){const e=t%10;a.records=a.records.slice(0,e)}a=a.records.map(t=>Object(s.a)(t,p)),e=e.concat(this.transformResponse(a).reverse())}this.setState({isExporting:!1,completeAuditLog:e,downloadCSV:!0}),P.generateCsv(this.state.completeAuditLog)})),this.onGridSizeChanged=t=>{var e;const i=null===(e=document.getElementById("grid-wrapper"))||void 0===e?void 0:e.offsetWidth,n=[],o=[];let a=0;const r=t.columnApi.getAllColumns();for(let t=0;t<r.length;t++){const e=r[t];a+=parseInt(e.getMinWidth()),a>i?o.push(e.colId):n.push(e.colId)}t.columnApi.setColumnsVisible(n,!0),t.columnApi.setColumnsVisible(o,!1),t.api.sizeColumnsToFit()},this.togglePaginationButtons=t=>{switch(t){case"first":this.disablePrev=!0,this.disableNext=!1;break;case"next":this.disablePrev=!1,this.gridApi.paginationGetTotalPages()===parseInt(this.gridApi.paginationGetCurrentPage())+1&&(this.disableNext=!0);break;case"prev":this.disableNext=!1,0===this.gridApi.paginationGetCurrentPage()&&(this.disablePrev=!0);break;case"last":this.disableNext=!0,this.disablePrev=!1;break;case"fromgoto":this.disableNext=!1,this.disablePrev=!1}},this.onPaginationChanged=()=>{Object(s.e)(this.gridApi)&&this.setState({currentPage:parseInt(this.gridApi.paginationGetCurrentPage())+1,totalPages:this.gridApi.paginationGetTotalPages()})},this.goToPage=()=>{this.gridApi.paginationGoToPage(this.state.value-1);const t=parseInt(this.state.value);switch(!0){case t<=1:this.togglePaginationButtons("first");break;case t>1&&t<this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("fromgoto");break;case t>=this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("last")}},this.onBtFirst=()=>{this.gridApi.paginationGoToFirstPage(),this.togglePaginationButtons("first")},this.onBtLast=()=>{this.gridApi.paginationGoToLastPage(),this.togglePaginationButtons("last")},this.onBtNext=()=>{this.gridApi.paginationGoToNextPage(),this.togglePaginationButtons("next")},this.onBtPrevious=()=>{this.gridApi.paginationGoToPreviousPage(),this.togglePaginationButtons("prev")},this.onBtExport=()=>{this.setState((t,e)=>({isExporting:!0})),this.fetchCompleteAuditLog().catch(()=>console.info("error occured"))},this.handleChange=t=>{this.setState({value:t.target.value.replace(/[^\d-]/g,"")})},this.columnDefs=[c.initiator,c.auditapp,c.event,c.netaddress,c.time,c.exstr],this.state={rowData:[],errorMsg:"",value:"",currentPage:0,totalPages:0,showTooltip:!1,isExporting:!1,hasExportFailed:!1,snackBarMessage:"",completeAuditLog:[],downloadCSV:!1}}render(){const t=`<div style={{width: "100%", fontSize: "25px", backgroundColor: "#ed645a"}}><span style="padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow; color: red;">${this.state.errorMsg}</span></div>`,e={agColumnHeader:f,customTooltip:m};return n.createElement(n.Fragment,null,this.state.isExporting?n.createElement("div",{className:"overlay"},n.createElement("div",{className:"overlay__inner"},n.createElement("span",{className:"export-loading-text"},"Please wait while we process the request"),n.createElement("span",{className:"loader"}))):n.createElement("div",null,n.createElement("div",{id:"grid-wrapper",style:{width:"100%",height:"375px"}},n.createElement("div",{className:"ag-theme-balham-dark",style:{height:"100%",width:"100%"}},n.createElement(o.AgGridReact,{columnDefs:Object(w.a)(this.columnDefs),defaultColDef:{tooltipComponent:"customTooltip"},pagination:!0,paginationPageSize:10,cacheBlockSize:10,rowModelType:"infinite",infiniteInitialRowCount:1,onGridReady:this.onGridReady,rowData:this.state.rowData,overlayNoRowsTemplate:t,onPaginationChanged:this.onPaginationChanged,suppressPaginationPanel:!0,suppressScrollOnNewData:!0,onGridSizeChanged:this.onGridSizeChanged,frameworkComponents:e}))),n.createElement("div",{className:"agGrid-footer"},n.createElement("div",{className:"ag-grid-footer-cell align-left"},this.state.showTooltip&&n.createElement(g,{message:"Exports only cached entries",styles:{position:"absolute",bottom:"100%",left:"24px",width:"100px",margin:"0px"}}),n.createElement("button",{className:"export-to-csv",onClick:this.onBtExport},n.createElement(h.FontAwesomeIcon,{icon:"file-export"}),Object(w.c)("auditLog.grid.footer.exporttocsv.title"))),n.createElement("div",{className:"ag-grid-footer-cell agGrid-Paginition align-center"},n.createElement("button",{type:"button",onClick:this.onBtFirst,disabled:this.disablePrev},n.createElement(h.FontAwesomeIcon,{icon:"angle-double-left"})),n.createElement("button",{type:"button",onClick:this.onBtPrevious,disabled:this.disablePrev},n.createElement(h.FontAwesomeIcon,{icon:"angle-left"})),n.createElement("span",null,Object(w.c)("auditLog.grid.footer.pagination.text1")," ",this.state.currentPage," ",Object(w.c)("auditLog.grid.footer.pagination.text2")," ",this.state.totalPages),n.createElement("button",{type:"button",onClick:this.onBtNext,disabled:this.disableNext},n.createElement(h.FontAwesomeIcon,{icon:"angle-right"})),n.createElement("button",{type:"button",onClick:this.onBtLast,disabled:this.disableNext},n.createElement(h.FontAwesomeIcon,{icon:"angle-double-right"}))),n.createElement("div",{className:"ag-grid-footer-cell align-right go-to-page-section"},n.createElement("button",{onClick:this.goToPage,className:"go-to-page"},Object(w.c)("auditLog.grid.footer.gotopage.title")),n.createElement("input",{id:"pagination-page",className:"pagination-input",placeholder:"page #",value:this.state.value,onChange:this.handleChange,type:"text",name:"page__num",disabled:this.disableGoToPage})))),this.state.hasExportFailed&&n.createElement(b.a,{message:this.state.snackBarMessage,type:""}))}}E.contextType=A.b},,,,,,,,function(t,e,i){var n=i(9),o=i(92);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var a={insert:"head",singleton:!1};n(o,a);t.exports=o.locals||{}},function(t,e,i){(e=i(10)(!1)).push([t.i,'.tooltip{position:relative;display:inline;align-content:center}.tooltip .tooltip__text{width:200px;z-index:1;white-space:normal;margin:10px 10px 10px 10px;background:#fff;color:#27394f;padding:4px 8px;font-size:12px;line-height:1.4;min-width:100px;text-align:center;border-radius:6px;border:1px solid #000;transition:opacity 1s}.tooltip .tooltip__text::after{content:"";position:absolute;top:100%;left:50%;margin-left:-5px;border-width:5px;border-style:solid;border-color:#fff transparent transparent transparent}.ag-root-wrapper{overflow:visible !important}.ag-root{overflow:visible !important}.ag-header{overflow:visible !important}.ag-header-viewport{overflow:visible !important}',""]),t.exports=e},function(t,e,i){var n=i(9),o=i(94);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var a={insert:"head",singleton:!1};n(o,a);t.exports=o.locals||{}},function(t,e,i){(e=i(10)(!1)).push([t.i,".custom-tooltip{position:absolute;border:1px solid #6495ed;color:#000;pointer-events:none;transition:opacity 1s;background-color:#fff}.custom-tooltip.ag-tooltip-hiding{opacity:0}.custom-tooltip p{margin:5px;white-space:nowrap}",""]),t.exports=e},function(t,e){t.exports=require("ag-grid-community/dist/styles/ag-theme-balham-dark.css")},function(t,e,i){var n=i(9),o=i(97);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var a={insert:"head",singleton:!1};n(o,a);t.exports=o.locals||{}},function(t,e,i){(e=i(10)(!1)).push([t.i,'.agGrid-footer{background:#2d3436;height:26px}.agGrid-footer .ag-grid-footer-cell{width:33%;display:inline-block}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}@keyframes spin{to{-webkit-transform:rotate(360deg)}}@-webkit-keyframes spin{to{-webkit-transform:rotate(360deg)}}.align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}.export-to-csv{align-content:left;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;text-decoration:underline;cursor:pointer}.data-export-info-icon{color:#d0d0d0;padding-left:5px;padding-top:4px;font-size:12px}.agGrid-Paginition{display:inline-block}.agGrid-Paginition button{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.agGrid-Paginition button:disabled{color:#8c8c8c;pointer-events:none}.agGrid-Paginition span{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.go-to-page{padding-top:2px;padding-right:4px;align-content:right;color:#f5f5f5;background:#2d3436;border:none !important;font-size:12px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;outline:none;text-decoration:underline}.pagination-input{float:right;width:75px;margin-top:2px;font-size:12px;background-color:#262c2e;color:#f5f5f5;border:1px solid #f5f5f5;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}::placeholder{color:#f5f5f5}.overlay{margin-top:65px;margin-left:8px;left:0;top:0;width:98.8%;height:400px;position:absolute;background:#000}.overlay__inner{left:0;top:0;width:100%;height:400px;position:absolute}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}.export-loading-text{left:38%;top:25%;color:#fff;position:absolute}@keyframes spin{100%{transform:rotate(360deg)}}@media only screen and (min-width: 320px)and (max-width: 479px){.agGrid-footer{height:50px}.agGrid-footer .ag-grid-footer-cell{width:50%}.agGrid-footer .agGrid-Paginition{text-align:right}.agGrid-footer .go-to-page-section{margin:0px 25%;text-align:center}.agGrid-footer .go-to-page-section .pagination-input{float:none}.overlay .export-loading-text{left:14%}.overlay .loader{width:50px;height:50px;left:38%}}',""]),t.exports=e}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,