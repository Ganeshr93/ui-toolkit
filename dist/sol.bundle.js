!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(s,a,function(t){return e[t]}.bind(null,a));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=62)}([function(e,t){e.exports=require("react")},function(e,t,r){"use strict";r.d(t,"a",(function(){return n})),r.d(t,"c",(function(){return o})),r.d(t,"b",(function(){return i}));var s=r(10),a=r.n(s);const n=e=>e.map(e=>{let t=Object.assign({},e.headerComponentParams);const r=e.headerName?a.a.t(e.headerName):void 0,s=e.headerTooltip?a.a.t(e.headerTooltip):r;return t.description=e.headerComponentParams&&e.headerComponentParams.description?a.a.t(e.headerComponentParams.description):r,Object.assign(Object.assign({},e),{headerName:r,headerComponentParams:t,headerTooltip:s})}),o=e=>a.a.t(e),i=(e,t)=>a.a.t(e,{translate:t})},function(e,t,r){"use strict";r.d(t,"a",(function(){return c})),r.d(t,"e",(function(){return l})),r.d(t,"h",(function(){return h})),r.d(t,"g",(function(){return u})),r.d(t,"i",(function(){return d})),r.d(t,"j",(function(){return p})),r.d(t,"b",(function(){return f})),r.d(t,"d",(function(){return m})),r.d(t,"f",(function(){return v})),r.d(t,"c",(function(){return y})),r.d(t,"k",(function(){return C})),r.d(t,"l",(function(){return w}));var s=r(14),a=r.n(s),n=r(15),o=r.n(n);const i=e=>Array.isArray(e)?e.map(i):null!==e&&"object"==typeof e?Object.entries(e).reduce((e,[t,r])=>(e[o()(t)]=i(r),e),{}):e,c=(e,t)=>((e,t)=>Object.keys(t).reduce((r,s)=>a.a.copy(s,t[s],e,r),{}))(i(e),t),l=e=>"function"==typeof e,h=e=>e>=8&&e<=32,u=e=>new RegExp("^[a-zA-Z0-9$@$!%*#?&-_~^]+$").test(e),d=e=>new RegExp("^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9$@$!%*#?&-_~^]{8,32}$").test(e),p=e=>new RegExp("^(102[4-9]|10[3-9][0-9]|1[1-9][0-9]{2}|[2-9][0-9]{3}|[1-3][0-9]{4}|4[0-8][0-9]{3}|490[0-9]{2}|491[0-4][0-9]|4915[01])$").test(e),f=e=>!e||new RegExp("[^a-zA-Z0-9._-]").test(e),m=(e,t)=>3==e?g(t):6==e?S(t):201==e?b(t):"",g=e=>new RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e),S=e=>new RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e),b=e=>/^(?=.{1,254}$)((?=[a-z0-9-]{1,63}\.)(xn--+)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}$/.test(e),v=(...e)=>e.filter(e=>!!e).join(" ").trim(),y=e=>{const t={"#":"%23","%":"%25"};return e.replace(/#|%/g,e=>t[e])},C=(e,t)=>{const r={Accept:"application/json","Content-Type":"application/json"};return t?r["X-MPS-API-Key"]=e:r["X-RPS-API-Key"]=e,r},w=e=>!!/(\.pfx)$/i.exec(e)},function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));class s{static ReadShort(e,t){return(e.charCodeAt(t)<<8)+e.charCodeAt(t+1)}static ReadShortX(e,t){return(e.charCodeAt(t+1)<<8)+e.charCodeAt(t)}static ReadInt(e,t){return 16777216*e.charCodeAt(t)+(e.charCodeAt(t+1)<<16)+(e.charCodeAt(t+2)<<8)+e.charCodeAt(t+3)}static ReadSInt(e,t){return(e.charCodeAt(t)<<24)+(e.charCodeAt(t+1)<<16)+(e.charCodeAt(t+2)<<8)+e.charCodeAt(t+3)}static ReadIntX(e,t){return 16777216*e.charCodeAt(t+3)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+1)<<8)+e.charCodeAt(t)}static ShortToStr(e){return String.fromCharCode(e>>8&255,255&e)}static ShortToStrX(e){return String.fromCharCode(255&e,e>>8&255)}static IntToStr(e){return String.fromCharCode(e>>24&255,e>>16&255,e>>8&255,255&e)}static IntToStrX(e){return String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)}static MakeToArray(e){return e&&null!=e&&"object"!=typeof e?[e]:e}static SplitArray(e){return e.split(",")}static Clone(e){return JSON.parse(JSON.stringify(e))}static EscapeHtml(e){return"string"==typeof e?e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof e||"number"==typeof e?e:void 0}static ArrayElementMove(e,t,r){e.splice(r,0,e.splice(t,1)[0])}static ObjectToStringEx(e,t){var r="";if(0!=e&&(!e||null==e))return"(Null)";if(e instanceof Array)for(var s in e)r+="<br />"+this.gap(t)+"Item #"+s+": "+this.ObjectToStringEx(e[s],t+1);else if(e instanceof Object)for(var s in e)r+="<br />"+this.gap(t)+s+" = "+this.ObjectToStringEx(e[s],t+1);else r+=this.EscapeHtml(e);return r}static ObjectToStringEx2(e,t){var r="";if(0!=e&&(!e||null==e))return"(Null)";if(e instanceof Array)for(var s in e)r+="\r\n"+this.gap2(t)+"Item #"+s+": "+this.ObjectToStringEx2(e[s],t+1);else if(e instanceof Object)for(var s in e)r+="\r\n"+this.gap2(t)+s+" = "+this.ObjectToStringEx2(e[s],t+1);else r+=this.EscapeHtml(e);return r}static gap(e){for(var t="",r=0;r<4*e;r++)t+="&nbsp;";return t}static gap2(e){for(var t="",r=0;r<4*e;r++)t+=" ";return t}static ObjectToString(e){return this.ObjectToStringEx(e,0)}static ObjectToString2(e){return this.ObjectToStringEx2(e,0)}static hex2rstr(e){if("string"!=typeof e||0==e.length)return"";for(var t,r="",s=(""+e).match(/../g);t=s.shift();)r+=String.fromCharCode(Number("0x"+t));return r}static char2hex(e){return(e+256).toString(16).substr(-2).toUpperCase()}static rstr2hex(e){var t,r="";for(t=0;t<e.length;t++)r+=this.char2hex(e.charCodeAt(t));return r}static encode_utf8(e){return unescape(encodeURIComponent(e))}static decode_utf8(e){return decodeURIComponent(escape(e))}static data2blob(e){for(var t=new Array(e.length),r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return new Blob([new Uint8Array(t)])}static random(e){return Math.floor(Math.random()*e)}static trademarks(e){return e.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}}},,function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var s=r(2);class a{static get(e,t,r={}){const n=Object(s.k)(t);return a.fetch(e,Object.assign(Object.assign({},r),{method:"GET",headers:n}))}static post(e,t={},r,n,o={}){const i=Object(s.k)(r,n);return n?a.fetch(e,Object.assign(Object.assign({},o),{method:"POST",body:t,headers:i})):a.fetchRPS(e,Object.assign(Object.assign({},o),{method:"POST",body:t,headers:i}))}static delete(e,t,r={}){const n=Object(s.k)(t);return a.fetchRPS(e,Object.assign(Object.assign({},r),{method:"DELETE",headers:n}))}static fetch(e,t={}){return fetch(e,t).then(e=>e.json())}static fetchRPS(e,t={}){return fetch(e,t).then(e=>e.text())}}},function(e,t,r){"use strict";r.d(t,"b",(function(){return o})),r.d(t,"c",(function(){return i})),r.d(t,"a",(function(){return c}));var s=r(0),a=r.n(s),n=function(e,t){var r={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(r[s[a]]=e[s[a]])}return r};const o=a.a.createContext({data:{}});class i extends a.a.Component{constructor(e){super(e)}render(){return a.a.createElement(o.Provider,{value:{data:this.props.data}},this.props.children)}}const c=e=>{var{children:t}=e;n(e,["children"]);return a.a.createElement(o.Consumer,null,t)}},function(e,t,r){"use strict";var s=r(0),a=r.n(s),n=r(11);const o=r.n(n).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:e})=>i(e)};
border: ${({type:e})=>"1px solid "+i(e)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,i=e=>"success"===e?"#4caf50":"warning"===e?"#ff9800":"error"===e?"#f44336":"#000000";t.a=({message:e,type:t})=>a.a.createElement(o,{type:t},e)},function(e,t,r){"use strict";var s,a=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},n=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function i(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function c(e,t){for(var r={},s=[],a=0;a<e.length;a++){var n=e[a],c=t.base?n[0]+t.base:n[0],l=r[c]||0,h="".concat(c," ").concat(l);r[c]=l+1;var u=i(h),d={css:n[1],media:n[2],sourceMap:n[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:h,updater:g(d,t),references:1}),s.push(h)}return s}function l(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var a=r.nc;a&&(s.nonce=a)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var o=n(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,r,s){var a=r?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=u(t,a);else{var n=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(n,o[t]):e.appendChild(n)}}function p(e,t,r){var s=r.css,a=r.media,n=r.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),n&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var f=null,m=0;function g(e,t){var r,s,a;if(t.singleton){var n=m++;r=f||(f=l(t)),s=d.bind(null,r,n,!1),a=d.bind(null,r,n,!0)}else r=l(t),s=p.bind(null,r,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var r=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<r.length;s++){var a=i(r[s]);o[a].references--}for(var n=c(e,t),l=0;l<r.length;l++){var h=i(r[l]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}r=n}}}},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",s=e[3];if(!s)return r;if(t&&"function"==typeof btoa){var a=(o=s,i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(c," */")),n=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[r].concat(n).concat([a]).join("\n")}var o,i,c;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,s){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(s)for(var n=0;n<this.length;n++){var o=this[n][0];null!=o&&(a[o]=!0)}for(var i=0;i<e.length;i++){var c=[].concat(e[i]);s&&a[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),t.push(c))}},t}},function(e,t){e.exports=require("i18next")},function(e,t){e.exports=require("styled-components")},function(e,t,r){"use strict";var s;r.d(t,"a",(function(){return s})),function(e){e[e.VERBOSE=5]="VERBOSE",e[e.INFO=4]="INFO",e[e.DEBUG=3]="DEBUG",e[e.WARNING=2]="WARNING",e[e.ERROR=1]="ERROR"}(s||(s={}))},,function(e,t){e.exports=require("dot-object")},function(e,t){e.exports=require("camelcase")},,,,,,,function(e,t,r){"use strict";r.d(t,"b",(function(){return a})),r.d(t,"a",(function(){return n}));var s=r(5);const a=(e,t,r,a,n)=>{const o=JSON.stringify({apikey:"xxxxx",method:"PowerAction",payload:n?{guid:e,action:t,useSOL:n}:{guid:e,action:t}});return s.a.post(`https://${r}/amt`,o,a,!0)},n=(e,t,r)=>{const a=JSON.stringify({apikey:"xxxxx",method:"PowerState",payload:{guid:e}});return s.a.post(`https://${t}/amt`,a,r,!0)}},function(e,t,r){"use strict";r.d(t,"b",(function(){return s})),r.d(t,"a",(function(){return i}));var s,a=r(3),n=r(40),o=r.n(n);!function(e){e[e.SOL=1]="SOL",e[e.KVM=2]="KVM",e[e.IDER=3]="IDER"}(s||(s={}));class i{constructor(e,t,r,s,a,n,o,i,c,l){this.fileReader=r,this.randomNonceChars="abcdef0123456789",this.host=s,this.port=a,this.user=n,this.pass=o,this.tls=i,this.tlsv1only=c,this.protocol=t,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=l,this.amtAccumulator="",this.authUri="",this.logger=e}getWsLocation(){return this.isBrowser()&&!this.server?window.location.protocol.replace("http","ws")+"//"+window.location.host+window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))+"/webrelay.ashx?p=2&host="+this.host+"&port="+this.port+"&tls="+this.tls+("*"==this.user?"&serverauth=1":"")+(void 0===this.pass?"&serverauth=1&user="+this.user:"")+"&tls1only="+this.tlsv1only:"wss://"+this.server+"/webrelay.ashx?p=2&host="+this.host+"&port="+this.port+"&tls="+this.tls+("*"==this.user?"&serverauth=1":"")+(void 0===this.pass?"&serverauth=1&user="+this.user:"")+"&tls1only="+this.tlsv1only}isBrowser(){try{let e="undefined"!=typeof window;return e&&this.logger.debug("!!!!!BROWSER!!!!!"),e}catch(e){return!1}}start(e){this.connectState=0,this.socket=new e(this.getWsLocation()),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);let t=e=>{this.onSocketData(e.target.result),0==this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))},r=e=>{this.onSocketData(e.target.result),0==this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())};this.fileReader.readAsBinaryString?this.fileReader.onload=t.bind(this):this.fileReader.readAsArrayBuffer&&(this.fileReader.onloadend=r.bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){this.urlvars&&this.urlvars.redirtrace&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose("Connected to websocket server. With protocol "+this.protocol+" (2 = KVM)"),this.logger.info("Start Redirect Session for protocol. "+this.protocol),this.protocol==s.SOL&&this.socketSend(this.RedirectStartSol),this.protocol==s.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol==s.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(e){try{if(this.inDataCount++,"object"==typeof e.data){if(1==this.fileReaderInUse)return void this.fileReaderAcc.push(e.data);if(this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([e.data]));else if(this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(e.data);else{let t="",r=new Uint8Array(e.data),s=r.byteLength;for(let e=0;e<s;e++)t+=String.fromCharCode(r[e]);this.onSocketData(t)}}else this.onSocketData(e.data)}catch(e){this.logger.error(e),this.stop(),this.onError()}}onSocketData(e){if(e&&-1!=this.connectState){if("object"==typeof e){let t="",r=new Uint8Array(e),s=r.byteLength;for(let e=0;e<s;e++)t+=String.fromCharCode(r[e]);e=t}else if("string"!=typeof e)return;if((this.protocol==s.KVM||this.protocol==s.IDER)&&1==this.connectState)return this.onProcessData(e);for(this.amtAccumulator+=e;this.amtAccumulator.length>=1;){let e=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose("Start Redirection Session reply received for "+this.protocol),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;let t=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+t)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),e=13+t;break;default:this.stop()}break;case 20:if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;let t=a.a.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+t)return;let r=this.amtAccumulator.charCodeAt(1),s=this.amtAccumulator.charCodeAt(4),n=[];for(let e=0;e<t;e++)n.push(this.amtAccumulator.charCodeAt(9+e));let o=this.amtAccumulator.substring(9,9+t);if(e=9+t,0==s)n.indexOf(4)>=0?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+a.a.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):n.indexOf(3)>=0?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+a.a.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):n.indexOf(1)>=0?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+a.a.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!=s&&4!=s||1!=r)if(0==r){if(1==this.protocol){let e=1e4,t=100,r=0,s=1e4,n=100,o=0;this.socketSend(String.fromCharCode(32,0,0,0)+a.a.IntToStrX(this.amtSequence++)+a.a.ShortToStrX(e)+a.a.ShortToStrX(t)+a.a.ShortToStrX(r)+a.a.ShortToStrX(s)+a.a.ShortToStrX(n)+a.a.ShortToStrX(o)+a.a.IntToStrX(0))}2==this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3==this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let e=0,t=o.charCodeAt(e),r=o.substring(e+1,e+1+t);e+=t+1;let n=o.charCodeAt(e),i=o.substring(e+1,e+1+n);e+=n+1;let c=0,l=null,h=this.generateRandomNonce(32),u="00000002",d="";4==s&&(c=o.charCodeAt(e),l=o.substring(e+1,e+1+c),e+=c+1,d=u+":"+h+":"+l+":");let p=this.hex_md5(this.hex_md5(this.user+":"+r+":"+this.pass)+":"+i+":"+d+this.hex_md5("POST:"+this.authUri)),f=this.user.length+r.length+i.length+this.authUri.length+h.length+u.length+p.length+7;4==s&&(f+=l.length+1);let m=String.fromCharCode(19,0,0,0,s)+a.a.IntToStrX(f)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(r.length)+r+String.fromCharCode(i.length)+i+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(h.length)+h+String.fromCharCode(u.length)+u+String.fromCharCode(p.length)+p;4==s&&(m+=String.fromCharCode(l.length)+l),this.socketSend(m)}break;case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),e=23,this.socketSend(String.fromCharCode(39,0,0,0)+a.a.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1==this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),e=10;break;case 42:if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");let i=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<i)break;this.onProcessData(this.amtAccumulator.substring(10,i)),e=i;break;case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),e=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),e=this.amtAccumulator.length;break;default:return this.logger.error("Unknown Intel AMT command: "+this.amtAccumulator.charCodeAt(0)+" acclen="+this.amtAccumulator.length),void this.stop()}if(0==e)return;this.amtAccumulator=this.amtAccumulator.substring(e)}}}hex_md5(e){return this.logger.verbose("MD5 the string"),o()(e)}socketSend(e){this.urlvars&&this.urlvars.redirtrace&&this.logger.verbose("REDIR-SEND("+e.length+"): "+a.a.rstr2hex(e));try{if(null!=this.socket&&1==this.socket.readyState){let t=new Uint8Array(e.length);this.logger.verbose("Redir Send("+e.length+"): "+a.a.rstr2hex(e));for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r);this.socket.send(t.buffer)}}catch(e){this.logger.error("Socket send error: "+e)}}send(e){this.logger.verbose("Send called "+e),null!=this.socket&&1==this.connectState&&(this.protocol==s.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+a.a.IntToStrX(this.amtSequence++)+a.a.ShortToStrX(e.length)+e):this.socketSend(e))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+a.a.IntToStrX(this.amtSequence++))}generateRandomNonce(e){let t="";for(let r=0;r<e;r++)t+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return t}onSocketClosed(e){this.urlvars&&this.urlvars.redirtrace&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(e){this.state!=e&&(this.state=e,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}},,,,,,,,function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var s=r(12);class a{constructor(e){this.minLevel=e}log(e,t){switch(e){case s.a.VERBOSE:this.verbose(t);break;case s.a.INFO:this.info(t);break;case s.a.DEBUG:this.debug(t);break;case s.a.WARNING:this.warn(t);break;case s.a.ERROR:this.error(t)}}debug(e){this.minLevel>=s.a.DEBUG&&console.debug(e)}info(e){this.minLevel>=s.a.INFO&&console.info(e)}error(e){this.minLevel>=s.a.ERROR&&console.error(e)}warn(e){this.minLevel>=s.a.WARNING&&console.warn(e)}verbose(e){this.minLevel>=s.a.VERBOSE&&console.log(e)}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));const s=[{value:"2",label:"Power Up"},{value:"101",label:"Reset To BIOS"},{value:"4",label:"Sleep"},{value:"5",label:"Power Cycle"},{value:"7",label:"Hibernate"},{value:"8",label:"Power Down"},{value:"10",label:"Reset"},{value:"12",label:"Soft-Off"},{value:"14",label:"Soft Reset"},{value:"100",label:"Power Up To BIOS"},{value:"400",label:"Reset To PXE"},{value:"401",label:"Power Up To PXE"}]},function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var s=r(0),a=r.n(s);const n=e=>a.a.createElement("select",{onClick:e.onChange,name:"PowerOptions"},a.a.createElement("option",{value:"",selected:!e.isSelected},"Choose"),e.availableOptions.map(({value:e,label:t})=>a.a.createElement("option",{key:e,value:e},t)))},function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));var s=r(0),a=r.n(s),n=r(22),o=r(6);class i extends a.a.Component{constructor(e){super(e),this.getAmtPowerState=()=>{Object(n.a)(this.props.deviceId,this.props.server,this.context.data.mpsKey).then(e=>{this.props.updateParent(),e.powerstate?this.setState({powerState:e.powerstate}):this.setState({powerState:100}),2===e.powerstate?this.props.handlePowerStatus("poweron"):100!==this.state.powerState?this.props.handlePowerStatus("sleep"):this.props.handlePowerStatus("failed")}).catch(e=>{console.info("error",e)})},this.renderPowerState=e=>{switch(e){case 1:case 10:case 11:case 14:case 17:return a.a.createElement("span",{style:{color:"red"}},"Other");case 2:return a.a.createElement("span",{style:{color:"green"}},"Power on");case 3:case 4:return a.a.createElement("span",{style:{color:"red"}},"deep sleep");case 5:case 6:case 8:case 9:case 12:case 13:case 15:case 16:return a.a.createElement("span",{style:{color:"red"}},"Power Off");case 7:return a.a.createElement("span",{style:{color:"red"}},"Hibernate");default:return a.a.createElement("span",{style:{color:"red"}},"Unknown")}},this.state={powerState:0}}componentDidMount(){this.getAmtPowerState(),this.timeInterval=setInterval(()=>this.getAmtPowerState(),6e4)}componentWillUnmount(){clearInterval(this.timeInterval)}render(){const{powerState:e}=this.state;return this.renderPowerState(e)}}i.contextType=o.b},,function(e,t,r){"use strict";r.d(t,"a",(function(){return b}));var s=r(0),a=r.n(s),n=r(5);var o=r(11),i=r.n(o),c=function(e,t){var r={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(r[s[a]]=e[s[a]])}return r};const l=i.a.div`
  display: inline-block;
  vertical-align: middle;
`,h=i.a.svg`
  fill: none;
  stroke: green;
  stroke-width: 2px;
`,u=i.a.input.attrs({type:"checkbox"})`
  border: 0;
  clip: rect(0 0 0 0);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
`,d=i.a.div`
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: ${({disableCheckbox:e})=>p(e)};
  border-radius: 1px solid black;
  transition: all 150ms;

  ${u}:focus + & {
    box-shadow: 0 0 0 1px white;
  }

  ${h} {
    visibility: ${e=>e.checked?"visible":"hidden"}
  }
`,p=e=>!0===e?"#ccc":"white",f=e=>{var{className:t,checked:r,disableCheckbox:s}=e,n=c(e,["className","checked","disableCheckbox"]);return a.a.createElement(l,{className:t},a.a.createElement(u,Object.assign({checked:r},n,{disabled:s})),a.a.createElement(d,{checked:r,disableCheckbox:s},a.a.createElement(h,{viewBox:"0 0 24 24"},a.a.createElement("polyline",{points:"20 6 9 17 4 12"}))))};var m=r(7),g=r(1),S=(r(49),r(6));class b extends s.Component{constructor(e){super(e),this.fetchAmtFeatures=()=>{((e,t,r)=>{const s=JSON.stringify({apikey:"xxxxx",method:"GetAMTFeatures",payload:{guid:e}});return n.a.post(`https://${t}/amt`,s,r,!0)})(this.props.deviceId,this.props.server,this.context.data.mpsKey).then(e=>{200===e.statuscode?this.setState({userConsent:e.payload.userConsent,useKVM:e.payload.KVM,useSOL:e.payload.SOL,useIDER:e.payload.IDER},()=>this.updateCheckboxStatus()):this.props.handleFeatureStatus("failed")}).catch(e=>console.info("error"))},this.updateCheckboxStatus=()=>{const{feature:e}=this.props,{useKVM:t,useSOL:r,useIDER:s}=this.state;e===Object(g.c)("amtFeatures.features.kvm")&&t||e===Object(g.c)("amtFeatures.features.sol")&&r||"IDER"===e&&s?(this.setState({checked:!0}),this.props.handleFeatureStatus("enabled")):this.props.handleFeatureStatus("notEnabled")},this.setAmtFeature=()=>{const{deviceId:e,feature:t,server:r,handleFeatureStatus:s}=this.props,{useKVM:a,useIDER:o,useSOL:i,checked:c}=this.state,l=c?Object(g.c)("amtFeatures.enabled"):Object(g.c)("amtFeatures.disabled");s("enabled");const h={feature:t,featureText:l};((e,t,r,s,a,o,i)=>{const c=JSON.stringify({apikey:"xxxxx",method:"SetAMTFeatures",payload:{guid:e,userConsent:t,enableKVM:r,enableSOL:s,enableIDER:a}});return n.a.post(`https://${o}/amt`,c,i,!0)})(e,"none",a,i,o,r,this.context.data.mpsKey).then(e=>{200===e.statuscode?this.setState({showMessage:!0,message:Object(g.b)("amtFeatures.messages.featureSuccess",h),type:Object(g.c)("amtFeatures.messageTypes.success")}):this.setState({showMessage:!0,checked:!c,message:Object(g.b)("amtFeatures.messages.updateFailed",h),type:Object(g.c)("amtFeatures.messageTypes.error")}),setTimeout(()=>{this.setState({showMessage:!1}),this.state.checked||this.props.handleFeatureStatus("notEnabled")},4e3)}).catch(e=>console.info("error",e))},this.handleCheckboxChange=e=>{switch(this.props.feature){case"KVM":this.setState({checked:e.target.checked,useKVM:e.target.checked},()=>this.setAmtFeature());break;case"SOL":this.setState({checked:e.target.checked,useSOL:e.target.checked},()=>this.setAmtFeature());break;case"IDER":this.setState({checked:e.target.checked,useIDER:e.target.checked},()=>this.setAmtFeature());break;default:this.setState({checked:e.target.checked})}},this.state={checked:!1,userConsent:"",useKVM:!1,useSOL:!1,useIDER:!1,showMessage:!1,message:"",type:""}}componentDidMount(){this.fetchAmtFeatures()}render(){const{feature:e}=this.props,{showMessage:t,message:r,type:a}=this.state;return s.createElement(s.Fragment,null,t&&s.createElement(m.a,{message:r,type:a}),s.createElement("label",null,s.createElement(f,{checked:this.state.checked,onChange:this.handleCheckboxChange,className:"checkbox-class",disableCheckbox:2===this.props.getConnectState()}),s.createElement("span",{className:"label-text "+(2===this.props.getConnectState()?"grey-label":"")},e," ",Object(g.c)("amtFeatures.enabled"))))}}b.contextType=S.b},,,,function(e,t){e.exports=require("md5")},,,,,,,,,function(e,t,r){var s=r(8),a=r(50);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var n={insert:"head",singleton:!1};s(a,n);e.exports=a.locals||{}},function(e,t,r){(t=r(9)(!1)).push([e.i,".label-text{margin-left:8px}.grey-label{opacity:.5}\n",""]),e.exports=t},,,,,,,,function(e,t){e.exports=require("xterm")},,,,function(e,t,r){"use strict";r.r(t),r.d(t,"Sol",(function(){return T}));var s=r(0),a=r.n(s);class n{constructor(){this.terminalEmulation=1,this.fxEmulation=0,this.fxLineBreak=0,this.AsciiToUnicode=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,171,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.AsciiToUnicodeIntel=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,174,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.StateChange=e=>{},this.TermSendKeys=e=>this.onSend(e)}}var o=r(11),i=r.n(o),c=r(23),l=r(31),h=r(12);class u{constructor(e){this.processData=e=>{null!=this.terminal.capture&&(this.terminal.capture+=e);let t="";for(let r=0;r<e.length;r++){let s=e.charCodeAt(r);"J"===e[r]?this.clearTerminal():t+=0!=(128&s)?String.fromCharCode(this.terminal.AsciiToUnicode[127&s]):e[r]}this.processDataToXterm(t)},this.terminal=e}}var d=r(33),p=r(58);const f=i.a.div`
   display:block;
   text-align:center;
`,m=i.a.div`
   display:inline-block;
`;class g extends a.a.Component{constructor(e){super(e)}componentDidMount(){const e=document.getElementById("xterm")||"";let{xterm:t,handleKeyPress:r}=this.props;e&&(t.open(e),t.onData(e=>r(e)),t.attachCustomKeyEventHandler(e=>(e.stopPropagation(),e.preventDefault(),e.ctrlKey&&e.shiftKey&&67===e.keyCode?navigator.clipboard.writeText(t.getSelection()):e.ctrlKey&&e.shiftKey&&86===e.keyCode?navigator.clipboard.readText().then(e=>r(e)):"Space"===e.code?r(e.key):void 0)))}render(){return a.a.createElement(f,null,a.a.createElement(m,{id:"xterm"}))}}var S=g,b=r(32),v=(r(85),r(86),r(22)),y=r(7),C=r(36),w=r(34),A=r(1),x=r(6),O=function(e,t,r,s){return new(r||(r=Promise))((function(a,n){function o(e){try{c(s.next(e))}catch(e){n(e)}}function i(e){try{c(s.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};const k=i.a.div`
	display : inline-block;
	padding : 0px 5px;
`,E=i.a.div`
	background-color: darkgray;
	padding: 5px;
	font-size: 13px;
	text-align: center;
`,R=i.a.label`
	font-size : 15px;
	margin-left: 30px;
`;class T extends a.a.Component{constructor(e){super(e),this.handleWriteToXterm=e=>this.term.write(e),this.handleClearTerminal=()=>this.term.reset(),this.handleKeyPress=e=>this.terminal.TermSendKeys(e),this.handleKeyDownPress=e=>this.terminal.handleKeyDownEvents(e),this.startSOL=()=>{void 0!==this.redirector&&this.redirector.start(WebSocket)},this.stopSOL=()=>{void 0!==this.redirector&&(this.redirector.stop(),this.handleClearTerminal(),document.location.reload())},this.handleSOLConnect=e=>{e.persist(),0===this.state.SOLstate?this.startSOL():this.stopSOL()},this.onTerminalStateChange=(e,t)=>this.setState({SOLstate:t}),this.handlePowerOptions=e=>O(this,void 0,void 0,(function*(){if(0===e.detail){const{mpsKey:t}=this.context.data,r=yield Object(v.b)(this.props.deviceId,e.target.value,this.props.mpsServer,t,!0);void 0!==r.Body&&"SUCCESS"===r.Body.ReturnValueStr?this.setState({showSuccess:!0,type:"success",message:"Power action was success.please wait till system boots up",isSelected:!this.state.isSelected}):this.setState({showSuccess:!0,type:"error",message:"Sorry! there was some technical difficulties",isSelected:!this.state.isSelected}),setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)}})),this.handleFeatureStatus=e=>{this.setState({solNotEnabled:e})},this.handlePowerStatus=e=>{this.setState({deviceOnSleep:e})},this.updatePowerStatus=()=>{this.setState({isPowerStateLoaded:!0})},this.getSOLState=()=>3===this.state.SOLstate?2:0,this.logger=new l.a(h.a.ERROR),this.state={isConnected:!1,SOLstate:0,powerState:0,showSuccess:!1,message:"",isSelected:!0,type:"",solNotEnabled:"",deviceOnSleep:"",isPowerStateLoaded:!1},this.term=new p.Terminal({cursorStyle:"block",fontWeight:"bold",rows:30,cols:100})}componentDidMount(){this.terminal=new n,this.redirector=new c.a(this.logger,c.b.SOL,new FileReader,this.props.deviceId,16994,"","",0,0,this.props.mpsServer+"/relay"),this.dataProcessor=new u(this.terminal),this.terminal.onSend=this.redirector.send.bind(this.redirector),this.redirector.onNewState=this.terminal.StateChange.bind(this.terminal),this.redirector.onStateChanged=this.onTerminalStateChange.bind(this),this.redirector.onProcessData=this.dataProcessor.processData.bind(this.dataProcessor),this.dataProcessor.processDataToXterm=this.handleWriteToXterm.bind(this),this.dataProcessor.clearTerminal=this.handleClearTerminal.bind(this)}render(){const{SOLstate:e,showSuccess:t,message:r,type:s,deviceOnSleep:n,solNotEnabled:o,isPowerStateLoaded:i}=this.state;return a.a.createElement(a.a.Fragment,null,"failed"===o&&"poweron"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.failedSolFetch"),type:"error"}):"","failed"===o&&"sleep"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.failedSolFetchAndNotPoweredUp"),type:"warning"}):"","failed"===o&&"failed"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.failedSolFetchAndFailedPowerFetch"),type:"error"}):"","notEnabled"===o&&"sleep"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.solNotEnabledAndNotPoweredUp"),type:"warning"}):"","notEnabled"===o&&"failed"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.solNotEnabledAndFailedPowerFetch"),type:"warning"}):"","enabled"===o&&"sleep"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.notPoweredUp"),type:"warning"}):"","enabled"===o&&"failed"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.failedPowerFetch"),type:"error"}):"","notEnabled"===o&&"poweron"===n?a.a.createElement(y.a,{message:Object(A.c)("amtFeatures.messages.solNotEnabled"),type:"warning"}):"",t&&a.a.createElement(y.a,{message:r,type:s}),a.a.createElement(E,null,a.a.createElement(k,null,a.a.createElement("button",{onClick:this.handleSOLConnect},3===e?"Disconnect":"Connect")),a.a.createElement(k,null,a.a.createElement(R,null,"Power Status :"),a.a.createElement(w.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,handlePowerStatus:this.handlePowerStatus,updateParent:this.updatePowerStatus})),a.a.createElement(k,null,a.a.createElement(R,null,"Power Actions:"," "),a.a.createElement(d.a,{availableOptions:b.a,onChange:this.handlePowerOptions,isSelected:this.state.isSelected})),a.a.createElement(k,null,a.a.createElement(R,null,i&&a.a.createElement(C.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,feature:"SOL",handleFeatureStatus:this.handleFeatureStatus,getConnectState:this.getSOLState})))),3===e&&a.a.createElement(S,{handleKeyPress:this.handleKeyPress,handleKeyDownPress:this.handleKeyDownPress,xterm:this.term}))}}T.contextType=x.b},,,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports=require("xterm/css/xterm.css")},function(e,t,r){var s=r(8),a=r(87);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var n={insert:"head",singleton:!1};s(a,n);e.exports=a.locals||{}},function(e,t,r){(t=r(9)(!1)).push([e.i,".sol-header{display:flex}.power-options{display:block;position:absolute;right:1%}\n",""]),e.exports=t}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,