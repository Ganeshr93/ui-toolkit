!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(s,n,function(t){return e[t]}.bind(null,n));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=66)}([function(e,t){e.exports=require("react")},function(e,t,r){"use strict";r.d(t,"a",(function(){return c})),r.d(t,"f",(function(){return l})),r.d(t,"i",(function(){return h})),r.d(t,"h",(function(){return u})),r.d(t,"j",(function(){return d})),r.d(t,"k",(function(){return p})),r.d(t,"b",(function(){return f})),r.d(t,"d",(function(){return m})),r.d(t,"g",(function(){return v})),r.d(t,"c",(function(){return y})),r.d(t,"l",(function(){return C})),r.d(t,"m",(function(){return w})),r.d(t,"e",(function(){return O}));var s=r(17),n=r.n(s),a=r(18),o=r.n(a);const i=e=>Array.isArray(e)?e.map(i):null!==e&&O("object"==typeof e)?Object.entries(e).reduce((e,[t,r])=>(e[o()(t)]=i(r),e),{}):e,c=(e,t)=>((e,t)=>Object.keys(t).reduce((r,s)=>n.a.copy(s,t[s],e,r),{}))(i(e),t),l=e=>"function"==typeof e,h=e=>e>=8&&e<=32,u=e=>new RegExp("^[a-zA-Z0-9$@$!%*#?&-_~^]+$").test(e),d=e=>new RegExp("^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9$@$!%*#?&-_~^]{8,32}$").test(e),p=e=>new RegExp("^(102[4-9]|10[3-9][0-9]|1[1-9][0-9]{2}|[2-9][0-9]{3}|[1-3][0-9]{4}|4[0-8][0-9]{3}|490[0-9]{2}|491[0-4][0-9]|4915[01])$").test(e),f=e=>!O(e)||new RegExp("[^a-zA-Z0-9._-]").test(e),m=(e,t)=>3===e?g(t):6===e?S(t):201===e?b(t):"",g=e=>new RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e),S=e=>new RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e),b=e=>/^(?=.{1,254}$)((?=[a-z0-9-]{1,63}\.)(xn--+)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}$/.test(e),v=(...e)=>e.filter(e=>!!O(e)).join(" ").trim(),y=e=>{const t={"#":"%23","%":"%25"};return e.replace(/#|%/g,e=>t[e])},C=(e,t)=>{const r={Accept:"application/json","Content-Type":"application/json"};return O(t)?r["X-MPS-API-Key"]=e:r["X-RPS-API-Key"]=e,r},w=e=>!!O(/(\.pfx)$/i.exec(e)),O=e=>null!=e&&""!==e&&!1!==e&&0!==e},function(e,t,r){"use strict";r.d(t,"a",(function(){return o})),r.d(t,"c",(function(){return i})),r.d(t,"b",(function(){return c}));var s=r(11),n=r.n(s),a=r(1);const o=e=>e.map(e=>{const t=Object.assign({},e.headerComponentParams),r=Object(a.e)(e.headerName)?n.a.t(e.headerName):void 0,s=Object(a.e)(e.headerTooltip)?n.a.t(e.headerTooltip):r;return t.description=Object(a.e)(e.headerComponentParams)&&Object(a.e)(e.headerComponentParams.description)?n.a.t(e.headerComponentParams.description):r,Object.assign(Object.assign({},e),{headerName:r,headerComponentParams:t,headerTooltip:s})}),i=e=>n.a.t(e),c=(e,t)=>n.a.t(e,{translate:t})},function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var s=r(5);class n{static ReadShort(e,t){return(e.charCodeAt(t)<<8)+e.charCodeAt(t+1)}static ReadShortX(e,t){return(e.charCodeAt(t+1)<<8)+e.charCodeAt(t)}static ReadInt(e,t){return 16777216*e.charCodeAt(t)+(e.charCodeAt(t+1)<<16)+(e.charCodeAt(t+2)<<8)+e.charCodeAt(t+3)}static ReadSInt(e,t){return(e.charCodeAt(t)<<24)+(e.charCodeAt(t+1)<<16)+(e.charCodeAt(t+2)<<8)+e.charCodeAt(t+3)}static ReadIntX(e,t){return 16777216*e.charCodeAt(t+3)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+1)<<8)+e.charCodeAt(t)}static ShortToStr(e){return String.fromCharCode(e>>8&255,255&e)}static ShortToStrX(e){return String.fromCharCode(255&e,e>>8&255)}static IntToStr(e){return String.fromCharCode(e>>24&255,e>>16&255,e>>8&255,255&e)}static IntToStrX(e){return String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)}static MakeToArray(e){return e&&null!=e&&"object"!=typeof e?[e]:e}static SplitArray(e){return e.split(",")}static Clone(e){return JSON.parse(JSON.stringify(e))}static EscapeHtml(e){return"string"==typeof e?e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof e||"number"==typeof e?e:void 0}static ArrayElementMove(e,t,r){e.splice(r,0,e.splice(t,1)[0])}static ObjectToStringEx(e,t){let r="";if(0!==e&&(!Object(s.a)(e)||null==e))return"(Null)";if(e instanceof Array)for(var n in e)r+="<br />"+this.gap(t)+"Item #"+n+": "+this.ObjectToStringEx(e[n],t+1);else if(e instanceof Object)for(var a in e)r+="<br />"+this.gap(t)+a+" = "+this.ObjectToStringEx(e[a],t+1);else r+=this.EscapeHtml(e);return r}static ObjectToStringEx2(e,t){let r="";if(0!==e&&(!Object(s.a)(e)||null==e))return"(Null)";if(e instanceof Array)for(var n in e)r+="\r\n"+this.gap2(t)+"Item #"+n+": "+this.ObjectToStringEx2(e[n],t+1);else if(e instanceof Object)for(var a in e)r+="\r\n"+this.gap2(t)+a+" = "+this.ObjectToStringEx2(e[a],t+1);else r+=this.EscapeHtml(e);return r}static gap(e){let t="";for(let r=0;r<4*e;r++)t+="&nbsp;";return t}static gap2(e){let t="";for(let r=0;r<4*e;r++)t+=" ";return t}static ObjectToString(e){return this.ObjectToStringEx(e,0)}static ObjectToString2(e){return this.ObjectToStringEx2(e,0)}static hex2rstr(e){if("string"!=typeof e||0===e.length)return"";let t="";const r=(""+e).match(/../g);let s;for(;s=r.shift();)t+=String.fromCharCode(Number("0x"+s));return t}static char2hex(e){return(e+256).toString(16).substr(-2).toUpperCase()}static rstr2hex(e){let t,r="";for(t=0;t<e.length;t++)r+=this.char2hex(e.charCodeAt(t));return r}static encode_utf8(e){return unescape(encodeURIComponent(e))}static decode_utf8(e){return decodeURIComponent(escape(e))}static data2blob(e){const t=new Array(e.length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return new Blob([new Uint8Array(t)])}static random(e){return Math.floor(Math.random()*e)}static trademarks(e){return e.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}}},,function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));const s=e=>null!=e&&""!==e&&!1!==e&&0!==e},function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var s=r(1),n=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};class a{static get(e,t,r={}){return n(this,void 0,void 0,(function*(){const n=Object(s.l)(t);return yield a.fetch(e,Object.assign(Object.assign({},r),{method:"GET",headers:n}))}))}static post(e,t={},r,o,i={}){return n(this,void 0,void 0,(function*(){const n=Object(s.l)(r,o);return Object(s.e)(o)?yield a.fetch(e,Object.assign(Object.assign({},i),{method:"POST",body:t,headers:n})):yield a.fetchRPS(e,Object.assign(Object.assign({},i),{method:"POST",body:t,headers:n}))}))}static delete(e,t,r={}){return n(this,void 0,void 0,(function*(){const n=Object(s.l)(t);return yield a.fetchRPS(e,Object.assign(Object.assign({},r),{method:"DELETE",headers:n}))}))}static patch(e,t={},r,o={}){return n(this,void 0,void 0,(function*(){const n=Object(s.l)(r);return yield a.fetchRPS(e,Object.assign(Object.assign({},o),{method:"PATCH",body:t,headers:n}))}))}static fetch(e,t={}){return n(this,void 0,void 0,(function*(){return yield fetch(e,t).then(e=>n(this,void 0,void 0,(function*(){return yield e.json()})))}))}static fetchRPS(e,t={}){return n(this,void 0,void 0,(function*(){return yield fetch(e,t).then(e=>n(this,void 0,void 0,(function*(){return yield e.text()})))}))}}},function(e,t,r){"use strict";r.d(t,"b",(function(){return a})),r.d(t,"c",(function(){return o})),r.d(t,"a",(function(){return i}));var s=r(0),n=r.n(s);const a=n.a.createContext({data:{}});class o extends n.a.Component{render(){return n.a.createElement(a.Provider,{value:{data:this.props.data}},this.props.children)}}const i=({children:e})=>n.a.createElement(a.Consumer,null,e)},function(e,t,r){"use strict";var s=r(0),n=r.n(s),a=r(12);const o=r.n(a).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:e})=>i(e)};
border: ${({type:e})=>"1px solid "+i(e)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,i=e=>"success"===e?"#4caf50":"warning"===e?"#ff9800":"error"===e?"#f44336":"#000000";t.a=({message:e,type:t})=>n.a.createElement(o,{type:t},e)},function(e,t,r){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function i(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function c(e,t){for(var r={},s=[],n=0;n<e.length;n++){var a=e[n],c=t.base?a[0]+t.base:a[0],l=r[c]||0,h="".concat(c," ").concat(l);r[c]=l+1;var u=i(h),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:h,updater:g(d,t),references:1}),s.push(h)}return s}function l(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var n=r.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,r,s){var n=r?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var a=document.createTextNode(n),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function p(e,t,r){var s=r.css,n=r.media,a=r.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),a&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var f=null,m=0;function g(e,t){var r,s,n;if(t.singleton){var a=m++;r=f||(f=l(t)),s=d.bind(null,r,a,!1),n=d.bind(null,r,a,!0)}else r=l(t),s=p.bind(null,r,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var r=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<r.length;s++){var n=i(r[s]);o[n].references--}for(var a=c(e,t),l=0;l<r.length;l++){var h=i(r[l]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}r=a}}}},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",s=e[3];if(!s)return r;if(t&&"function"==typeof btoa){var n=(o=s,i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(c," */")),a=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[r].concat(a).concat([n]).join("\n")}var o,i,c;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,s){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(s)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(n[o]=!0)}for(var i=0;i<e.length;i++){var c=[].concat(e[i]);s&&n[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),t.push(c))}},t}},function(e,t){e.exports=require("i18next")},function(e,t){e.exports=require("styled-components")},,,function(e,t,r){"use strict";var s;r.d(t,"a",(function(){return s})),function(e){e[e.VERBOSE=5]="VERBOSE",e[e.INFO=4]="INFO",e[e.DEBUG=3]="DEBUG",e[e.WARNING=2]="WARNING",e[e.ERROR=1]="ERROR"}(s||(s={}))},,function(e,t){e.exports=require("dot-object")},function(e,t){e.exports=require("camelcase")},,,,,,,,,function(e,t,r){"use strict";r.d(t,"b",(function(){return o})),r.d(t,"a",(function(){return i}));var s=r(1),n=r(6),a=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};const o=(e,t,r,o,i)=>a(void 0,void 0,void 0,(function*(){const a=JSON.stringify({apikey:"xxxxx",method:"PowerAction",payload:Object(s.e)(i)?{guid:e,action:t,useSOL:i}:{guid:e,action:t}}),c=null!=r?r:"";return yield n.a.post(`https://${c}/amt`,a,o,!0)})),i=(e,t,r)=>a(void 0,void 0,void 0,(function*(){const s=JSON.stringify({apikey:"xxxxx",method:"PowerState",payload:{guid:e}}),a=null!=t?t:"";return yield n.a.post(`https://${a}/amt`,s,r,!0)}))},function(e,t,r){"use strict";r.d(t,"b",(function(){return s})),r.d(t,"a",(function(){return c}));var s,n=r(3),a=r(47),o=r.n(a),i=r(5);!function(e){e[e.SOL=1]="SOL",e[e.KVM=2]="KVM",e[e.IDER=3]="IDER"}(s||(s={}));class c{constructor(e,t,r,s,n,a,o,i,c,l){this.fileReader=r,this.randomNonceChars="abcdef0123456789",this.host=s,this.port=n,this.user=a,this.pass=o,this.tls=i,this.tlsv1only=c,this.protocol=t,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=l,this.amtAccumulator="",this.authUri="",this.logger=e}getWsLocation(){return this.isBrowser()&&!Object(i.a)(this.server)?`${window.location.protocol.replace("http","ws")}//\n      ${window.location.host}\n      ${window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))}\n      /webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`:`wss://${String(this.server)}/webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`}isBrowser(){try{const e="undefined"!=typeof window;return e&&this.logger.debug("!!!!!BROWSER!!!!!"),e}catch(e){return!1}}start(e){this.connectState=0,this.socket=new e(this.getWsLocation()),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);const t=e=>{this.onSocketData(e.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))},r=e=>{this.onSocketData(e.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())};Object(i.a)(this.fileReader)&&Object(i.a)(this.fileReader.readAsBinaryString)?this.fileReader.onload=t.bind(this):Object(i.a)(this.fileReader)&&Object(i.a)(this.fileReader.readAsArrayBuffer)&&(this.fileReader.onloadend=r.bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){Object(i.a)(this.urlvars)&&Object(i.a)(this.urlvars.redirtrace)&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose(`Connected to websocket server. With protocol ${this.protocol} (2 = KVM)`),this.logger.info("Start Redirect Session for protocol. "+this.protocol),this.protocol===s.SOL&&this.socketSend(this.RedirectStartSol),this.protocol===s.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol===s.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(e){try{if(this.inDataCount++,"object"==typeof e.data){if(this.fileReaderInUse)return void this.fileReaderAcc.push(e.data);if(null!=this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([e.data]));else if(null!=this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(e.data);else{let t="";const r=new Uint8Array(e.data),s=r.byteLength;for(let e=0;e<s;e++)t+=String.fromCharCode(r[e]);this.onSocketData(t)}}else this.onSocketData(e.data)}catch(e){this.logger.error(e),this.stop(),this.onError()}}onSocketData(e){if(Object(i.a)(e)&&-1!==this.connectState){if("object"==typeof e){let t="";const r=new Uint8Array(e),s=r.byteLength;for(let e=0;e<s;e++)t+=String.fromCharCode(r[e]);e=t}else if("string"!=typeof e)return;if((this.protocol===s.KVM||this.protocol===s.IDER)&&1===this.connectState)return this.onProcessData(e);for(this.amtAccumulator+=e;this.amtAccumulator.length>=1;){let e=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose("Start Redirection Session reply received for  "+this.protocol),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:{if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;const t=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+t)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),e=13+t;break}default:this.stop()}break;case 20:{if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;const t=n.a.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+t)return;const r=this.amtAccumulator.charCodeAt(1),s=this.amtAccumulator.charCodeAt(4),a=[];for(let e=0;e<t;e++)a.push(this.amtAccumulator.charCodeAt(9+e));const o=this.amtAccumulator.substring(9,9+t);if(e=9+t,0===s)Object(i.a)(a.includes(4))?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+n.a.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):Object(i.a)(a.includes(3))?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+n.a.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):Object(i.a)(a.includes(1))?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+n.a.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!==s&&4!==s||1!==r)if(0===r){if(1===this.protocol){const e=1e4,t=100,r=0,s=1e4,a=100,o=0;this.socketSend(String.fromCharCode(32,0,0,0)+n.a.IntToStrX(this.amtSequence++)+n.a.ShortToStrX(e)+n.a.ShortToStrX(t)+n.a.ShortToStrX(r)+n.a.ShortToStrX(s)+n.a.ShortToStrX(a)+n.a.ShortToStrX(o)+n.a.IntToStrX(0))}2===this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3===this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let e=0;const t=o.charCodeAt(e),r=o.substring(e+1,e+1+t);e+=t+1;const a=o.charCodeAt(e),i=o.substring(e+1,e+1+a);e+=a+1;let c=0,l=null;const h=this.generateRandomNonce(32),u="00000002";let d="";4===s&&(c=o.charCodeAt(e),l=o.substring(e+1,e+1+c),e+=c+1,d=`${u}:${h}:${String(l)} :`);const p=this.hex_md5(this.hex_md5(this.user+":"+r+":"+this.pass)+":"+i+":"+d+this.hex_md5("POST:"+this.authUri));let f=this.user.length+r.length+i.length+this.authUri.length+h.length+u.length+p.length+7;4===s&&(f+=parseInt(l.length)+1);let m=String.fromCharCode(19,0,0,0,s)+n.a.IntToStrX(f)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(r.length)+r+String.fromCharCode(i.length)+i+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(h.length)+h+String.fromCharCode(u.length)+u+String.fromCharCode(p.length)+p;4===s&&(m+=String.fromCharCode(l.length)+l),this.socketSend(m)}break}case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),e=23,this.socketSend(String.fromCharCode(39,0,0,0)+n.a.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1===this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),e=10;break;case 42:{if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");const t=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<t)break;this.onProcessData(this.amtAccumulator.substring(10,t)),e=t;break}case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),e=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),e=this.amtAccumulator.length;break;default:return this.logger.error(`Unknown Intel AMT command:  ${this.amtAccumulator.charCodeAt(0)}  acclen=${this.amtAccumulator.length}`),void this.stop()}if(0===e)return;this.amtAccumulator=this.amtAccumulator.substring(e)}}}hex_md5(e){return this.logger.verbose("MD5 the string"),o()(e)}socketSend(e){Object(i.a)(this.urlvars)&&Object(i.a)(this.urlvars.redirtrace)&&this.logger.verbose(`REDIR-SEND(${e.length}): ${n.a.rstr2hex(e)}`);try{if(null!=this.socket&&1===this.socket.readyState){const t=new Uint8Array(e.length);this.logger.verbose(`Redir Send( ${e.length}): ${n.a.rstr2hex(e)}`);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r);this.socket.send(t.buffer)}}catch(e){this.logger.error("Socket send error: "+String(e))}}send(e){this.logger.verbose("Send called "+e),null!=this.socket&&1===this.connectState&&(this.protocol===s.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+n.a.IntToStrX(this.amtSequence++)+n.a.ShortToStrX(e.length)+e):this.socketSend(e))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+n.a.IntToStrX(this.amtSequence++))}generateRandomNonce(e){let t="";for(let r=0;r<e;r++)t+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return t}onSocketClosed(e){Object(i.a)(this.urlvars)&&Object(i.a)(this.urlvars.redirtrace)&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(e){console.info("onstatechange",e),this.state!==e&&(this.state=e,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}},,function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return n}));const s=[{value:"2",label:"Power Up"},{value:"101",label:"Reset To BIOS"},{value:"4",label:"Sleep"},{value:"5",label:"Power Cycle"},{value:"7",label:"Hibernate"},{value:"8",label:"Power Down"},{value:"10",label:"Reset"},{value:"12",label:"Soft-Off"},{value:"14",label:"Soft Reset"},{value:"100",label:"Power Up To BIOS"},{value:"400",label:"Reset To PXE"},{value:"401",label:"Power Up To PXE"}],n=e=>2===e?"Power Up":8===e?"Power Off":5===e?"Power Cycle":10===e?"Reset":12===e?"Soft Off":14===e?"Soft Reset":4===e?"Sleep":7===e?"Hibernate":100===e?"Power Up To BIOS":101===e?"Reset To BIOS":null},,,,function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var s=r(15);class n{constructor(e){this.minLevel=e}log(e,t){switch(e){case s.a.VERBOSE:this.verbose(t);break;case s.a.INFO:this.info(t);break;case s.a.DEBUG:this.debug(t);break;case s.a.WARNING:this.warn(t);break;case s.a.ERROR:this.error(t)}}debug(e){this.minLevel>=s.a.DEBUG&&console.debug(e)}info(e){this.minLevel>=s.a.INFO&&console.info(e)}error(e){this.minLevel>=s.a.ERROR&&console.error(e)}warn(e){this.minLevel>=s.a.WARNING&&console.warn(e)}verbose(e){this.minLevel>=s.a.VERBOSE&&console.log(e)}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var s=r(0),n=r.n(s);const a=e=>n.a.createElement("select",{onClick:e.onChange,name:"PowerOptions"},n.a.createElement("option",{value:"",selected:!e.isSelected},"Choose"),e.availableOptions.map(({value:e,label:t})=>n.a.createElement("option",{key:e,value:e},t)))},function(e,t,r){"use strict";r.d(t,"a",(function(){return c}));var s=r(0),n=r.n(s),a=r(27),o=r(7),i=r(1);class c extends n.a.Component{constructor(e){super(e),this.getAmtPowerState=()=>{Object(a.a)(this.props.deviceId,this.props.server,this.context.data.mpsKey).then(e=>{this.props.updateParent(),Object(i.e)(e.powerstate)?this.setState({powerState:e.powerstate}):this.setState({powerState:100}),2===e.powerstate?this.props.handlePowerStatus("poweron"):100!==this.state.powerState?this.props.handlePowerStatus("sleep"):this.props.handlePowerStatus("failed")}).catch(e=>{console.info("error",e)})},this.renderPowerState=e=>{switch(e){case 1:case 10:case 11:case 14:case 17:return n.a.createElement("span",{style:{color:"red"}},"Other");case 2:return n.a.createElement("span",{style:{color:"green"}},"Power on");case 3:case 4:return n.a.createElement("span",{style:{color:"red"}},"deep sleep");case 5:case 6:case 8:case 9:case 12:case 13:case 15:case 16:return n.a.createElement("span",{style:{color:"red"}},"Power Off");case 7:return n.a.createElement("span",{style:{color:"red"}},"Hibernate");default:return n.a.createElement("span",{style:{color:"red"}},"Unknown")}},this.state={powerState:0}}componentDidMount(){this.getAmtPowerState(),this.timeInterval=setInterval(()=>this.getAmtPowerState(),15e3)}componentWillUnmount(){clearInterval(this.timeInterval)}render(){const{powerState:e}=this.state;return this.renderPowerState(e)}}c.contextType=o.b},,function(e,t,r){"use strict";r.d(t,"a",(function(){return y}));var s=r(0),n=r.n(s),a=r(6),o=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};var i=r(12),c=r.n(i),l=r(1),h=function(e,t){var r={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(s=Object.getOwnPropertySymbols(e);n<s.length;n++)t.indexOf(s[n])<0&&Object.prototype.propertyIsEnumerable.call(e,s[n])&&(r[s[n]]=e[s[n]])}return r};const u=c.a.div`
  display: inline-block;
  vertical-align: middle;
`,d=c.a.svg`
  fill: none;
  stroke: green;
  stroke-width: 2px;
`,p=c.a.input.attrs({type:"checkbox"})`
  border: 0;
  clip: rect(0 0 0 0);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
`,f=c.a.div`
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: ${({disableCheckbox:e})=>m(e)};
  border-radius: 1px solid black;
  transition: all 150ms;

  ${p}:focus + & {
    box-shadow: 0 0 0 1px white;
  }

  ${d} {
    visibility: ${e=>Object(l.e)(e.checked)?"visible":"hidden"}
  }
`,m=e=>!0===e?"#ccc":"white",g=e=>{var{className:t,checked:r,disableCheckbox:s}=e,a=h(e,["className","checked","disableCheckbox"]);return n.a.createElement(u,{className:t},n.a.createElement(p,Object.assign({checked:r},a,{disabled:s})),n.a.createElement(f,{checked:r,disableCheckbox:s},n.a.createElement(d,{viewBox:"0 0 24 24"},n.a.createElement("polyline",{points:"20 6 9 17 4 12"}))))};var S=r(8),b=r(2),v=(r(49),r(7));class y extends s.Component{constructor(e){super(e),this.fetchAmtFeatures=()=>{const e=null!=this.props.server?this.props.server:"";((e,t,r)=>o(void 0,void 0,void 0,(function*(){const s=JSON.stringify({apikey:"xxxxx",method:"GetAMTFeatures",payload:{guid:e}});return yield a.a.post(`https://${t}/amt`,s,r,!0)})))(this.props.deviceId,e,this.context.data.mpsKey).then(e=>{200===e.statuscode?this.setState({userConsent:e.payload.userConsent,useKVM:e.payload.KVM,useSOL:e.payload.SOL,useIDER:e.payload.IDER,redirection:e.payload.redirection},()=>this.updateCheckboxStatus()):this.props.handleFeatureStatus("failed")}).catch(()=>console.info("error"))},this.updateCheckboxStatus=()=>{const{feature:e}=this.props,{useKVM:t,useSOL:r,useIDER:s,redirection:n}=this.state;n&&(e===Object(b.c)("amtFeatures.features.kvm")&&t||e===Object(b.c)("amtFeatures.features.sol")&&r||"IDER"===e&&s)?(this.setState({checked:!0}),this.props.handleFeatureStatus("enabled")):this.props.handleFeatureStatus("notEnabled")},this.setAmtFeature=()=>{const{deviceId:e,feature:t,server:r,handleFeatureStatus:s}=this.props,{useKVM:n,useIDER:i,useSOL:c,checked:l}=this.state,h=l?Object(b.c)("amtFeatures.enabled"):Object(b.c)("amtFeatures.disabled"),u=null!=r?r:"";s("enabled");const d={feature:t,featureText:h};((e,t,r,s,n,i,c)=>o(void 0,void 0,void 0,(function*(){const o=JSON.stringify({apikey:"xxxxx",method:"SetAMTFeatures",payload:{guid:e,userConsent:t,enableKVM:r,enableSOL:s,enableIDER:n}});return yield a.a.post(`https://${i}/amt`,o,c,!0)})))(e,"none",n,c,i,u,this.context.data.mpsKey).then(e=>{200===e.statuscode?this.setState({showMessage:!0,message:Object(b.b)("amtFeatures.messages.featureSuccess",d),type:Object(b.c)("amtFeatures.messageTypes.success")}):this.setState({showMessage:!0,checked:!l,message:Object(b.b)("amtFeatures.messages.updateFailed",d),type:Object(b.c)("amtFeatures.messageTypes.error")}),setTimeout(()=>{this.setState({showMessage:!1}),this.state.checked||this.props.handleFeatureStatus("notEnabled")},4e3)}).catch(e=>console.info("error",e))},this.handleCheckboxChange=e=>{switch(this.props.feature){case"KVM":this.setState({checked:e.target.checked,useKVM:e.target.checked},()=>this.setAmtFeature());break;case"SOL":this.setState({checked:e.target.checked,useSOL:e.target.checked},()=>this.setAmtFeature());break;case"IDER":this.setState({checked:e.target.checked,useIDER:e.target.checked},()=>this.setAmtFeature());break;default:this.setState({checked:e.target.checked})}},this.state={checked:!1,userConsent:"",useKVM:!1,useSOL:!1,useIDER:!1,redirection:!1,showMessage:!1,message:"",type:""}}componentDidMount(){this.fetchAmtFeatures()}render(){const{feature:e}=this.props,{showMessage:t,message:r,type:n}=this.state;return s.createElement(s.Fragment,null,t&&s.createElement(S.a,{message:r,type:n}),s.createElement("label",null,s.createElement(g,{checked:this.state.checked,onChange:this.handleCheckboxChange,className:"checkbox-class",disableCheckbox:2===this.props.getConnectState()}),s.createElement("span",{className:"label-text "+(2===this.props.getConnectState()?"grey-label":"")},e," ",Object(b.c)("amtFeatures.enabled"))))}}y.contextType=v.b},,,,,,,,,function(e,t){e.exports=require("md5")},,function(e,t,r){var s=r(9),n=r(50);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var a={insert:"head",singleton:!1};s(n,a);e.exports=n.locals||{}},function(e,t,r){(t=r(10)(!1)).push([e.i,".label-text{margin-left:8px}.grey-label{opacity:.5}",""]),e.exports=t},,,,,,,,,,function(e,t){e.exports=require("xterm")},,,,,,function(e,t,r){"use strict";r.r(t),r.d(t,"Sol",(function(){return T}));var s=r(0),n=r.n(s);class a{constructor(){this.terminalEmulation=1,this.fxEmulation=0,this.fxLineBreak=0,this.AsciiToUnicode=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,171,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.AsciiToUnicodeIntel=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,174,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.StateChange=e=>{},this.TermSendKeys=e=>this.onSend(e)}}var o=r(12),i=r.n(o),c=r(28),l=r(34),h=r(15);class u{constructor(e){this.processData=e=>{null!=this.terminal.capture&&(this.terminal.capture+=e);let t="";for(let r=0;r<e.length;r++){const s=e.charCodeAt(r);"J"===e[r]?this.clearTerminal():t+=0!=(128&s)?String.fromCharCode(this.terminal.AsciiToUnicode[127&s]):""+e[r]}this.processDataToXterm(t)},this.terminal=e}}var d=r(35),p=r(60),f=r(1);const m=i.a.div`
   display:block;
   text-align:center;
`,g=i.a.div`
   display:inline-block;
`;class S extends n.a.Component{componentDidMount(){var e;const t=null!==(e=document.getElementById("xterm"))&&void 0!==e?e:"",{xterm:r,handleKeyPress:s}=this.props;Object(f.e)(t)&&(r.open(t),r.onData(e=>s(e)),r.attachCustomKeyEventHandler(e=>(e.stopPropagation(),e.preventDefault(),Object(f.e)(e.ctrlKey)&&Object(f.e)(e.shiftKey)&&67===e.keyCode?navigator.clipboard.writeText(r.getSelection()):Object(f.e)(e.ctrlKey)&&Object(f.e)(e.shiftKey)&&86===e.keyCode?navigator.clipboard.readText().then(e=>s(e)):"Space"===e.code?s(e.key):void 0)))}render(){return n.a.createElement(m,null,n.a.createElement(g,{id:"xterm"}))}}var b=S,v=r(30),y=(r(88),r(89),r(27)),C=r(8),w=r(38),O=r(36),A=r(2),x=r(7),E=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};const k=i.a.div`
display : inline-block;
padding : 0px 5px;
`,R=i.a.div`
background-color: darkgray;
padding: 5px;
font-size: 13px;
text-align: center;
`,j=i.a.label`
font-size : 15px;
margin-left: 30px;
`;class T extends n.a.Component{constructor(e){super(e),this.init=()=>{const e=null!=this.props.mpsServer?this.props.mpsServer:"",t=null!=this.props.deviceId?this.props.deviceId:"";this.terminal=new a,this.redirector=new c.a(this.logger,c.b.SOL,new FileReader,t,16994,"","",0,0,e+"/relay"),this.dataProcessor=new u(this.terminal),this.terminal.onSend=this.redirector.send.bind(this.redirector),this.redirector.onNewState=this.terminal.StateChange.bind(this.terminal),this.redirector.onStateChanged=this.onTerminalStateChange.bind(this),this.redirector.onProcessData=this.dataProcessor.processData.bind(this.dataProcessor),this.dataProcessor.processDataToXterm=this.handleWriteToXterm.bind(this),this.dataProcessor.clearTerminal=this.handleClearTerminal.bind(this),this.term=new p.Terminal({cursorStyle:"block",fontWeight:"bold",rows:30,cols:100})},this.cleanUp=()=>{this.terminal=null,this.redirector=null,this.dataProcessor=null,this.term=null},this.handleWriteToXterm=e=>this.term.write(e),this.handleClearTerminal=()=>this.term.reset(),this.handleKeyPress=e=>this.terminal.TermSendKeys(e),this.handleKeyDownPress=e=>this.terminal.handleKeyDownEvents(e),this.startSOL=()=>{void 0!==this.redirector&&this.redirector.start(WebSocket)},this.stopSOL=()=>{void 0!==this.redirector&&this.redirector.stop(),this.handleClearTerminal(),this.cleanUp(),this.init()},this.handleSOLConnect=e=>{e.persist(),0===this.state.SOLstate?this.startSOL():this.stopSOL()},this.onTerminalStateChange=(e,t)=>this.setState({SOLstate:t}),this.handlePowerOptions=e=>E(this,void 0,void 0,(function*(){if(0===e.detail){const{mpsKey:t}=this.context.data,r=Object(v.b)(parseInt(e.target.value));3!==this.state.SOLstate||"8"!==e.target.value&&"5"!==e.target.value?Object(y.b)(this.props.deviceId,e.target.value,this.props.mpsServer,t,!0).then(e=>{const t=e.Body;void 0!==t&&"SUCCESS"===t.ReturnValueStr?this.setState({showSuccess:!0,type:"success",message:r+" success",isSelected:!this.state.isSelected}):this.setState({showSuccess:!0,type:"error",message:void 0!==t&&0!==t.ReturnValue?`${r} ${String(t.ReturnValueStr)}`:e.errorDescription||"Sorry! there was some technical difficulties",isSelected:!this.state.isSelected}),setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)}).catch(e=>{console.log(e),this.setState({showSuccess:!0,type:"error",message:Object(f.e)(e.ajaxError.response)&&String(e.ajaxError.response.error)||"Power Action Failed",isSelected:!this.state.isSelected}),setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)}):this.setState({showSuccess:!0,type:"warning",message:r+" not allowed while termina1 is connected",isSelected:!this.state.isSelected})}})),this.handleFeatureStatus=e=>{this.setState({solNotEnabled:e})},this.handlePowerStatus=e=>{this.setState({deviceOnSleep:e})},this.updatePowerStatus=()=>{this.setState({isPowerStateLoaded:!0})},this.getSOLState=()=>3===this.state.SOLstate?2:0,this.logger=new l.a(h.a.ERROR),this.state={isConnected:!1,SOLstate:0,powerState:0,showSuccess:!1,message:"",isSelected:!0,type:"",solNotEnabled:"",deviceOnSleep:"",isPowerStateLoaded:!1}}componentDidMount(){this.init()}render(){const{SOLstate:e,showSuccess:t,message:r,type:s,deviceOnSleep:a,solNotEnabled:o,isPowerStateLoaded:i}=this.state;return n.a.createElement(n.a.Fragment,null,"failed"===o&&"poweron"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.failedSolFetch"),type:"error"}):"","failed"===o&&"sleep"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.failedSolFetchAndNotPoweredUp"),type:"warning"}):"","failed"===o&&"failed"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.failedSolFetchAndFailedPowerFetch"),type:"error"}):"","notEnabled"===o&&"sleep"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.solNotEnabledAndNotPoweredUp"),type:"warning"}):"","notEnabled"===o&&"failed"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.solNotEnabledAndFailedPowerFetch"),type:"warning"}):"","enabled"===o&&"sleep"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.notPoweredUp"),type:"warning"}):"","enabled"===o&&"failed"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.failedPowerFetch"),type:"error"}):"","notEnabled"===o&&"poweron"===a?n.a.createElement(C.a,{message:Object(A.c)("amtFeatures.messages.solNotEnabled"),type:"warning"}):"",t&&n.a.createElement(C.a,{message:r,type:s}),n.a.createElement(R,null,n.a.createElement(k,null,n.a.createElement(j,null,i&&n.a.createElement(w.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,feature:"SOL",handleFeatureStatus:this.handleFeatureStatus,getConnectState:this.getSOLState}))),n.a.createElement(k,null,n.a.createElement("button",{onClick:this.handleSOLConnect},3===e?"Disconnect":"Connect")),n.a.createElement(k,null,n.a.createElement(j,null,"Power Status :"),n.a.createElement(O.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,handlePowerStatus:this.handlePowerStatus,updateParent:this.updatePowerStatus})),n.a.createElement(k,null,n.a.createElement(j,null,"Power Actions:"," "),n.a.createElement(d.a,{availableOptions:v.a,onChange:this.handlePowerOptions,isSelected:this.state.isSelected}))),3===e&&this.term&&n.a.createElement(b,{handleKeyPress:this.handleKeyPress,handleKeyDownPress:this.handleKeyDownPress,xterm:this.term}))}}T.contextType=x.b},,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports=require("xterm/css/xterm.css")},function(e,t,r){var s=r(9),n=r(90);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var a={insert:"head",singleton:!1};s(n,a);e.exports=n.locals||{}},function(e,t,r){(t=r(10)(!1)).push([e.i,".sol-header{display:flex}.power-options{display:block;position:absolute;right:1%}",""]),e.exports=t}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9VdGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvTWV0aG9kcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9Db252ZXJ0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2VydmljZXMvSHR0cENsaWVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9jb250ZXh0L0Jhc2ljQ29udGV4dFByb3ZpZGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9TbmFja0Jhci50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiaTE4bmV4dFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcInN0eWxlZC1jb21wb25lbnRzXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvSUxvZ2dlci50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJkb3Qtb2JqZWN0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY2FtZWxjYXNlXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zZXJ2aWNlcy9Qb3dlckFjdGlvblNlcnZpY2VzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0FNVFJlZGlyZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvUG93ZXJBY3Rpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0NvbnNvbGVMb2dnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvUG93ZXJPcHRpb25zLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9Qb3dlclN0YXRlLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9DaGVja2JveC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvQW10RmVhdHVyZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2VydmljZXMvQW10RmVhdHVyZXNTZXJ2aWNlcy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtZDVcIiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9hbXRmZWF0dXJlcy5zY3NzPzVhMzUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvYW10ZmVhdHVyZXMuc2NzcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ4dGVybVwiIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0FNVFRlcm1pbmFsLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1Rlcm1pbmFsRGF0YVByb2Nlc3Nvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL1NlcmlhbE92ZXJMQU4vVGVybWluYWwudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvU2VyaWFsT3ZlckxBTi9Tb2wudHN4Iiwid2VicGFjazovLy9leHRlcm5hbCBcInh0ZXJtL2Nzcy94dGVybS5jc3NcIiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL1NlcmlhbE92ZXJMQU4vc29sLnNjc3M/OWI5MiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL1NlcmlhbE92ZXJMQU4vc29sLnNjc3MiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwiY2FtZWxDYXNlS2V5cyIsImRhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJpc0ZhbHN5IiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsImNhbWVsQ2FzZVJlc2hhcGUiLCJyZXNwb25zZSIsIm1vZGVsIiwia2V5cyIsImNvcHkiLCJyZXNoYXBlIiwiaXNGdW5jIiwicGFzc3dvcmRMZW5ndGhWYWxpZGF0aW9uIiwibGVuZ3RoIiwibmFtZVZhbGlkYXRpb24iLCJSZWdFeHAiLCJ0ZXN0IiwicGFzc3dvcmRWYWxpZGF0aW9uIiwicG9ydFZhbGlkYXRpb24iLCJjb21tb25OYW1lVmFsaWRhdGlvbiIsImlwQWRkcmVzc1ZhbGlkYXRpb24iLCJpcFR5cGUiLCJpcHY0IiwiaXB2NiIsImZxZG4iLCJqb2luQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJmaWx0ZXIiLCJqb2luIiwidHJpbSIsImVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzIiwiY29uZmlnTmFtZSIsInJlcGxhY2VDaGFycyIsInJlcGxhY2UiLCJtYXRjaCIsInByZXBhcmVIZWFkZXJzIiwiYXBpS2V5IiwiaXNNcHNDb250cm9sIiwiaGVhZGVycyIsIkFjY2VwdCIsInZhbGlkYXRlRmlsZUV4dGVuc2lvbnMiLCJmaWxlUGF0aCIsImV4ZWMiLCJ0cmFuc2xhdGVDb2x1bW5EZWZzIiwiY29sdW1uRGVmcyIsImNvbHVtbkRlZiIsImhlYWRlckNvbXBvbmVudFBhcmFtcyIsImFzc2lnbiIsImhlYWRlck5hbWUiLCJ1bmRlZmluZWQiLCJoZWFkZXJUb29sdGlwIiwiZGVzY3JpcHRpb24iLCJ0cmFuc2xhdGVUZXh0IiwidGV4dCIsInRyYW5zbGF0ZUR5bmFtaWNUZXh0IiwidHJhbnNsYXRlIiwiVHlwZUNvbnZlcnRlciIsInYiLCJjaGFyQ29kZUF0IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic3BsaXQiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ4IiwiYXJyIiwiZnJvbSIsInRvIiwic3BsaWNlIiwidGhpcyIsImdhcCIsIk9iamVjdFRvU3RyaW5nRXgiLCJqIiwiRXNjYXBlSHRtbCIsImdhcDIiLCJPYmplY3RUb1N0cmluZ0V4MiIsInNoaWZ0IiwiTnVtYmVyIiwidG9TdHJpbmciLCJzdWJzdHIiLCJ0b1VwcGVyQ2FzZSIsImlucHV0IiwiY2hhcjJoZXgiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsImJ5dGVzIiwiQmxvYiIsIlVpbnQ4QXJyYXkiLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpc1RydXRoeSIsIkh0dHBDbGllbnQiLCJ1cmwiLCJvcHRpb25zIiwianNvbkhlYWRlcnMiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJpc01wcyIsImZldGNoUlBTIiwidGhlbiIsInJlc3VsdCIsImpzb24iLCJEb21haW5Db250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIlByb3ZpZGVyIiwiQ29tcG9uZW50IiwicHJvcHMiLCJjaGlsZHJlbiIsIkNvbnN1bWVyIiwiU3R5bGVkQmFyIiwiZGl2IiwidHlwZSIsImdldENvbG9ycyIsIm1lc3NhZ2UiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJsaXN0IiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwiYmFzZTY0Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiTG9nTGV2ZWwiLCJwb3dlckFjdGlvbnMiLCJndWlkIiwiYWN0aW9uIiwibXBzU2VydmVyIiwidXNlU09MIiwiYXBpa2V5IiwicGF5bG9hZCIsInNlcnZlciIsInBvc3QiLCJnZXRQb3dlclN0YXRlIiwiUHJvdG9jb2wiLCJBTVRSZWRpcmVjdG9yIiwibG9nZ2VyIiwicHJvdG9jb2wiLCJmciIsImhvc3QiLCJwb3J0IiwidXNlciIsInBhc3MiLCJ0bHMiLCJ0bHMxb25seSIsImZpbGVSZWFkZXIiLCJyYW5kb21Ob25jZUNoYXJzIiwidGxzdjFvbmx5IiwiUmVkaXJlY3RTdGFydFNvbCIsIlJlZGlyZWN0U3RhcnRLdm0iLCJSZWRpcmVjdFN0YXJ0SWRlciIsInVybHZhcnMiLCJhbXRBY2N1bXVsYXRvciIsImF1dGhVcmkiLCJpc0Jyb3dzZXIiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpc1dlYiIsImRlYnVnIiwiY29ubmVjdFN0YXRlIiwic29ja2V0IiwiZ2V0V3NMb2NhdGlvbiIsIm9ub3BlbiIsIm9uU29ja2V0Q29ubmVjdGVkIiwib25tZXNzYWdlIiwib25NZXNzYWdlIiwib25jbG9zZSIsIm9uU29ja2V0Q2xvc2VkIiwib25sb2FkIiwib25Tb2NrZXREYXRhIiwiZmlsZVJlYWRlckFjYyIsImZpbGVSZWFkZXJJblVzZSIsInJlYWRBc0JpbmFyeVN0cmluZyIsIm9ubG9hZGVuZCIsInJlYWRBc0FycmF5QnVmZmVyIiwidmVyYm9zZSIsIm9uU3RhdGVDaGFuZ2UiLCJyZWRpcnRyYWNlIiwiY29uc29sZSIsImxvZyIsImluZm8iLCJTT0wiLCJzb2NrZXRTZW5kIiwiS1ZNIiwiSURFUiIsImluRGF0YUNvdW50IiwiYmluYXJ5IiwiYnl0ZUxlbmd0aCIsImVycm9yIiwic3RvcCIsIm9uRXJyb3IiLCJvblByb2Nlc3NEYXRhIiwiY21kc2l6ZSIsIm9lbWxlbiIsImF1dGhEYXRhTGVuIiwiUmVhZEludFgiLCJzdGF0dXMiLCJhdXRoVHlwZSIsImF1dGhEYXRhIiwiYXV0aERhdGFCdWYiLCJpbmNsdWRlcyIsIkludFRvU3RyWCIsIndhcm4iLCJNYXhUeEJ1ZmZlciIsIlR4VGltZW91dCIsIlR4T3ZlcmZsb3dUaW1lb3V0IiwiUnhUaW1lb3V0IiwiUnhGbHVzaFRpbWVvdXQiLCJIZWFydGJlYXQiLCJhbXRTZXF1ZW5jZSIsIlNob3J0VG9TdHJYIiwiY3VycHRyIiwicmVhbG1sZW4iLCJyZWFsbSIsIm5vbmNlbGVuIiwicW9wbGVuIiwicW9wIiwiY25vbmNlIiwiZ2VuZXJhdGVSYW5kb21Ob25jZSIsInNuYyIsImV4dHJhIiwiZGlnZXN0IiwiaGV4X21kNSIsInRvdGFsbGVuIiwicGFyc2VJbnQiLCJidWYiLCJhbXRLZWVwQWxpdmVUaW1lciIsInNldEludGVydmFsIiwic2VuZEFtdEtlZXBBbGl2ZSIsImNzIiwib25TdGFydCIsInN0ciIsInJzdHIyaGV4IiwicmVhZHlTdGF0ZSIsImIiLCJzZW5kIiwiYnVmZmVyIiwiY2hhckF0IiwibmV3c3RhdGUiLCJzdGF0ZSIsIm9uTmV3U3RhdGUiLCJvblN0YXRlQ2hhbmdlZCIsImNsb3NlIiwiY2xlYXJJbnRlcnZhbCIsImF2YWlsYWJsZVBvd2VyQWN0aW9ucyIsImxhYmVsIiwiZ2V0QWN0aW9uQnlJZCIsIkNvbnNvbGVMb2dnZXIiLCJsZXZlbCIsIm1pbkxldmVsIiwiVkVSQk9TRSIsIklORk8iLCJERUJVRyIsIldBUk5JTkciLCJFUlJPUiIsIlBvd2VyT3B0aW9ucyIsIm9uQ2xpY2siLCJvbkNoYW5nZSIsInNlbGVjdGVkIiwiaXNTZWxlY3RlZCIsImF2YWlsYWJsZU9wdGlvbnMiLCJQb3dlclN0YXRlIiwic3VwZXIiLCJnZXRBbXRQb3dlclN0YXRlIiwiZGV2aWNlSWQiLCJjb250ZXh0IiwibXBzS2V5IiwidXBkYXRlUGFyZW50IiwicG93ZXJzdGF0ZSIsInNldFN0YXRlIiwicG93ZXJTdGF0ZSIsImhhbmRsZVBvd2VyU3RhdHVzIiwiY2F0Y2giLCJyZW5kZXJQb3dlclN0YXRlIiwicGFyYW0iLCJjb2xvciIsInRpbWVJbnRlcnZhbCIsImNvbnRleHRUeXBlIiwiQ2hlY2tib3hDb250YWluZXIiLCJJY29uIiwic3ZnIiwiSGlkZGVuQ2hlY2tib3giLCJhdHRycyIsIlN0eWxlZENoZWNrYm94IiwiZGlzYWJsZUNoZWNrYm94IiwiZ2V0Q29sb3IiLCJjaGVja2VkIiwiQ2hlY2tib3giLCJjbGFzc05hbWUiLCJkaXNhYmxlZCIsInZpZXdCb3giLCJwb2ludHMiLCJmZXRjaEFtdEZlYXR1cmVzIiwiZ2V0QW10RmVhdHVyZXMiLCJzdGF0dXNjb2RlIiwidXNlckNvbnNlbnQiLCJ1c2VLVk0iLCJ1c2VJREVSIiwicmVkaXJlY3Rpb24iLCJ1cGRhdGVDaGVja2JveFN0YXR1cyIsImhhbmRsZUZlYXR1cmVTdGF0dXMiLCJmZWF0dXJlIiwic2V0QW10RmVhdHVyZSIsImZlYXR1cmVTdGF0dXNUZXh0IiwiZmVhdHVyZVRleHQiLCJlbmFibGVLVk0iLCJlbmFibGVTT0wiLCJlbmFibGVJREVSIiwic2V0QW10RmVhdHVyZXMiLCJzaG93TWVzc2FnZSIsInNldFRpbWVvdXQiLCJoYW5kbGVDaGVja2JveENoYW5nZSIsImV2ZW50IiwiU25hY2tCYXIiLCJnZXRDb25uZWN0U3RhdGUiLCJhcGkiLCJkZWZhdWx0IiwibG9jYWxzIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwiQW10VGVybWluYWwiLCJ0ZXJtaW5hbEVtdWxhdGlvbiIsImZ4RW11bGF0aW9uIiwiZnhMaW5lQnJlYWsiLCJBc2NpaVRvVW5pY29kZSIsIkFzY2lpVG9Vbmljb2RlSW50ZWwiLCJTdGF0ZUNoYW5nZSIsIm5ld1N0YXRlIiwiVGVybVNlbmRLZXlzIiwib25TZW5kIiwiVGVybWluYWxEYXRhUHJvY2Vzc29yIiwidGVybWluYWwiLCJwcm9jZXNzRGF0YSIsImNhcHR1cmUiLCJjaCIsImNsZWFyVGVybWluYWwiLCJwcm9jZXNzRGF0YVRvWHRlcm0iLCJUZXJtaW5hbENvbnRhaW5lciIsIlhUZXJtIiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwieHRlcm0iLCJoYW5kbGVLZXlQcmVzcyIsIm9wZW4iLCJvbkRhdGEiLCJhdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImN0cmxLZXkiLCJzaGlmdEtleSIsImtleUNvZGUiLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJnZXRTZWxlY3Rpb24iLCJyZWFkVGV4dCIsImNvZGUiLCJTdHlsZWREaXYiLCJIZWFkZXJTdHJpcCIsIlN0eWxlZExhYmVsIiwiaW5pdCIsImRldmljZVV1aWQiLCJyZWRpcmVjdG9yIiwiRmlsZVJlYWRlciIsImRhdGFQcm9jZXNzb3IiLCJvblRlcm1pbmFsU3RhdGVDaGFuZ2UiLCJoYW5kbGVXcml0ZVRvWHRlcm0iLCJoYW5kbGVDbGVhclRlcm1pbmFsIiwidGVybSIsImN1cnNvclN0eWxlIiwiZm9udFdlaWdodCIsInJvd3MiLCJjb2xzIiwiY2xlYW5VcCIsIndyaXRlIiwicmVzZXQiLCJkb21FdmVudCIsImhhbmRsZUtleURvd25QcmVzcyIsImhhbmRsZUtleURvd25FdmVudHMiLCJzdGFydFNPTCIsInN0YXJ0IiwiV2ViU29ja2V0Iiwic3RvcFNPTCIsImhhbmRsZVNPTENvbm5lY3QiLCJwZXJzaXN0IiwiU09Mc3RhdGUiLCJoYW5kbGVQb3dlck9wdGlvbnMiLCJkZXRhaWwiLCJwb3dlckFjdGlvbiIsInJlc0JvZHkiLCJCb2R5IiwiUmV0dXJuVmFsdWVTdHIiLCJzaG93U3VjY2VzcyIsIlJldHVyblZhbHVlIiwiZXJyb3JEZXNjcmlwdGlvbiIsImFqYXhFcnJvciIsInNvbE5vdEVuYWJsZWQiLCJkZXZpY2VPblNsZWVwIiwidXBkYXRlUG93ZXJTdGF0dXMiLCJpc1Bvd2VyU3RhdGVMb2FkZWQiLCJnZXRTT0xTdGF0ZSIsImlzQ29ubmVjdGVkIiwiRnJhZ21lbnQiLCJBbXRGZWF0dXJlcyJdLCJtYXBwaW5ncyI6IjZEQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQTBEZixPQXJEQUYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0Is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QSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLElBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLElBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLEtBR0YsS0FBQUMsb0JBQXNCLENBQ3BCLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEtBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxJQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLElBQ0EsS0FDQSxJQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsS0FHRixLQUFBQyxZQUFlQyxNQUdmLEtBQUFDLGFBQWdCclosR0FBYzhELEtBQUt3VixPQUFPdFosSSw2Q0M1UXJDLE1BQU11WixFQUVYLFlBQWFDLEdBUWIsS0FBQUMsWUFBZXBHLElBQ2dCLE1BQXpCdlAsS0FBSzBWLFNBQVNFLFVBQWlCNVYsS0FBSzBWLFNBQVNFLFNBQVdyRyxHQUM1RCxJQUFJN1YsRUFBWSxHQUNoQixJQUFLLElBQUlMLEVBQUksRUFBR0EsRUFBSWtXLEVBQUloVCxPQUFRbEQsSUFBSyxDQUNuQyxNQUFNd2MsRUFBS3RHLEVBQUluUSxXQUFXL0YsR0FDWCxNQUFYa1csRUFBSWxXLEdBQ04yRyxLQUFLOFYsZ0JBRUxwYyxHQUR5QixJQUFWLElBQUxtYyxHQUNMeFcsT0FBT0MsYUFBYVUsS0FBSzBWLFNBQVNQLGVBQW9CLElBQUxVLElBRWpELEdBQUd0RyxFQUFJbFcsR0FHaEIyRyxLQUFLK1YsbUJBQW1CcmMsSUFwQnhCc0csS0FBSzBWLFNBQVdBLEcsMkJDRnBCLE1BQU1NLEVBQW9CLElBQU1sVCxHQUFHOzs7RUFJN0JtVCxFQUFRLElBQU1uVCxHQUFHOztFQVV2QixNQUFNLFVBQWEsSUFBTUwsVUFDdkIsb0IsTUFDRSxNQUFNeVQsRUFBMEMsUUFBbkMsRUFBRzVTLFNBQVM2UyxlQUFlLGdCQUFRLFFBQUksSUFDOUMsTUFBRUMsRUFBSyxlQUFFQyxHQUFtQnJXLEtBQUswQyxNQUNuQyxZQUFRd1QsS0FDVkUsRUFBTUUsS0FBS0osR0FDWEUsRUFBTUcsT0FBT2hiLEdBQVE4YSxFQUFlOWEsSUFDcEM2YSxFQUFNSSw0QkFBNEJ4UyxJQUNoQ0EsRUFBRXlTLGtCQUNGelMsRUFBRTBTLGlCQUNFLFlBQVExUyxFQUFFMlMsVUFBWSxZQUFRM1MsRUFBRTRTLFdBQTRCLEtBQWQ1UyxFQUFFNlMsUUFDM0NDLFVBQVVDLFVBQVVDLFVBQVVaLEVBQU1hLGdCQUNsQyxZQUFRalQsRUFBRTJTLFVBQVksWUFBUTNTLEVBQUU0UyxXQUE0QixLQUFkNVMsRUFBRTZTLFFBQ2xEQyxVQUFVQyxVQUFVRyxXQUN4Qi9VLEtBQUtwRCxHQUFRc1gsRUFBZXRYLElBRVgsVUFBWGlGLEVBQUVtVCxLQUNKZCxFQUFlclMsRUFBRXBKLFVBRG5CLEtBT2IsU0FDRSxPQUNFLGtCQUFDb2IsRUFBaUIsS0FDaEIsa0JBQUNDLEVBQUssQ0FBQ3hSLEdBQUcsWUFNSCxRLHlXQzdCZixNQUFNMlMsRUFBWSxJQUFNdFUsR0FBRzs7O0VBS3JCdVUsRUFBYyxJQUFNdlUsR0FBRzs7Ozs7RUFPdkJ3VSxFQUFjLElBQU1qSCxLQUFLOzs7RUF5QnhCLE1BQU0sVUFBWSxJQUFNNU4sVUFRN0IsWUFBYUMsR0FDWDRPLE1BQU01TyxHQWdCUixLQUFBNlUsS0FBTyxLQUNMLE1BQU10TyxFQUF5QyxNQUF4QmpKLEtBQUswQyxNQUFNbUcsVUFBb0I3SSxLQUFLMEMsTUFBTW1HLFVBQVksR0FDdkUyTyxFQUE0QyxNQUF2QnhYLEtBQUswQyxNQUFNOE8sU0FBbUJ4UixLQUFLMEMsTUFBTThPLFNBQVcsR0FDL0V4UixLQUFLMFYsU0FBVyxJQUFJWCxFQUNwQi9VLEtBQUt5WCxXQUFhLElBQUlwTyxFQUFBLEVBQ3BCckosS0FBS3NKLE9BQ0wsSUFBUytDLElBQ1QsSUFBSXFMLFdBQ0pGLEVBQ0EsTUFDQSxHQUNBLEdBQ0EsRUFDQSxFQUNHdk8sRUFBSCxVQUVGakosS0FBSzJYLGNBQWdCLElBQUlsQyxFQUFzQnpWLEtBQUswVixVQUNwRDFWLEtBQUswVixTQUFTRixPQUFTeFYsS0FBS3lYLFdBQVc5SCxLQUFLOVUsS0FBS21GLEtBQUt5WCxZQUN0RHpYLEtBQUt5WCxXQUFXekgsV0FBYWhRLEtBQUswVixTQUFTTCxZQUFZeGEsS0FBS21GLEtBQUswVixVQUNqRTFWLEtBQUt5WCxXQUFXeEgsZUFBaUJqUSxLQUFLNFgsc0JBQXNCL2MsS0FBS21GLE1BQ2pFQSxLQUFLeVgsV0FBVzFLLGNBQWdCL00sS0FBSzJYLGNBQWNoQyxZQUFZOWEsS0FBS21GLEtBQUsyWCxlQUN6RTNYLEtBQUsyWCxjQUFjNUIsbUJBQXFCL1YsS0FBSzZYLG1CQUFtQmhkLEtBQUttRixNQUNyRUEsS0FBSzJYLGNBQWM3QixjQUFnQjlWLEtBQUs4WCxvQkFBb0JqZCxLQUFLbUYsTUFDakVBLEtBQUsrWCxLQUFPLElBQUksV0FBUyxDQUN2QkMsWUFBYSxRQUNiQyxXQUFZLE9BQ1pDLEtBQU0sR0FDTkMsS0FBTSxPQUlWLEtBQUFDLFFBQVUsS0FDUnBZLEtBQUswVixTQUFXLEtBQ2hCMVYsS0FBS3lYLFdBQWEsS0FDbEJ6WCxLQUFLMlgsY0FBZ0IsS0FDckIzWCxLQUFLK1gsS0FBTyxNQVNkLEtBQUFGLG1CQUFzQnRJLEdBQWF2UCxLQUFLK1gsS0FBS00sTUFBTTlJLEdBRW5ELEtBQUF1SSxvQkFBc0IsSUFBVzlYLEtBQUsrWCxLQUFLTyxRQUczQyxLQUFBakMsZUFBa0JrQyxHQUFrQnZZLEtBQUswVixTQUFTSCxhQUFhZ0QsR0FFL0QsS0FBQUMsbUJBQXNCRCxHQUFrQnZZLEtBQUswVixTQUFTK0Msb0JBQW9CRixHQUUxRSxLQUFBRyxTQUFXLFVBQ3NCLElBQXBCMVksS0FBS3lYLFlBQ2R6WCxLQUFLeVgsV0FBV2tCLE1BQU1DLFlBSTFCLEtBQUFDLFFBQVUsVUFDdUIsSUFBcEI3WSxLQUFLeVgsWUFDZHpYLEtBQUt5WCxXQUFXNUssT0FFbEI3TSxLQUFLOFgsc0JBQ0w5WCxLQUFLb1ksVUFDTHBZLEtBQUt1WCxRQUdQLEtBQUF1QixpQkFBb0I5VSxJQUNsQkEsRUFBRStVLFVBQzBCLElBQXhCL1ksS0FBSytQLE1BQU1pSixTQUNiaFosS0FBSzBZLFdBRUwxWSxLQUFLNlksV0FJVCxLQUFBakIsc0JBQXdCLENBQUNILEVBQVkxSCxJQUF3Qi9QLEtBQUs2UixTQUFTLENBQUVtSCxTQUFVakosSUFHdkYsS0FBQWtKLG1CQUE0QmpWLEdBQW9CLEVBQUQsZ0NBQzdDLEdBQWlCLElBQWJBLEVBQUVrVixPQUFjLENBQ2xCLE1BQU0sT0FBRXhILEdBQVcxUixLQUFLeVIsUUFBUWxXLEtBQzFCNGQsRUFBc0IsWUFBY25LLFNBQVNoTCxFQUFFTixPQUFPcEosUUFDaEMsSUFBeEIwRixLQUFLK1AsTUFBTWlKLFVBQXNDLE1BQW5CaFYsRUFBRU4sT0FBT3BKLE9BQW9DLE1BQW5CMEosRUFBRU4sT0FBT3BKLE1BUW5FLFlBQWEwRixLQUFLMEMsTUFBTThPLFNBQVV4TixFQUFFTixPQUFPcEosTUFBTzBGLEtBQUswQyxNQUFNbUcsVUFBVzZJLEdBQVEsR0FBTXZQLEtBQUtuRyxJQUN6RixNQUFNb2QsRUFBVXBkLEVBQVNxZCxVQUNUMWEsSUFBWnlhLEdBQW9ELFlBQTNCQSxFQUFRRSxlQUNuQ3RaLEtBQUs2UixTQUFTLENBQ1owSCxhQUFhLEVBQ2J4VyxLQUFNLFVBQ05FLFFBQVlrVyxFQUFILFdBQ1RoSSxZQUFhblIsS0FBSytQLE1BQU1vQixhQUcxQm5SLEtBQUs2UixTQUFTLENBQ1owSCxhQUFhLEVBQ2J4VyxLQUFNLFFBQ05FLGFBQXNCdEUsSUFBWnlhLEdBQWlELElBQXhCQSxFQUFRSSxZQUFxQixHQUFHTCxLQUFlOVosT0FBTytaLEVBQVFFLGtCQUFvQnRkLEVBQVN5ZCxrQkFBb0IsK0NBQ2xKdEksWUFBYW5SLEtBQUsrUCxNQUFNb0IsYUFHNUJtRCxXQUFXLElBQU10VSxLQUFLNlIsU0FBUyxDQUM3QjBILGFBQWEsRUFDYnBJLFlBQWFuUixLQUFLK1AsTUFBTW9CLGFBQ3RCLE9BQ0hhLE1BQU1wRixJQUNQVixRQUFRQyxJQUFJUyxHQUNaNU0sS0FBSzZSLFNBQVMsQ0FDWjBILGFBQWEsRUFDYnhXLEtBQU0sUUFDTkUsUUFBVSxZQUFRMkosRUFBTThNLFVBQVUxZCxXQUFhcUQsT0FBT3VOLEVBQU04TSxVQUFVMWQsU0FBUzRRLFFBQVcsc0JBQzFGdUUsWUFBYW5SLEtBQUsrUCxNQUFNb0IsYUFFMUJtRCxXQUFXLElBQU10VSxLQUFLNlIsU0FBUyxDQUM3QjBILGFBQWEsRUFDYnBJLFlBQWFuUixLQUFLK1AsTUFBTW9CLGFBQ3RCLE9BdkNOblIsS0FBSzZSLFNBQVMsQ0FDWjBILGFBQWEsRUFDYnhXLEtBQU0sVUFDTkUsUUFBWWtXLEVBQUgsMkNBQ1RoSSxZQUFhblIsS0FBSytQLE1BQU1vQixpQkEwQ2hDLEtBQUF5QyxvQkFBdUJ0WixJQUNyQjBGLEtBQUs2UixTQUFTLENBQ1o4SCxjQUFlcmYsS0FJbkIsS0FBQXlYLGtCQUFxQnpYLElBQ25CMEYsS0FBSzZSLFNBQVMsQ0FDWitILGNBQWV0ZixLQUluQixLQUFBdWYsa0JBQW9CLEtBQ2xCN1osS0FBSzZSLFNBQVMsQ0FDWmlJLG9CQUFvQixLQUl4QixLQUFBQyxZQUFjLElBQW1DLElBQXhCL1osS0FBSytQLE1BQU1pSixTQUFpQixFQUFJLEVBcEt2RGhaLEtBQUtzSixPQUFTLElBQUlpSCxFQUFBLEVBQWMsSUFBU08sT0FDekM5USxLQUFLK1AsTUFBUSxDQUNYaUssYUFBYSxFQUNiaEIsU0FBVSxFQUNWbEgsV0FBWSxFQUNaeUgsYUFBYSxFQUNidFcsUUFBUyxHQUNUa08sWUFBWSxFQUNacE8sS0FBTSxHQUNONFcsY0FBZSxHQUNmQyxjQUFlLEdBQ2ZFLG9CQUFvQixHQTBDeEIsb0JBQ0U5WixLQUFLdVgsT0FnSFAsU0FDRSxNQUFNLFNBQUV5QixFQUFRLFlBQUVPLEVBQVcsUUFBRXRXLEVBQU8sS0FBRUYsRUFBSSxjQUFFNlcsRUFBYSxjQUFFRCxFQUFhLG1CQUFFRyxHQUF1QjlaLEtBQUsrUCxNQUN4RyxPQUNFLGtCQUFDLElBQU1rSyxTQUFRLEtBQ00sV0FBbEJOLEdBQWdELFlBQWxCQyxFQUE4QixrQkFBQ25GLEVBQUEsRUFBUSxDQUFDeFIsUUFBUyxZQUFjLHVDQUF3Q0YsS0FBSyxVQUFhLEdBQ3JJLFdBQWxCNFcsR0FBZ0QsVUFBbEJDLEVBQTRCLGtCQUFDbkYsRUFBQSxFQUFRLENBQUN4UixRQUFTLFlBQWMsc0RBQXVERixLQUFLLFlBQWUsR0FDcEosV0FBbEI0VyxHQUFnRCxXQUFsQkMsRUFBNkIsa0JBQUNuRixFQUFBLEVBQVEsQ0FBQ3hSLFFBQVMsWUFBYywwREFBMkRGLEtBQUssVUFBYSxHQUN2SixlQUFsQjRXLEdBQW9ELFVBQWxCQyxFQUE0QixrQkFBQ25GLEVBQUEsRUFBUSxDQUFDeFIsUUFBUyxZQUFjLHFEQUFzREYsS0FBTSxZQUFnQixHQUN6SixlQUFsQjRXLEdBQW9ELFdBQWxCQyxFQUE2QixrQkFBQ25GLEVBQUEsRUFBUSxDQUFDeFIsUUFBUyxZQUFjLHlEQUEwREYsS0FBTSxZQUFnQixHQUM5SixZQUFsQjRXLEdBQWlELFVBQWxCQyxFQUE0QixrQkFBQ25GLEVBQUEsRUFBUSxDQUFDeFIsUUFBUyxZQUFjLHFDQUFzQ0YsS0FBTSxZQUFnQixHQUN0SSxZQUFsQjRXLEdBQWlELFdBQWxCQyxFQUE2QixrQkFBQ25GLEVBQUEsRUFBUSxDQUFDeFIsUUFBUyxZQUFjLHlDQUEwQ0YsS0FBTSxVQUFjLEdBQ3pJLGVBQWxCNFcsR0FBb0QsWUFBbEJDLEVBQThCLGtCQUFDbkYsRUFBQSxFQUFRLENBQUN4UixRQUFTLFlBQWMsc0NBQXVDRixLQUFNLFlBQWdCLEdBQzlKd1csR0FBZSxrQkFBQzlFLEVBQUEsRUFBUSxDQUFDeFIsUUFBU0EsRUFBU0YsS0FBTUEsSUFDbEQsa0JBQUNzVSxFQUFXLEtBQ1Ysa0JBQUNELEVBQVMsS0FDUixrQkFBQ0UsRUFBVyxLQUNUd0MsR0FBc0Isa0JBQUNJLEVBQUEsRUFBVyxDQUNqQzFJLFNBQVV4UixLQUFLMEMsTUFBTThPLFNBQ3JCdkksT0FBUWpKLEtBQUswQyxNQUFNbUcsVUFDbkJnTCxRQUFTLE1BQ1RELG9CQUFxQjVULEtBQUs0VCxvQkFDMUJjLGdCQUFpQjFVLEtBQUsrWixnQkFJNUIsa0JBQUMzQyxFQUFTLEtBQ1IsNEJBQVFwRyxRQUFTaFIsS0FBSzhZLGtCQUFnQyxJQUFiRSxFQUFpQixhQUFlLFlBRTNFLGtCQUFDNUIsRUFBUyxLQUNSLGtCQUFDRSxFQUFXLHVCQUNaLGtCQUFDakcsRUFBQSxFQUFVLENBQ1RHLFNBQVV4UixLQUFLMEMsTUFBTThPLFNBQ3JCdkksT0FBUWpKLEtBQUswQyxNQUFNbUcsVUFDbkJrSixrQkFBbUIvUixLQUFLK1Isa0JBQ3hCSixhQUFjM1IsS0FBSzZaLHFCQUd2QixrQkFBQ3pDLEVBQVMsS0FDUixrQkFBQ0UsRUFBVyxLLGlCQUFnQixLQUM1QixrQkFBQ3ZHLEVBQUEsRUFBWSxDQUFDSyxpQkFBa0IsSUFBdUJILFNBQVVqUixLQUFLaVosbUJBQW9COUgsV0FBWW5SLEtBQUsrUCxNQUFNb0IsZUFHdkcsSUFBYjZILEdBQWtCaFosS0FBSytYLE1BQVEsa0JBQUMsRUFBSSxDQUFDMUIsZUFBZ0JyVyxLQUFLcVcsZUFBZ0JtQyxtQkFBb0J4WSxLQUFLd1ksbUJBQW9CcEMsTUFBT3BXLEtBQUsrWCxTQU01SSxFQUFJMUYsWUFBYyxLLG1DQy9SbEJqWixFQUFPRCxRQUFVa0MsUUFBUSx3QixnQkNBekIsSUFBSXNaLEVBQU0sRUFBUSxHQUNGOU0sRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRcE4sV0FBYW9OLEVBQVErTSxRQUFVL00sS0FHL0NBLEVBQVUsQ0FBQyxDQUFDek8sRUFBT0MsRUFBSXdPLEVBQVMsTUFHOUMsSUFBSWpHLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQK1MsRUFBSTlNLEVBQVNqRyxHQUkxQnhJLEVBQU9ELFFBQVUwTyxFQUFRZ04sUUFBVSxJLGlCQ2hCbkMxYixFQURrQyxFQUFRLEdBQ2hDMmIsRUFBNEIsSUFFOUIxUCxLQUFLLENBQUNoTSxFQUFPQyxFQUFJLG9GQUFxRixLQUU5R0QsRUFBT0QsUUFBVUEiLCJmaWxlIjoic29sLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2Nik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IGRvdCBmcm9tICdkb3Qtb2JqZWN0J1xyXG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSdcclxuXHJcbi8qKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0IG9yIG5vdCAqL1xyXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodmFsdWUpOiBhbnkgPT4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xyXG5cclxuLyoqIFRha2VzIGFuIG9iamVjdCBhbmQgY29udmVydHMgdGhlIGtleXMgaW50byBjYW1lbGNhc2UgICovXHJcbmV4cG9ydCBjb25zdCBjYW1lbENhc2VLZXlzID0gKGRhdGEpOiBhbnkgPT4ge1xyXG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICByZXR1cm4gZGF0YS5tYXAoY2FtZWxDYXNlS2V5cylcclxuICB9IGVsc2UgaWYgKGRhdGEgIT09IG51bGwgJiYgaXNGYWxzeShpc09iamVjdChkYXRhKSkpIHtcclxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgIGFjY1tjYW1lbENhc2Uoa2V5KV0gPSBjYW1lbENhc2VLZXlzKHZhbHVlKVxyXG4gICAgICByZXR1cm4gYWNjXHJcbiAgICB9LCB7fSlcclxuICB9XHJcbiAgcmV0dXJuIGRhdGFcclxufVxyXG5cclxuLyoqIFRha2VzIGFuIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYW5vdGhlciBzdHJ1Y3R1cmUgdXNpbmcgZG90LW5vdGF0aW9uICovXHJcbmV4cG9ydCBjb25zdCByZXNoYXBlID0gKHJlc3BvbnNlLCBtb2RlbCk6IGFueSA9PiB7XHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVsKS5yZWR1Y2UoXHJcbiAgICAoYWNjLCBrZXkpID0+IGRvdC5jb3B5KGtleSwgbW9kZWxba2V5XSwgcmVzcG9uc2UsIGFjYyksXHJcbiAgICB7fVxyXG4gIClcclxufVxyXG5cclxuLyoqIFRha2VzIGFuIG9iamVjdCwgY2FtZWwgY2FzZXMgdGhlIGtleXMsIGFuZCBjb252ZXJ0cyBpdCB0byBhbm90aGVyIHN0cnVjdHVyZSB1c2luZyBkb3Qtbm90YXRpb24gKi9cclxuZXhwb3J0IGNvbnN0IGNhbWVsQ2FzZVJlc2hhcGUgPSAocmVzcG9uc2UsIG1vZGVsKTogYW55ID0+IHtcclxuICByZXR1cm4gcmVzaGFwZShjYW1lbENhc2VLZXlzKHJlc3BvbnNlKSwgbW9kZWwpXHJcbn1cclxuXHJcbi8qKiBUZXN0cyBpZiBhIHZhbHVlIGlzIGEgZnVuY3Rpb24gKi9cclxuZXhwb3J0IGNvbnN0IGlzRnVuYyA9ICh2YWx1ZSk6IGFueSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbidcclxuXHJcbmV4cG9ydCBjb25zdCBwYXNzd29yZExlbmd0aFZhbGlkYXRpb24gPSAobGVuZ3RoKTogYW55ID0+IGxlbmd0aCA+PSA4ICYmIGxlbmd0aCA8PSAzMlxyXG5cclxuZXhwb3J0IGNvbnN0IG5hbWVWYWxpZGF0aW9uID0gKHZhbHVlKTogYW55ID0+XHJcbiAgbmV3IFJlZ0V4cCgnXlthLXpBLVowLTkkQCQhJSojPyYtX35eXSskJykudGVzdCh2YWx1ZSlcclxuXHJcbmV4cG9ydCBjb25zdCBwYXNzd29yZFZhbGlkYXRpb24gPSAodmFsdWUpOiBhbnkgPT5cclxuICBuZXcgUmVnRXhwKFxyXG4gICAgJ14oPz0uKlswLTldKSg/PS4qWyFAIyQlXiYqXSkoPz0uKlthLXpdKSg/PS4qW0EtWl0pW2EtekEtWjAtOSRAJCElKiM/Ji1ffl5dezgsMzJ9JCdcclxuICApLnRlc3QodmFsdWUpXHJcblxyXG4vLyBleHBvcnQgY29uc3QgcG9ydFZhbGlkYXRpb24gPSAodmFsdWUpID0+IG5ldyBSZWdFeHAoJ14oNDkxNVswLTFdfDQ5MVswLTRdXFxkfDQ5MFxcZFxcZHw0WzAtOF1cXGR7M318WzEtM11cXGR7NH18WzItOV1cXGR7M318MVsxLTldXFxkezJ9fDEwWzMtOV1cXGR8MTAyWzQtOV0pJCcpLnRlc3QodmFsdWUpXHJcbmV4cG9ydCBjb25zdCBwb3J0VmFsaWRhdGlvbiA9ICh2YWx1ZSk6IGFueSA9PlxyXG4gIG5ldyBSZWdFeHAoXHJcbiAgICAnXigxMDJbNC05XXwxMFszLTldWzAtOV18MVsxLTldWzAtOV17Mn18WzItOV1bMC05XXszfXxbMS0zXVswLTldezR9fDRbMC04XVswLTldezN9fDQ5MFswLTldezJ9fDQ5MVswLTRdWzAtOV18NDkxNVswMV0pJCdcclxuICApLnRlc3QodmFsdWUpXHJcblxyXG5leHBvcnQgY29uc3QgY29tbW9uTmFtZVZhbGlkYXRpb24gPSAodmFsdWUpOiBhbnkgPT5cclxuICBpc0ZhbHN5KHZhbHVlKSA/IG5ldyBSZWdFeHAoJ1teYS16QS1aMC05Ll8tXScpLnRlc3QodmFsdWUpIDogdHJ1ZVxyXG5cclxuZXhwb3J0IGNvbnN0IGlwQWRkcmVzc1ZhbGlkYXRpb24gPSAoaXBUeXBlLCB2YWx1ZSk6IGFueSA9PlxyXG4gIGlwVHlwZSA9PT0gM1xyXG4gICAgPyBpcHY0KHZhbHVlKVxyXG4gICAgOiBpcFR5cGUgPT09IDZcclxuICAgICAgPyBpcHY2KHZhbHVlKVxyXG4gICAgICA6IGlwVHlwZSA9PT0gMjAxXHJcbiAgICAgICAgPyBmcWRuKHZhbHVlKVxyXG4gICAgICAgIDogJydcclxuXHJcbi8qKiBpcHY0IGZvcm1hdGUgdmFsaWRhdGlvbiAgKi9cclxuY29uc3QgaXB2NCA9ICh2YWx1ZSk6IGFueSA9PlxyXG4gIG5ldyBSZWdFeHAoXHJcbiAgICAnXihbMDFdP1swLTldP1swLTldfDJbMC00XVswLTldfDI1WzAtNV0pXFxcXC4oWzAxXT9bMC05XT9bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKVxcXFwuKFswMV0/WzAtOV0/WzAtOV18MlswLTRdWzAtOV18MjVbMC01XSlcXFxcLihbMDFdP1swLTldP1swLTldfDJbMC00XVswLTldfDI1WzAtNV0pJCdcclxuICApLnRlc3QodmFsdWUpXHJcblxyXG4vKiogaXB2NiBmb3JtYXRlIHZhbGlkYXRpb24gICovXHJcblxyXG5jb25zdCBpcHY2ID0gKHZhbHVlKTogYW55ID0+XHJcbiAgbmV3IFJlZ0V4cChcclxuICAgICdeKCg/OlswLTlBLUZhLWZdezEsNH0pKSgoPzo6WzAtOUEtRmEtZl17MSw0fSkpKjo6KCg/OlswLTlBLUZhLWZdezEsNH0pKSgoPzo6WzAtOUEtRmEtZl17MSw0fSkpKnwoKD86WzAtOUEtRmEtZl17MSw0fSkpKCg/OjpbMC05QS1GYS1mXXsxLDR9KSl7N30kJ1xyXG4gICkudGVzdCh2YWx1ZSlcclxuXHJcbi8qKiBmcWRuIGZvcm1hdGUgdmFsaWRhdGlvbiAgKi9cclxuY29uc3QgZnFkbiA9ICh2YWx1ZSk6IGFueSA9PiAvXig/PS57MSwyNTR9JCkoKD89W2EtejAtOS1dezEsNjN9XFwuKSh4bi0tKyk/W2EtejAtOV0rKC1bYS16MC05XSspKlxcLikrW2Etel17Miw2M30kLy50ZXN0KHZhbHVlKVxyXG5cclxuLyoqIHV0aWxpdHkgZnVuY3Rpb24gdG8gam9pbiB0aGUgY3NzIGNsYXNzIG5hbWVzICovXHJcbmV4cG9ydCBjb25zdCBqb2luQ2xhc3NlcyA9ICguLi5jbGFzc05hbWVzKTogYW55ID0+XHJcbiAgY2xhc3NOYW1lc1xyXG4gICAgLmZpbHRlcigobmFtZSkgPT4gISFpc0ZhbHN5KG5hbWUpKVxyXG4gICAgLmpvaW4oJyAnKVxyXG4gICAgLnRyaW0oKVxyXG5cclxuLyoqXHJcbiAqIGVuY29kZSB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW5jb2RlU3BlY2lhbENoYXJhY3RlcnMgPSAoY29uZmlnTmFtZSk6IHN0cmluZyA9PiB7XHJcbiAgY29uc3QgcmVwbGFjZUNoYXJzID0geyAnIyc6ICclMjMnLCAnJSc6ICclMjUnIH1cclxuICByZXR1cm4gY29uZmlnTmFtZS5yZXBsYWNlKC8jfCUvZywgbWF0Y2ggPT4gcmVwbGFjZUNoYXJzW21hdGNoXSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHByZXBhcmVIZWFkZXJzID0gKGFwaUtleSwgaXNNcHNDb250cm9sPzogYm9vbGVhbik6IGFueSA9PiB7XHJcbiAgY29uc3QgaGVhZGVycyA9IHtcclxuICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gIH1cclxuICBpZiAoaXNGYWxzeShpc01wc0NvbnRyb2wpKSB7XHJcbiAgICBoZWFkZXJzWydYLU1QUy1BUEktS2V5J10gPSBhcGlLZXlcclxuICB9IGVsc2Uge1xyXG4gICAgaGVhZGVyc1snWC1SUFMtQVBJLUtleSddID0gYXBpS2V5XHJcbiAgfVxyXG4gIHJldHVybiBoZWFkZXJzXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUZpbGVFeHRlbnNpb25zID0gKGZpbGVQYXRoKTogYm9vbGVhbiA9PiB7XHJcbiAgY29uc3QgdmFsaWRFeHRlbnNpb25zID0gLyhcXC5wZngpJC9pXHJcbiAgcmV0dXJuICEhaXNGYWxzeSh2YWxpZEV4dGVuc2lvbnMuZXhlYyhmaWxlUGF0aCkpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc0ZhbHN5ID0gKHZhbHVlOiBhbnkpOiBib29sZWFuID0+IHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09ICcnICYmIHZhbHVlICE9PSBmYWxzZSAmJiB2YWx1ZSAhPT0gMFxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBpMThuZXh0IGZyb20gJ2kxOG5leHQnXHJcbmltcG9ydCB7IGlzRmFsc3kgfSBmcm9tICcuL1V0aWxpdGllcydcclxuXHJcbi8qKlxyXG4gKiBBIGhlbHBlciBtZXRob2QgZm9yIHRyYW5zbGF0aW5nIGhlYWRlck5hbWVzIGFuZCBoZWFkZXJUb29sdGlwcyBvZiBjb2x1bW5EZWZzLlxyXG4gKiBJZiBoZWFkZXJUb29sdGlwIGlzIHByb3ZpZGVkLCBpdCB3aWxsIGJlIHRyYW5zbGF0ZWQuXHJcbiAqIElmIGhlYWRlclRvb2x0aXAgaXMgbm90IHByb3ZpZGVkLCB0aGUgaGVhZGVyTmFtZSB3aWxsIGJlIHVzZWQgdG8gZW5zdXJlIGhlYWRlcnNcclxuICogY2FuIGJlIGRlY2lwaGVyZWQgZXZlbiB3aGVuIHRoZSBjb2x1bW4gaXMgdG9vIG5hcnJvdyB0byBzaG93IHRoZSBlbnRpcmUgaGVhZGVyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZUNvbHVtbkRlZnMgPSAoY29sdW1uRGVmczogYW55KTogYW55ID0+IHtcclxuICByZXR1cm4gY29sdW1uRGVmcy5tYXAoY29sdW1uRGVmID0+IHtcclxuICAgIGNvbnN0IGhlYWRlckNvbXBvbmVudFBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbHVtbkRlZi5oZWFkZXJDb21wb25lbnRQYXJhbXMpXHJcbiAgICBjb25zdCBoZWFkZXJOYW1lID0gaXNGYWxzeShjb2x1bW5EZWYuaGVhZGVyTmFtZSkgPyBpMThuZXh0LnQoY29sdW1uRGVmLmhlYWRlck5hbWUpIDogdW5kZWZpbmVkXHJcbiAgICBjb25zdCBoZWFkZXJUb29sdGlwID0gaXNGYWxzeShjb2x1bW5EZWYuaGVhZGVyVG9vbHRpcCkgPyBpMThuZXh0LnQoY29sdW1uRGVmLmhlYWRlclRvb2x0aXApIDogaGVhZGVyTmFtZVxyXG4gICAgaGVhZGVyQ29tcG9uZW50UGFyYW1zLmRlc2NyaXB0aW9uID0gaXNGYWxzeShjb2x1bW5EZWYuaGVhZGVyQ29tcG9uZW50UGFyYW1zKSAmJiBpc0ZhbHN5KGNvbHVtbkRlZi5oZWFkZXJDb21wb25lbnRQYXJhbXMuZGVzY3JpcHRpb24pID8gaTE4bmV4dC50KGNvbHVtbkRlZi5oZWFkZXJDb21wb25lbnRQYXJhbXMuZGVzY3JpcHRpb24pIDogaGVhZGVyTmFtZVxyXG4gICAgcmV0dXJuIHsgLi4uY29sdW1uRGVmLCBoZWFkZXJOYW1lLCBoZWFkZXJDb21wb25lbnRQYXJhbXMsIGhlYWRlclRvb2x0aXAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbi8qKiBmdW5jdGlvbiB0byBnZXQgdGhlIHN0YXRpYyB0cmFubGF0aW9uIHRleHRzIGZyb20gdHJhbnNsYXRpb24uanNvblxyXG4gKiBAcGFyYW06IHRleHQgLSBjb250YWlucyB0aGUgcGF0aCB0byB0aGUgdGV4dCBpbiB0cmFuc2xhdGlvbi5qc29uXHJcbiovXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVUZXh0ID0gKHRleHQ6IGFueSk6IGFueSA9PiBpMThuZXh0LnQodGV4dClcclxuXHJcbi8qKiBmdW5jdGlvbiB0byBnZXQgdGhlIHRyYW5zbGF0aW9uIHRleHQgd2hlbiB0aGVyZSBhcmUgZHluYW1pYyB2YWx1ZXMgdG8gYmUgcmVuZGVyZWQgaW4gdHJhbnNsYXRpb25cclxuICogQHBhcmFtOiB0ZXh0IC0gY29udGFpbnMgdGhlIHBhdGggdG8gdGhlIHRleHQgaW4gdHJhbnNsYXRpb24uanNvblxyXG4gKiBAcGFyYW06IHRyYW5zbGF0ZSAtIG9iamVjdCBjb250YWluaW5nIGR5bmFtaWMgdmFsdWVzLiBUaGUga2V5cyB0byBiZSB1c2VkIGluc2lkZSB0cmFuc2xhdGlvbi5qc29uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlRHluYW1pY1RleHQgPSAodGV4dDogYW55LCB0cmFuc2xhdGUpOiBhbnkgPT4gaTE4bmV4dC50KHRleHQsIHsgdHJhbnNsYXRlIH0pXHJcbiIsImltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnLi9VdGlsaXRpZXMvVXRpbGl0eU1ldGhvZHMnXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBWaW5heSBHXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5leHBvcnQgY2xhc3MgVHlwZUNvbnZlcnRlciB7XHJcbiAgLy8gQmluYXJ5IGVuY29kaW5nIGFuZCBkZWNvZGluZyBmdW5jdGlvbnNcclxuICBzdGF0aWMgUmVhZFNob3J0ICh2OiBzdHJpbmcsIHA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAvL1xyXG4gICAgcmV0dXJuICh2LmNoYXJDb2RlQXQocCkgPDwgOCkgKyB2LmNoYXJDb2RlQXQocCArIDEpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUmVhZFNob3J0WCAodjogc3RyaW5nLCBwOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh2LmNoYXJDb2RlQXQocCArIDEpIDw8IDgpICsgdi5jaGFyQ29kZUF0KHApXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUmVhZEludCAodjogc3RyaW5nLCBwOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh2LmNoYXJDb2RlQXQocCkgKiAweDEwMDAwMDApICsgKHYuY2hhckNvZGVBdChwICsgMSkgPDwgMTYpICtcclxuICAgICAgICAgICAodi5jaGFyQ29kZUF0KHAgKyAyKSA8PCA4KSArIHYuY2hhckNvZGVBdChwICsgMylcclxuICB9IC8vIFdlIHVzZSBcIioweDEwMDAwMDBcIiBpbnN0ZWFkIG9mIFwiPDwyNFwiIGJlY2F1c2UgdGhlIHNoaWZ0IGNvbnZlcnRzIHRoZSBudW1iZXIgdG8gc2lnbmVkIGludDMyLlxyXG5cclxuICBzdGF0aWMgUmVhZFNJbnQgKHY6IHN0cmluZywgcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodi5jaGFyQ29kZUF0KHApIDw8IDI0KSArICh2LmNoYXJDb2RlQXQocCArIDEpIDw8IDE2KSArXHJcbiAgICAgICAgICAgKHYuY2hhckNvZGVBdChwICsgMikgPDwgOCkgKyB2LmNoYXJDb2RlQXQocCArIDMpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUmVhZEludFggKHY6IHN0cmluZywgcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodi5jaGFyQ29kZUF0KHAgKyAzKSAqIDB4MTAwMDAwMCkgKyAodi5jaGFyQ29kZUF0KHAgKyAyKSA8PCAxNikgK1xyXG4gICAgICAgICAgICh2LmNoYXJDb2RlQXQocCArIDEpIDw8IDgpICsgdi5jaGFyQ29kZUF0KHApXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgU2hvcnRUb1N0ciAodjogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKCh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkYpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgU2hvcnRUb1N0clggKHY6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh2ICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIEludFRvU3RyICh2OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKHYgPj4gMjQpICYgMHhGRiwgKHYgPj4gMTYpICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRilcclxuICB9XHJcblxyXG4gIHN0YXRpYyBJbnRUb1N0clggKHY6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh2ICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGLCAodiA+PiAxNikgJiAweEZGLCAodiA+PiAyNCkgJiAweEZGKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIE1ha2VUb0FycmF5ICh2OiBudW1iZXIpOiBudW1iZXIgfCBudW1iZXJbXSB7XHJcbiAgICBpZiAoIXYgfHwgdiA9PSBudWxsIHx8IHR5cGVvZiB2ID09PSAnb2JqZWN0JykgcmV0dXJuIHY7IHJldHVybiBbdl1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBTcGxpdEFycmF5ICh2OiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdi5zcGxpdCgnLCcpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgQ2xvbmUgKHY6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2KSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBFc2NhcGVIdG1sICh4OiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuKTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB4LnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpXHJcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvJy9nLCAnJmFwb3M7JylcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nKSB7IHJldHVybiB4IH1cclxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHsgcmV0dXJuIHggfVxyXG4gIH1cclxuXHJcbiAgLy8gTW92ZSBhbiBlbGVtZW50IGZyb20gb25lIHBvc2l0aW9uIGluIGFuIGFycmF5IHRvIGEgbmV3IHBvc2l0aW9uXHJcbiAgc3RhdGljIEFycmF5RWxlbWVudE1vdmUgKGFycjogbnVtYmVyW10sIGZyb206IG51bWJlciwgdG86IG51bWJlcik6IHZvaWQge1xyXG4gICAgYXJyLnNwbGljZSh0bywgMCwgYXJyLnNwbGljZShmcm9tLCAxKVswXSlcclxuICB9O1xyXG5cclxuICAvLyBQcmludCBvYmplY3QgZm9yIEhUTUxcclxuICBzdGF0aWMgT2JqZWN0VG9TdHJpbmdFeCAoeDogYW55LCBjOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHI6IHN0cmluZyA9ICcnXHJcbiAgICBpZiAoeCAhPT0gMCAmJiAoIWlzVHJ1dGh5KHgpIHx8IHggPT0gbnVsbCkpIHJldHVybiAnKE51bGwpJ1xyXG4gICAgaWYgKHggaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICBmb3IgKHZhciBpIGluIHgpIHtcclxuICAgICAgICByICs9ICc8YnIgLz4nICsgdGhpcy5nYXAoYykgKyAnSXRlbSAjJyArIGkgKyAnOiAnICsgdGhpcy5PYmplY3RUb1N0cmluZ0V4KHhbaV0sIGMgKyAxKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgZm9yICh2YXIgaiBpbiB4KSB7XHJcbiAgICAgICAgciArPSAnPGJyIC8+JyArIHRoaXMuZ2FwKGMpICsgaiArICcgPSAnICsgdGhpcy5PYmplY3RUb1N0cmluZ0V4KHhbal0sIGMgKyAxKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByICs9IHRoaXMuRXNjYXBlSHRtbCh4KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJcclxuICB9XHJcblxyXG4gIC8vIFByaW50IG9iamVjdCBmb3IgY29uc29sZVxyXG4gIHN0YXRpYyBPYmplY3RUb1N0cmluZ0V4MiAoeDogYW55LCBjOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHI6IHN0cmluZyA9ICcnXHJcbiAgICBpZiAoeCAhPT0gMCAmJiAoIWlzVHJ1dGh5KHgpIHx8IHggPT0gbnVsbCkpIHsgcmV0dXJuICcoTnVsbCknIH1cclxuICAgIGlmICh4IGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiB4KSB7XHJcbiAgICAgICAgciArPSAnXFxyXFxuJyArIHRoaXMuZ2FwMihjKSArICdJdGVtICMnICsgaSArICc6ICcgKyB0aGlzLk9iamVjdFRvU3RyaW5nRXgyKHhbaV0sIGMgKyAxKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgZm9yICh2YXIgaiBpbiB4KSB7XHJcbiAgICAgICAgciArPSAnXFxyXFxuJyArIHRoaXMuZ2FwMihjKSArIGogKyAnID0gJyArIHRoaXMuT2JqZWN0VG9TdHJpbmdFeDIoeFtqXSwgYyArIDEpXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHIgKz0gdGhpcy5Fc2NhcGVIdG1sKHgpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gclxyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIGFuIGlkZW50IGdhcFxyXG4gIHN0YXRpYyBnYXAgKGM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBsZXQgeCA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IChjICogNCk7IGkrKykge1xyXG4gICAgICB4ICs9ICcmbmJzcDsnXHJcbiAgICB9XHJcbiAgICByZXR1cm4geFxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdhcDIgKGM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBsZXQgeCA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IChjICogNCk7IGkrKykge1xyXG4gICAgICB4ICs9ICcgJ1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHhcclxuICB9XHJcblxyXG4gIC8vIFByaW50IGFuIG9iamVjdCBpbiBodG1sXHJcbiAgc3RhdGljIE9iamVjdFRvU3RyaW5nICh4OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuT2JqZWN0VG9TdHJpbmdFeCh4LCAwKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIE9iamVjdFRvU3RyaW5nMiAoeDogYW55KTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLk9iamVjdFRvU3RyaW5nRXgyKHgsIDApXHJcbiAgfVxyXG5cclxuICAvLyBDb252ZXJ0IGEgaGV4IHN0cmluZyB0byBhIHJhdyBzdHJpbmdcclxuICBzdGF0aWMgaGV4MnJzdHIgKGQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAodHlwZW9mIGQgIT09ICdzdHJpbmcnIHx8IGQubGVuZ3RoID09PSAwKSB7IHJldHVybiAnJyB9XHJcbiAgICBsZXQgciA9ICcnOyBjb25zdCBtOiBhbnkgPSAoJycgKyBkKS5tYXRjaCgvLi4vZyk7IGxldCB0XHJcbiAgICB3aGlsZSAodCA9IG0uc2hpZnQoKSkgeyByICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoTnVtYmVyKCcweCcgKyB0KSkgfVxyXG4gICAgcmV0dXJuIHJcclxuICB9XHJcblxyXG4gIC8vIENvbnZlcnQgZGVjaW1hbCB0byBoZXhcclxuICBzdGF0aWMgY2hhcjJoZXggKGk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigtMikudG9VcHBlckNhc2UoKVxyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBoZXggc3RyaW5nXHJcbiAgc3RhdGljIHJzdHIyaGV4IChpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGxldCByID0gJyc7IGxldCBpXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgciArPSB0aGlzLmNoYXIyaGV4KGlucHV0LmNoYXJDb2RlQXQoaSkpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gclxyXG4gIH1cclxuXHJcbiAgLy8gVVRGLTggZW5jb2RpbmcgJiBkZWNvZGluZyBmdW5jdGlvbnNcclxuICBzdGF0aWMgZW5jb2RlX3V0ZjggKHM6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHMpKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlY29kZV91dGY4IChzOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUocykpXHJcbiAgfVxyXG5cclxuICAvLyBDb252ZXJ0IGEgc3RyaW5nIGludG8gYSBibG9iXHJcbiAgc3RhdGljIGRhdGEyYmxvYiAoZGF0YTogc3RyaW5nKTogYW55IHtcclxuICAgIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7IGJ5dGVzW2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpIH1cclxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpXSlcclxuICAgIHJldHVybiBibG9iXHJcbiAgfVxyXG5cclxuICAvLyBHZW5lcmF0ZSByYW5kb20gbnVtYmVyc1xyXG4gIHN0YXRpYyByYW5kb20gKG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpXHJcbiAgfVxyXG5cclxuICAvLyBUcmFkZW1hcmtzXHJcbiAgc3RhdGljIHRyYWRlbWFya3MgKHg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4geC5yZXBsYWNlKC9cXChSXFwpL2csICcmcmVnOycpLnJlcGxhY2UoL1xcKFRNXFwpL2csICcmdHJhZGU7JylcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMjFcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5leHBvcnQgY29uc3QgaXNUcnV0aHkgPSAodmFsdWU6IGFueSk6IGJvb2xlYW4gPT4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gJycgJiYgdmFsdWUgIT09IGZhbHNlICYmIHZhbHVlICE9PSAwXHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgaXNGYWxzeSwgcHJlcGFyZUhlYWRlcnMgfSBmcm9tICcuLi9zaGFyZWQvVXRpbGl0aWVzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIEh0dHBDbGllbnQge1xyXG4gIHN0YXRpYyBhc3luYyBnZXQgKHVybCwgYXBpS2V5LCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QganNvbkhlYWRlcnMgPSBwcmVwYXJlSGVhZGVycyhhcGlLZXkpXHJcbiAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaCh1cmwsIHtcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgaGVhZGVyczoganNvbkhlYWRlcnNcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgcG9zdCAodXJsLCBib2R5ID0ge30sIGFwaUtleT8sIGlzTXBzPywgb3B0aW9ucyA9IHt9KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIGNvbnN0IGpzb25IZWFkZXJzID0gcHJlcGFyZUhlYWRlcnMoYXBpS2V5LCBpc01wcylcclxuICAgIGlmIChpc0ZhbHN5KGlzTXBzKSkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaCh1cmwsIHtcclxuICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgICAgaGVhZGVyczoganNvbkhlYWRlcnNcclxuICAgICAgfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LmZldGNoUlBTKHVybCwge1xyXG4gICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgYm9keTogYm9keSxcclxuICAgICAgICBoZWFkZXJzOiBqc29uSGVhZGVyc1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGRlbGV0ZSAodXJsLCBhcGlLZXk/LCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QganNvbkhlYWRlcnMgPSBwcmVwYXJlSGVhZGVycyhhcGlLZXkpXHJcbiAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaFJQUyh1cmwsIHtcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgaGVhZGVyczoganNvbkhlYWRlcnNcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgcGF0Y2ggKHVybCwgYm9keSA9IHt9LCBhcGlLZXk/LCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QganNvbkhlYWRlcnMgPSBwcmVwYXJlSGVhZGVycyhhcGlLZXkpXHJcbiAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaFJQUyh1cmwsIHtcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICBib2R5OiBib2R5LFxyXG4gICAgICBoZWFkZXJzOiBqc29uSGVhZGVyc1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBmZXRjaCAodXJsLCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucykudGhlbihhc3luYyByZXN1bHQgPT4gYXdhaXQgcmVzdWx0Lmpzb24oKSlcclxuICB9XHJcblxyXG4gIC8vIEhhbmRsZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBhcyB0ZXh0XHJcbiAgc3RhdGljIGFzeW5jIGZldGNoUlBTICh1cmwsIG9wdGlvbnMgPSB7fSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKGFzeW5jIHJlc3VsdCA9PiBhd2FpdCByZXN1bHQudGV4dCgpKVxyXG4gIH1cclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAyMFxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBEb21haW5Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XHJcbiAgZGF0YToge31cclxufSlcclxuZXhwb3J0IGludGVyZmFjZSBQcm92aWRlclByb3BzIHtcclxuICBkYXRhOiBhbnlcclxufVxyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvdmlkZXJQcm9wcywge30+IHtcclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8RG9tYWluQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBkYXRhOiB0aGlzLnByb3BzLmRhdGEgfX0+XHJcbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgIDwvRG9tYWluQ29udGV4dC5Qcm92aWRlcj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb25zdW1lciA9ICh7IGNoaWxkcmVuIH0pOiBKU1guRWxlbWVudCA9PiB7XHJcbiAgcmV0dXJuIDxEb21haW5Db250ZXh0LkNvbnN1bWVyID5cclxuICAgIHtjaGlsZHJlbn1cclxuICA8L0RvbWFpbkNvbnRleHQuQ29uc3VtZXI+XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuXHJcbmNvbnN0IFN0eWxlZEJhciA9IFN0eWxlZC5kaXZgXHJcbmRpc3BsYXk6IGJsb2NrO1xyXG5wb3NpdGlvbjogZml4ZWQ7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxuYm90dG9tOiAwO1xyXG5sZWZ0OiA0MCU7XHJcbmJhY2tncm91bmQ6ICR7KHsgdHlwZSB9KSA9PiBnZXRDb2xvcnModHlwZSl9O1xyXG5ib3JkZXI6ICR7KHsgdHlwZSB9KSA9PiBgMXB4IHNvbGlkICR7Z2V0Q29sb3JzKHR5cGUpfWB9O1xyXG5tYXJnaW46IDEwcHg7XHJcbnBhZGRpbmc6IDEwcHg7cG9zaXRpb246IGFic29sdXRlO1xyXG5jb2xvcjogI2ZmZjsgXHJcbmZvbnQtd2VpZ2h0OjUwMDtcclxuei1pbmRleDoxO1xyXG5gXHJcblxyXG5jb25zdCBnZXRDb2xvcnMgPSAodHlwZSk6IHN0cmluZyA9PiB0eXBlID09PSAnc3VjY2VzcycgPyAnIzRjYWY1MCcgOiB0eXBlID09PSAnd2FybmluZycgPyAnI2ZmOTgwMCcgOiB0eXBlID09PSAnZXJyb3InID8gJyNmNDQzMzYnIDogJyMwMDAwMDAnXHJcblxyXG5jb25zdCBTbmFja0JhciA9ICh7IG1lc3NhZ2UsIHR5cGUgfSk6IGFueSA9PiA8U3R5bGVkQmFyIHR5cGU9e3R5cGV9PnttZXNzYWdlfTwvU3R5bGVkQmFyPlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU25hY2tCYXJcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaTE4bmV4dFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbnRlcmZhY2UgSUxvZ2dlciB7XHJcbiAgZGVidWc6IChsb2c6IHN0cmluZykgPT4gdm9pZFxyXG4gIGluZm86IChsb2c6IHN0cmluZykgPT4gdm9pZFxyXG4gIGVycm9yOiAobG9nOiBzdHJpbmcpID0+IHZvaWRcclxuICB3YXJuOiAobG9nOiBzdHJpbmcpID0+IHZvaWRcclxuICB2ZXJib3NlOiAobG9nOiBzdHJpbmcpID0+IHZvaWRcclxufVxyXG5lbnVtIExvZ0xldmVsIHtcclxuICBWRVJCT1NFID0gNSxcclxuICBJTkZPID0gNCxcclxuICBERUJVRyA9IDMsXHJcbiAgV0FSTklORyA9IDIsXHJcbiAgRVJST1IgPSAxXHJcbn1cclxuZXhwb3J0IHsgSUxvZ2dlciwgTG9nTGV2ZWwgfVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkb3Qtb2JqZWN0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNhbWVsY2FzZVwiKTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgaXNGYWxzeSB9IGZyb20gJy4uL3NoYXJlZC9VdGlsaXRpZXMnXHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICcuL0h0dHBDbGllbnQnXHJcblxyXG5leHBvcnQgY29uc3QgcG93ZXJBY3Rpb25zID0gYXN5bmMgKGd1aWQsIGFjdGlvbiwgbXBzU2VydmVyOiBzdHJpbmcgfCBudWxsLCBhcGlLZXksIHVzZVNPTD86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICBhcGlrZXk6ICd4eHh4eCcsXHJcbiAgICBtZXRob2Q6ICdQb3dlckFjdGlvbicsXHJcbiAgICBwYXlsb2FkOiBpc0ZhbHN5KHVzZVNPTCkgPyB7IGd1aWQsIGFjdGlvbiwgdXNlU09MIH0gOiB7IGd1aWQsIGFjdGlvbiB9XHJcbiAgfSlcclxuICBjb25zdCBzZXJ2ZXI6IHN0cmluZyA9IG1wc1NlcnZlciAhPSBudWxsID8gbXBzU2VydmVyIDogJydcclxuICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5wb3N0KGBodHRwczovLyR7c2VydmVyfS9hbXRgLCBib2R5LCBhcGlLZXksIHRydWUpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQb3dlclN0YXRlID0gYXN5bmMgKGd1aWQsIG1wc1NlcnZlcjogc3RyaW5nIHwgbnVsbCwgYXBpS2V5KTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgYXBpa2V5OiAneHh4eHgnLFxyXG4gICAgbWV0aG9kOiAnUG93ZXJTdGF0ZScsXHJcbiAgICBwYXlsb2FkOiB7IGd1aWQgfVxyXG4gIH0pXHJcbiAgY29uc3Qgc2VydmVyOiBzdHJpbmcgPSBtcHNTZXJ2ZXIgIT0gbnVsbCA/IG1wc1NlcnZlciA6ICcnXHJcbiAgcmV0dXJuIGF3YWl0IEh0dHBDbGllbnQucG9zdChgaHR0cHM6Ly8ke3NlcnZlcn0vYW10YCwgYm9keSwgYXBpS2V5LCB0cnVlKVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgVHlwZUNvbnZlcnRlciB9IGZyb20gJy4vQ29udmVydGVyJ1xyXG5pbXBvcnQgeyBJQ29tbXVuaWNhdG9yIH0gZnJvbSAnLi9JQ29tbXVuaWNhdG9yJ1xyXG5pbXBvcnQgbWQ1IGZyb20gJ21kNSdcclxuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gJy4vSUxvZ2dlcidcclxuaW1wb3J0IHsgaXNUcnV0aHkgfSBmcm9tICcuL1V0aWxpdGllcy9VdGlsaXR5TWV0aG9kcydcclxuLyoqXHJcbiAqIFByb3RvY29sIGZvciBkaWZmZXJlbnQgUmVkaXIgcHJvdG9jb2xzLiBTT0w9MSxLVk09MixJREVSPVVTQi1SXHJcbiAqL1xyXG5leHBvcnQgZW51bSBQcm90b2NvbCB7XHJcbiAgU09MID0gMSxcclxuICBLVk0gPSAyLFxyXG4gIElERVIgPSAzXHJcbn1cclxuLyoqXHJcbiAqIEFNVFJlZGlyZWN0b3IgcHJvdmlkZXMgYWxsIGNvbW11bmljYXRpb24gb3ZlciBXZWJTb2NrZXRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQU1UUmVkaXJlY3RvciBpbXBsZW1lbnRzIElDb21tdW5pY2F0b3Ige1xyXG4gIHN0YXRlOiBudW1iZXJcclxuICBzb2NrZXQ6IGFueVxyXG4gIGhvc3Q6IHN0cmluZ1xyXG4gIHBvcnQ6IG51bWJlclxyXG4gIHVzZXI6IHN0cmluZ1xyXG4gIHBhc3M6IHN0cmluZ1xyXG4gIHRsczogbnVtYmVyXHJcbiAgYXV0aFVyaTogc3RyaW5nXHJcbiAgdGxzdjFvbmx5OiBudW1iZXJcclxuICBjb25uZWN0U3RhdGU6IG51bWJlclxyXG4gIHByb3RvY29sOiBQcm90b2NvbFxyXG4gIGFtdEFjY3VtdWxhdG9yOiBzdHJpbmdcclxuICBhbXRTZXF1ZW5jZTogbnVtYmVyXHJcbiAgYW10S2VlcEFsaXZlVGltZXI6IGFueVxyXG5cclxuICBmaWxlUmVhZGVyOiBGaWxlUmVhZGVyXHJcbiAgZmlsZVJlYWRlckluVXNlOiBib29sZWFuXHJcbiAgZmlsZVJlYWRlckFjYzogYW55W11cclxuICByYW5kb21Ob25jZUNoYXJzOiBzdHJpbmdcclxuICBSZWRpcmVjdFN0YXJ0U29sOiBzdHJpbmdcclxuICBSZWRpcmVjdFN0YXJ0S3ZtOiBzdHJpbmdcclxuICBSZWRpcmVjdFN0YXJ0SWRlcjogc3RyaW5nXHJcbiAgdXJsdmFyczogYW55XHJcbiAgaW5EYXRhQ291bnQ6IG51bWJlclxyXG4gIHNlcnZlcjogYW55XHJcbiAgbG9nZ2VyOiBJTG9nZ2VyXHJcbiAgb25Qcm9jZXNzRGF0YTogKGRhdGE6IHN0cmluZykgPT4gdm9pZFxyXG4gIG9uU3RhcnQ6ICgpID0+IHZvaWRcclxuICBvbk5ld1N0YXRlOiAoc3RhdGU6IG51bWJlcikgPT4gdm9pZFxyXG4gIG9uU3RhdGVDaGFuZ2VkOiAocmVkaXJlY3RvcjogYW55LCBzdGF0ZTogbnVtYmVyKSA9PiB2b2lkXHJcbiAgb25FcnJvcjogKCkgPT4gdm9pZFxyXG5cclxuICBjb25zdHJ1Y3RvciAobG9nZ2VyOiBJTG9nZ2VyLCBwcm90b2NvbDogbnVtYmVyLCBmcjogRmlsZVJlYWRlciwgaG9zdDogc3RyaW5nLCBwb3J0OiBudW1iZXIsIHVzZXI6IHN0cmluZywgcGFzczogc3RyaW5nLCB0bHM6IG51bWJlciwgdGxzMW9ubHk6IG51bWJlciwgc2VydmVyPzogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmZpbGVSZWFkZXIgPSBmclxyXG4gICAgdGhpcy5yYW5kb21Ob25jZUNoYXJzID0gJ2FiY2RlZjAxMjM0NTY3ODknXHJcbiAgICB0aGlzLmhvc3QgPSBob3N0XHJcbiAgICB0aGlzLnBvcnQgPSBwb3J0XHJcbiAgICB0aGlzLnVzZXIgPSB1c2VyXHJcbiAgICB0aGlzLnBhc3MgPSBwYXNzXHJcbiAgICB0aGlzLnRscyA9IHRsc1xyXG4gICAgdGhpcy50bHN2MW9ubHkgPSB0bHMxb25seVxyXG4gICAgdGhpcy5wcm90b2NvbCA9IHByb3RvY29sXHJcbiAgICB0aGlzLlJlZGlyZWN0U3RhcnRTb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NTMsIDB4NEYsIDB4NEMsIDB4MjApXHJcbiAgICB0aGlzLlJlZGlyZWN0U3RhcnRLdm0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4NGIsIDB4NTYsIDB4NGQsIDB4NTIpXHJcbiAgICB0aGlzLlJlZGlyZWN0U3RhcnRJZGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDEwLCAweDAwLCAweDAwLCAweDAwLCAweDQ5LCAweDQ0LCAweDQ1LCAweDUyKVxyXG4gICAgdGhpcy51cmx2YXJzID0ge31cclxuICAgIHRoaXMuc2VydmVyID0gc2VydmVyXHJcbiAgICB0aGlzLmFtdEFjY3VtdWxhdG9yID0gJydcclxuICAgIHRoaXMuYXV0aFVyaSA9ICcnXHJcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlclxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBXZWJTb2NrZXQgcGF0aCB0byBjb25uZWN0IHRvIHVzaW5nIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gICAqIFVzZXMgaG9zdChkZXZpY2VpZCksIHBvcnQsIHRscywgdGxzdjFvbmx5LCB1c2VyLCBwYXNzIG9wdGlvbnMgdG8gYnVpbGQgdGhlIHVybC5cclxuICAgKi9cclxuICBwcml2YXRlIGdldFdzTG9jYXRpb24gKCk6IHN0cmluZyB7XHJcbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIoKSAmJiAhaXNUcnV0aHkodGhpcy5zZXJ2ZXIpKSB7XHJcbiAgICAgIHJldHVybiBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wucmVwbGFjZSgnaHR0cCcsICd3cycpfS8vXHJcbiAgICAgICR7d2luZG93LmxvY2F0aW9uLmhvc3R9XHJcbiAgICAgICR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cmluZygwLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUubGFzdEluZGV4T2YoJy8nKSl9XHJcbiAgICAgIC93ZWJyZWxheS5hc2h4P3A9MiZob3N0PSR7dGhpcy5ob3N0fSZwb3J0PSR7dGhpcy5wb3J0fSZ0bHM9JHt0aGlzLnRsc30keygodGhpcy51c2VyID09PSAnKicpID8gJyZzZXJ2ZXJhdXRoPTEnIDogJycpfSR7KCh0eXBlb2YgdGhpcy5wYXNzID09PSAndW5kZWZpbmVkJykgPyAoJyZzZXJ2ZXJhdXRoPTEmdXNlcj0nICsgdGhpcy51c2VyKSA6ICcnKX0mdGxzMW9ubHk9JHt0aGlzLnRsc3Yxb25seX1gXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gYHdzczovLyR7U3RyaW5nKHRoaXMuc2VydmVyKX0vd2VicmVsYXkuYXNoeD9wPTImaG9zdD0ke3RoaXMuaG9zdH0mcG9ydD0ke3RoaXMucG9ydH0mdGxzPSR7dGhpcy50bHN9JHsoKHRoaXMudXNlciA9PT0gJyonKSA/ICcmc2VydmVyYXV0aD0xJyA6ICcnKX0keygodHlwZW9mIHRoaXMucGFzcyA9PT0gJ3VuZGVmaW5lZCcpID8gKCcmc2VydmVyYXV0aD0xJnVzZXI9JyArIHRoaXMudXNlcikgOiAnJyl9JnRsczFvbmx5PSR7dGhpcy50bHN2MW9ubHl9YFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgY3VycmVudCBlbnZpcm9ubWVudCBpcyBicm93c2VyIG9yIHRlc3RcclxuICAgKi9cclxuICBwcml2YXRlIGlzQnJvd3NlciAoKTogYm9vbGVhbiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBpc1dlYiA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcclxuICAgICAgaWYgKGlzV2ViKSB0aGlzLmxvZ2dlci5kZWJ1ZygnISEhISFCUk9XU0VSISEhISEnKVxyXG4gICAgICByZXR1cm4gaXNXZWJcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBnZXRzIFdzIExvY2F0aW9uIGFuZCBzdGFydHMgYSB3ZWJzb2NrZXQgZm9yIGxpc3RlbmluZ1xyXG4gICAqIEBwYXJhbSBjIGlzIGJhc2UgdHlwZSBmb3IgV2ViU29ja2V0XHJcbiAgICovXHJcbiAgc3RhcnQ8VD4gKGM6IG5ldyhwYXRoOiBzdHJpbmcpID0+IFQpOiBhbnkgeyAvLyBVc2luZyB0aGlzIGdlbmVyaWMgc2lnbmF0dXJlIGFsbG93cyB1cyB0byBwYXNzIHRoZSBXZWJTb2NrZXQgdHlwZSBmcm9tIHVuaXQgdGVzdHMgb3IgaW4gcHJvZHVjaW9uIGZyb20gYSB3ZWIgYnJvd3NlclxyXG4gICAgdGhpcy5jb25uZWN0U3RhdGUgPSAwXHJcbiAgICAvLyBsZXQgd3MgPSBuZXcgYyh0aGlzLmdldFdzTG9jYXRpb24oKSkgLy8gdXNpbmcgY3JlYXRlIGZ1bmN0aW9uIGMgaW52b2tlcyB0aGUgY29uc3RydWN0b3IgV2ViU29ja2V0KClcclxuICAgIHRoaXMuc29ja2V0ID0gbmV3IGModGhpcy5nZXRXc0xvY2F0aW9uKCkpIC8vIFRoZSBcInA9MlwiIGluZGljYXRlcyB0byB0aGUgcmVsYXkgdGhhdCB0aGlzIGlzIGEgUkVESVJFQ1RJT04gc2Vzc2lvblxyXG4gICAgdGhpcy5zb2NrZXQub25vcGVuID0gdGhpcy5vblNvY2tldENvbm5lY3RlZC5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnNvY2tldC5vbmNsb3NlID0gdGhpcy5vblNvY2tldENsb3NlZC5iaW5kKHRoaXMpXHJcbiAgICBjb25zdCBvbmxvYWQgPSAoZTogYW55KTogYW55ID0+IHtcclxuICAgICAgdGhpcy5vblNvY2tldERhdGEoZS50YXJnZXQucmVzdWx0KVxyXG4gICAgICBpZiAodGhpcy5maWxlUmVhZGVyQWNjLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMuZmlsZVJlYWRlckluVXNlID0gZmFsc2VcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmZpbGVSZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKG5ldyBCbG9iKFt0aGlzLmZpbGVSZWFkZXJBY2Muc2hpZnQoKV0pKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbmxvYWRlbmQgPSAoZTogYW55KTogYW55ID0+IHtcclxuICAgICAgdGhpcy5vblNvY2tldERhdGEoZS50YXJnZXQucmVzdWx0KVxyXG4gICAgICBpZiAodGhpcy5maWxlUmVhZGVyQWNjLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMuZmlsZVJlYWRlckluVXNlID0gZmFsc2VcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIodGhpcy5maWxlUmVhZGVyQWNjLnNoaWZ0KCkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpc1RydXRoeSh0aGlzLmZpbGVSZWFkZXIpICYmIGlzVHJ1dGh5KHRoaXMuZmlsZVJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcpKSB7XHJcbiAgICAvLyBDaHJvbWUgJiBGaXJlZm94IChEcmFmdClcclxuICAgICAgdGhpcy5maWxlUmVhZGVyLm9ubG9hZCA9IG9ubG9hZC5iaW5kKHRoaXMpXHJcbiAgICB9IGVsc2UgaWYgKGlzVHJ1dGh5KHRoaXMuZmlsZVJlYWRlcikgJiYgaXNUcnV0aHkodGhpcy5maWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKSkge1xyXG4gICAgLy8gQ2hyb21lICYgRmlyZWZveCAoU3BlYylcclxuICAgICAgdGhpcy5maWxlUmVhZGVyLm9ubG9hZGVuZCA9IG9ubG9hZGVuZC5iaW5kKHRoaXMpXHJcbiAgICB9XHJcbiAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdDb25uZWN0aW5nIHRvIHdlYnNvY2tldCcpXHJcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoMSlcclxuICB9XHJcblxyXG4gIG9uU29ja2V0Q29ubmVjdGVkICgpOiBhbnkge1xyXG4gICAgaWYgKGlzVHJ1dGh5KHRoaXMudXJsdmFycykgJiYgaXNUcnV0aHkodGhpcy51cmx2YXJzLnJlZGlydHJhY2UpKSBjb25zb2xlLmxvZygnUkVESVItQ09OTkVDVCcpXHJcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoMilcclxuICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYENvbm5lY3RlZCB0byB3ZWJzb2NrZXQgc2VydmVyLiBXaXRoIHByb3RvY29sICR7dGhpcy5wcm90b2NvbH0gKDIgPSBLVk0pYClcclxuICAgIHRoaXMubG9nZ2VyLmluZm8oYFN0YXJ0IFJlZGlyZWN0IFNlc3Npb24gZm9yIHByb3RvY29sLiAke3RoaXMucHJvdG9jb2x9YClcclxuICAgIGlmICh0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5TT0wpIHRoaXMuc29ja2V0U2VuZCh0aGlzLlJlZGlyZWN0U3RhcnRTb2wpIC8vIFRPRE86IFB1dCB0aGVzZSBzdHJpbmdzIGluIGhpZ2hlciBsZXZlbCBtb2R1bGUgdG8gdGlnaHRlbiBjb2RlXHJcbiAgICBpZiAodGhpcy5wcm90b2NvbCA9PT0gUHJvdG9jb2wuS1ZNKSB0aGlzLnNvY2tldFNlbmQodGhpcy5SZWRpcmVjdFN0YXJ0S3ZtKSAvLyBEb24ndCBuZWVkIHRoZXNlIGlzIHRoZSBmZWF0dXJlIGlzIG5vdCBjb21waWxlZC1pbi5cclxuICAgIGlmICh0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5JREVSKSB0aGlzLnNvY2tldFNlbmQodGhpcy5SZWRpcmVjdFN0YXJ0SWRlcilcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIG5ldyBkYXRhIG9uIHRoZSB3ZWJzb2NrZXRcclxuICAgKiBAcGFyYW0gZSBkYXRhIHJlY2VpdmVkIG92ZXIgdGhlIHdlYnNvY2tldFxyXG4gICAqL1xyXG4gIG9uTWVzc2FnZSAoZTogYW55KTogYW55IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGUuZGF0YSlcclxuICAgICAgdGhpcy5pbkRhdGFDb3VudCsrXHJcbiAgICAgIGlmICh0eXBlb2YgZS5kYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbGVSZWFkZXJJblVzZSkge1xyXG4gICAgICAgICAgdGhpcy5maWxlUmVhZGVyQWNjLnB1c2goZS5kYXRhKVxyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZpbGVSZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nICE9IG51bGwpIHtcclxuICAgICAgICAgIC8vIENocm9tZSAmIEZpcmVmb3ggKERyYWZ0KVxyXG4gICAgICAgICAgdGhpcy5maWxlUmVhZGVySW5Vc2UgPSB0cnVlXHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKG5ldyBCbG9iKFtlLmRhdGFdKSlcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAvLyBDaHJvbWUgJiBGaXJlZm94IChTcGVjKVxyXG4gICAgICAgICAgdGhpcy5maWxlUmVhZGVySW5Vc2UgPSB0cnVlXHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZS5kYXRhKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBJRTEwLCByZWFkQXNCaW5hcnlTdHJpbmcgZG9lcyBub3QgZXhpc3QsIHVzZSBhbiBhbHRlcm5hdGl2ZS5cclxuICAgICAgICAgIGxldCBiaW5hcnkgPSAnJzsgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShlLmRhdGEpOyBjb25zdCBsZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7IGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKSB9XHJcbiAgICAgICAgICB0aGlzLm9uU29ja2V0RGF0YShiaW5hcnkpXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIElmIHdlIGdldCBhIHN0cmluZyBvYmplY3QsIGl0IG1heWJlIHRoZSBXZWJSVEMgY29uZmlybS4gSWdub3JlIGl0LlxyXG4gICAgICAgIC8vIHRoaXMuZGVidWcoXCJNZXNoRGF0YUNoYW5uZWwgLSBPbkRhdGEgLSBcIiArIHR5cGVvZiBlLmRhdGEgKyBcIiAtIFwiICsgZS5kYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgdGhpcy5vblNvY2tldERhdGEoZS5kYXRhKVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcilcclxuICAgICAgdGhpcy5zdG9wKClcclxuICAgICAgdGhpcy5vbkVycm9yKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCBmcm9tIG9uTWVzc2FnZVxyXG4gICAqIEBwYXJhbSBkYXRhIGRhdGEgb3ZlciB0aGUgd2lyZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgb25Tb2NrZXREYXRhIChkYXRhOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgaWYgKCFpc1RydXRoeShkYXRhKSB8fCB0aGlzLmNvbm5lY3RTdGF0ZSA9PT0gLTEpIHJldHVyblxyXG5cclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgLy8gVGhpcyBpcyBhbiBBcnJheUJ1ZmZlciwgY29udmVydCBpdCB0byBhIHN0cmluZyBhcnJheSAodXNlZCBpbiBJRSlcclxuICAgICAgbGV0IGJpbmFyeSA9ICcnXHJcbiAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSlcclxuICAgICAgY29uc3QgbGVuZ3RoID0gYnl0ZXMuYnl0ZUxlbmd0aFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7IGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKSB9XHJcbiAgICAgIGRhdGEgPSBiaW5hcnlcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7IHJldHVybiB9XHJcblxyXG4gICAgaWYgKCh0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5LVk0gfHwgdGhpcy5wcm90b2NvbCA9PT0gUHJvdG9jb2wuSURFUikgJiYgdGhpcy5jb25uZWN0U3RhdGUgPT09IDEpIHtcclxuICAgICAgcmV0dXJuIHRoaXMub25Qcm9jZXNzRGF0YShkYXRhKVxyXG4gICAgfSAvLyBLVk0gdHJhZmZpYywgZm9yd2FyZCBpdCBkaXJlY3RseS5cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnYmVmb3JlOiAnLCB0aGlzLmFtdEFjY3VtdWxhdG9yKVxyXG4gICAgdGhpcy5hbXRBY2N1bXVsYXRvciArPSBkYXRhXHJcbiAgICAvLyBjb25zb2xlLmxvZygnYWZ0ZXI6ICcsIHRoaXMuYW10QWNjdW11bGF0b3IpXHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIlJFRElSLVJFQ1YoXCIgKyB0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCArIFwiKTogXCIgKyBUeXBlQ29udmVydGVyLnJzdHIyaGV4KHRoaXMuYW10QWNjdW11bGF0b3IpKTtcclxuICAgIHdoaWxlICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgIGxldCBjbWRzaXplID0gMFxyXG4gICAgICBzd2l0Y2ggKHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCgwKSkge1xyXG4gICAgICAgIGNhc2UgMHgxMTogeyAvLyBTdGFydFJlZGlyZWN0aW9uU2Vzc2lvblJlcGx5ICgxNylcclxuICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYFN0YXJ0IFJlZGlyZWN0aW9uIFNlc3Npb24gcmVwbHkgcmVjZWl2ZWQgZm9yICAke3RoaXMucHJvdG9jb2x9YClcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDQpIHJldHVyblxyXG4gICAgICAgICAgY29uc3Qgc3RhdHVzY29kZSA9IHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCgxKVxyXG4gICAgICAgICAgc3dpdGNoIChzdGF0dXNjb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDogeyAvLyBTVEFUVVNfU1VDQ0VTU1xyXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ1Nlc3Npb24gc3RhdHVzIHN1Y2Nlc3MuIFN0YXJ0IGhhbmRzaGFrZScpXHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgMTMpIHJldHVyblxyXG4gICAgICAgICAgICAgIGNvbnN0IG9lbWxlbiA9IHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCgxMilcclxuICAgICAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPCAxMyArIG9lbWxlbikgcmV0dXJuXHJcblxyXG4gICAgICAgICAgICAgIC8vIFF1ZXJ5IGZvciBhdmFpbGFibGUgYXV0aGVudGljYXRpb25cclxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdRdWVyeSBmb3IgYXZhaWxhYmxlIGF1dGhlbnRpY2F0aW9uJylcclxuICAgICAgICAgICAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDEzLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwKSkgLy8gUXVlcnkgYXV0aGVudGljYXRpb24gc3VwcG9ydFxyXG4gICAgICAgICAgICAgIGNtZHNpemUgPSAoMTMgKyBvZW1sZW4pXHJcbiAgICAgICAgICAgICAgYnJlYWsgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIHRoaXMuc3RvcCgpXHJcbiAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrIH1cclxuICAgICAgICBjYXNlIDB4MTQ6IHsgLy8gQXV0aGVudGljYXRlU2Vzc2lvblJlcGx5ICgyMClcclxuICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ0F2YWlsYWJsZSBBdXRoZW50aWNhdGlvbnMgcmVwbHkgcmVjZWl2ZWQuJylcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDkpIHJldHVyblxyXG4gICAgICAgICAgY29uc3QgYXV0aERhdGFMZW4gPSBUeXBlQ29udmVydGVyLlJlYWRJbnRYKHRoaXMuYW10QWNjdW11bGF0b3IsIDUpXHJcbiAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPCA5ICsgYXV0aERhdGFMZW4pIHJldHVyblxyXG4gICAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDEpXHJcbiAgICAgICAgICBjb25zdCBhdXRoVHlwZSA9IHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCg0KVxyXG4gICAgICAgICAgY29uc3QgYXV0aERhdGE6IGFueSA9IFtdXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF1dGhEYXRhTGVuOyBpKyspIHsgYXV0aERhdGEucHVzaCh0aGlzLmFtdEFjY3VtdWxhdG9yLmNoYXJDb2RlQXQoOSArIGkpKSB9XHJcbiAgICAgICAgICBjb25zdCBhdXRoRGF0YUJ1ZiA9IHRoaXMuYW10QWNjdW11bGF0b3Iuc3Vic3RyaW5nKDksIDkgKyBhdXRoRGF0YUxlbilcclxuICAgICAgICAgIGNtZHNpemUgPSA5ICsgYXV0aERhdGFMZW5cclxuXHJcbiAgICAgICAgICBpZiAoYXV0aFR5cGUgPT09IDApIHtcclxuICAgICAgICAgICAgLy8gUXVlcnlcclxuICAgICAgICAgICAgaWYgKGlzVHJ1dGh5KGF1dGhEYXRhLmluY2x1ZGVzKDQpKSkge1xyXG4gICAgICAgICAgICAgIC8vIEdvb2QgRGlnZXN0IEF1dGggKFdpdGggY25vbmNlIGFuZCBhbGwpXHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnR29vZCBEaWdlc3QgQXV0aCAoV2l0aCBjbm9uY2UgYW5kIGFsbCknKVxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDQpICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy51c2VyLmxlbmd0aCArIHRoaXMuYXV0aFVyaS5sZW5ndGggKyA4KSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy51c2VyLmxlbmd0aCkgKyB0aGlzLnVzZXIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MDAsIDB4MDApICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmF1dGhVcmkubGVuZ3RoKSArIHRoaXMuYXV0aFVyaSArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCkpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUcnV0aHkoYXV0aERhdGEuaW5jbHVkZXMoMykpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybignQmFkIERpZ2VzdCBBdXRoJylcclxuICAgICAgICAgICAgICAvLyBCYWQgRGlnZXN0IEF1dGggKE5vdCBzdXJlIHdoeSB0aGlzIGlzIHN1cHBvcnRlZCwgY25vbmNlIGlzIG5vdCB1c2VkISlcclxuICAgICAgICAgICAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDEzLCAweDAwLCAweDAwLCAweDAwLCAweDAzKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRoaXMudXNlci5sZW5ndGggKyB0aGlzLmF1dGhVcmkubGVuZ3RoICsgNykgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMudXNlci5sZW5ndGgpICsgdGhpcy51c2VyICsgU3RyaW5nLmZyb21DaGFyQ29kZSgweDAwLCAweDAwKSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5hdXRoVXJpLmxlbmd0aCkgKyB0aGlzLmF1dGhVcmkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MDAsIDB4MDAsIDB4MDApKVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVHJ1dGh5KGF1dGhEYXRhLmluY2x1ZGVzKDEpKSkge1xyXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ0Jhc2ljIEF1dGgnKVxyXG4gICAgICAgICAgICAgIC8vIEJhc2ljIEF1dGggKFByb2JhYmx5IGEgZ29vZCBpZGVhIHRvIG5vdCBzdXBwb3J0IHRoaXMgdW5sZXNzIHRoaXMgaXMgYW4gb2xkIHZlcnNpb24gb2YgSW50ZWwgQU1UKVxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEpICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy51c2VyLmxlbmd0aCArIHRoaXMucGFzcy5sZW5ndGggKyAyKSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy51c2VyLmxlbmd0aCkgKyB0aGlzLnVzZXIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucGFzcy5sZW5ndGgpICsgdGhpcy5wYXNzKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdBdXRoIFR5cGUgbm90IHJlY29nbml6ZWQuIFN0b3BwaW5nLicpXHJcbiAgICAgICAgICAgICAgdGhpcy5zdG9wKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmICgoYXV0aFR5cGUgPT09IDMgfHwgYXV0aFR5cGUgPT09IDQpICYmIHN0YXR1cyA9PT0gMSkge1xyXG4gICAgICAgICAgICBsZXQgY3VycHRyID0gMFxyXG5cclxuICAgICAgICAgICAgLy8gUmVhbG1cclxuICAgICAgICAgICAgY29uc3QgcmVhbG1sZW4gPSBhdXRoRGF0YUJ1Zi5jaGFyQ29kZUF0KGN1cnB0cilcclxuICAgICAgICAgICAgY29uc3QgcmVhbG0gPSBhdXRoRGF0YUJ1Zi5zdWJzdHJpbmcoY3VycHRyICsgMSwgY3VycHRyICsgMSArIHJlYWxtbGVuKVxyXG4gICAgICAgICAgICBjdXJwdHIgKz0gKHJlYWxtbGVuICsgMSlcclxuXHJcbiAgICAgICAgICAgIC8vIE5vbmNlXHJcbiAgICAgICAgICAgIGNvbnN0IG5vbmNlbGVuID0gYXV0aERhdGFCdWYuY2hhckNvZGVBdChjdXJwdHIpXHJcbiAgICAgICAgICAgIGNvbnN0IG5vbmNlID0gYXV0aERhdGFCdWYuc3Vic3RyaW5nKGN1cnB0ciArIDEsIGN1cnB0ciArIDEgKyBub25jZWxlbilcclxuICAgICAgICAgICAgY3VycHRyICs9IChub25jZWxlbiArIDEpXHJcblxyXG4gICAgICAgICAgICAvLyBRT1BcclxuICAgICAgICAgICAgbGV0IHFvcGxlbiA9IDBcclxuICAgICAgICAgICAgbGV0IHFvcDogYW55ID0gbnVsbFxyXG4gICAgICAgICAgICBjb25zdCBjbm9uY2U6IHN0cmluZyA9IHRoaXMuZ2VuZXJhdGVSYW5kb21Ob25jZSgzMilcclxuICAgICAgICAgICAgY29uc3Qgc25jID0gJzAwMDAwMDAyJ1xyXG4gICAgICAgICAgICBsZXQgZXh0cmEgPSAnJ1xyXG4gICAgICAgICAgICBpZiAoYXV0aFR5cGUgPT09IDQpIHtcclxuICAgICAgICAgICAgICBxb3BsZW4gPSBhdXRoRGF0YUJ1Zi5jaGFyQ29kZUF0KGN1cnB0cilcclxuICAgICAgICAgICAgICBxb3AgPSBhdXRoRGF0YUJ1Zi5zdWJzdHJpbmcoY3VycHRyICsgMSwgY3VycHRyICsgMSArIHFvcGxlbilcclxuICAgICAgICAgICAgICBjdXJwdHIgKz0gKHFvcGxlbiArIDEpXHJcbiAgICAgICAgICAgICAgZXh0cmEgPSBgJHtzbmN9OiR7Y25vbmNlfToke1N0cmluZyhxb3ApfSA6YFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkaWdlc3QgPSB0aGlzLmhleF9tZDUodGhpcy5oZXhfbWQ1KHRoaXMudXNlciArICc6JyArIHJlYWxtICsgJzonICsgdGhpcy5wYXNzKSArICc6JyArIG5vbmNlICsgJzonICsgZXh0cmEgKyB0aGlzLmhleF9tZDUoJ1BPU1Q6JyArIHRoaXMuYXV0aFVyaSkpXHJcbiAgICAgICAgICAgIGxldCB0b3RhbGxlbjogbnVtYmVyID0gdGhpcy51c2VyLmxlbmd0aCArIHJlYWxtLmxlbmd0aCArIG5vbmNlLmxlbmd0aCArIHRoaXMuYXV0aFVyaS5sZW5ndGggKyBjbm9uY2UubGVuZ3RoICsgc25jLmxlbmd0aCArIGRpZ2VzdC5sZW5ndGggKyA3XHJcbiAgICAgICAgICAgIGlmIChhdXRoVHlwZSA9PT0gNCkgdG90YWxsZW4gKz0gKHBhcnNlSW50KHFvcC5sZW5ndGgpICsgMSlcclxuICAgICAgICAgICAgbGV0IGJ1ZjogYW55ID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDEzLCAweDAwLCAweDAwLCAweDAwLCBhdXRoVHlwZSkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyWCh0b3RhbGxlbikgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMudXNlci5sZW5ndGgpICsgdGhpcy51c2VyICsgU3RyaW5nLmZyb21DaGFyQ29kZShyZWFsbS5sZW5ndGgpICsgcmVhbG0gKyBTdHJpbmcuZnJvbUNoYXJDb2RlKG5vbmNlLmxlbmd0aCkgKyBub25jZSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5hdXRoVXJpLmxlbmd0aCkgKyB0aGlzLmF1dGhVcmkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNub25jZS5sZW5ndGgpICsgY25vbmNlICsgU3RyaW5nLmZyb21DaGFyQ29kZShzbmMubGVuZ3RoKSArIHNuYyArIFN0cmluZy5mcm9tQ2hhckNvZGUoZGlnZXN0Lmxlbmd0aCkgKyBkaWdlc3RcclxuICAgICAgICAgICAgaWYgKGF1dGhUeXBlID09PSA0KSBidWYgKz0gKFN0cmluZy5mcm9tQ2hhckNvZGUocW9wLmxlbmd0aCkgKyBxb3ApXHJcbiAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChidWYpXHJcbiAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgIGlmIChzdGF0dXMgPT09IDApIHsgLy8gU3VjY2Vzc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm90b2NvbCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgIC8vIFNlcmlhbC1vdmVyLUxBTjogU2VuZCBJbnRlbCBBTVQgc2VyaWFsIHNldHRpbmdzLi4uXHJcbiAgICAgICAgICAgICAgY29uc3QgTWF4VHhCdWZmZXIgPSAxMDAwMFxyXG4gICAgICAgICAgICAgIGNvbnN0IFR4VGltZW91dCA9IDEwMFxyXG4gICAgICAgICAgICAgIGNvbnN0IFR4T3ZlcmZsb3dUaW1lb3V0ID0gMFxyXG4gICAgICAgICAgICAgIGNvbnN0IFJ4VGltZW91dCA9IDEwMDAwXHJcbiAgICAgICAgICAgICAgY29uc3QgUnhGbHVzaFRpbWVvdXQgPSAxMDBcclxuICAgICAgICAgICAgICBjb25zdCBIZWFydGJlYXQgPSAwLy8gNTAwMDtcclxuICAgICAgICAgICAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDIwLCAweDAwLCAweDAwLCAweDAwKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRoaXMuYW10U2VxdWVuY2UrKykgKyBUeXBlQ29udmVydGVyLlNob3J0VG9TdHJYKE1heFR4QnVmZmVyKSArXHJcbiAgICAgICAgICAgICAgICAgIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0clgoVHhUaW1lb3V0KSArIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0clgoVHhPdmVyZmxvd1RpbWVvdXQpICsgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChSeFRpbWVvdXQpICtcclxuICAgICAgICAgICAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChSeEZsdXNoVGltZW91dCkgKyBUeXBlQ29udmVydGVyLlNob3J0VG9TdHJYKEhlYXJ0YmVhdCkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyWCgwKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm90b2NvbCA9PT0gMikge1xyXG4gICAgICAgICAgICAgIC8vIFJlbW90ZSBEZXNrdG9wOiBTZW5kIHRyYWZmaWMgZGlyZWN0bHkuLi5cclxuICAgICAgICAgICAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDQwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm90b2NvbCA9PT0gMykge1xyXG4gICAgICAgICAgICAgIC8vIFJlbW90ZSBJREVSOiBTZW5kIHRyYWZmaWMgZGlyZWN0bHkuLi5cclxuICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RTdGF0ZSA9IDFcclxuICAgICAgICAgICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoMylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHRoaXMuc3RvcCgpXHJcbiAgICAgICAgICBicmVhayB9XHJcbiAgICAgICAgY2FzZSAweDIxOiB7IC8vIFJlc3BvbnNlIHRvIHNldHRpbmdzICgzMylcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDIzKSBicmVha1xyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnUmVzcG9uc2UgdG8gc2V0dGluZ3MnKVxyXG4gICAgICAgICAgY21kc2l6ZSA9IDIzXHJcbiAgICAgICAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDI3LCAweDAwLCAweDAwLCAweDAwKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRoaXMuYW10U2VxdWVuY2UrKykgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MDAsIDB4MDAsIDB4MUIsIDB4MDAsIDB4MDAsIDB4MDApKVxyXG4gICAgICAgICAgaWYgKHRoaXMucHJvdG9jb2wgPT09IDEpIHsgdGhpcy5hbXRLZWVwQWxpdmVUaW1lciA9IHNldEludGVydmFsKHRoaXMuc2VuZEFtdEtlZXBBbGl2ZS5iaW5kKHRoaXMpLCAyMDAwKSB9XHJcbiAgICAgICAgICB0aGlzLmNvbm5lY3RTdGF0ZSA9IDFcclxuICAgICAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgzKVxyXG4gICAgICAgICAgYnJlYWsgfVxyXG4gICAgICAgIGNhc2UgMHgyOTogLy8gU2VyaWFsIFNldHRpbmdzICg0MSlcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDEwKSBicmVha1xyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnU2VyaWFsIFNldHRpbmdzJylcclxuICAgICAgICAgIGNtZHNpemUgPSAxMFxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlIDB4MkE6IHsgLy8gSW5jb21pbmcgZGlzcGxheSBkYXRhICg0MilcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDEwKSBicmVha1xyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnSW5jb21pbmcgZGlzcGxheSBkYXRhJylcclxuICAgICAgICAgIGNvbnN0IGNzID0gKDEwICsgKCh0aGlzLmFtdEFjY3VtdWxhdG9yLmNoYXJDb2RlQXQoOSkgJiAweEZGKSA8PCA4KSArICh0aGlzLmFtdEFjY3VtdWxhdG9yLmNoYXJDb2RlQXQoOCkgJiAweEZGKSlcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IGNzKSBicmVha1xyXG4gICAgICAgICAgdGhpcy5vblByb2Nlc3NEYXRhKHRoaXMuYW10QWNjdW11bGF0b3Iuc3Vic3RyaW5nKDEwLCBjcykpXHJcbiAgICAgICAgICBjbWRzaXplID0gY3NcclxuICAgICAgICAgIGJyZWFrIH1cclxuICAgICAgICBjYXNlIDB4MkI6IC8vIEtlZXAgYWxpdmUgbWVzc2FnZSAoNDMpXHJcbiAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPCA4KSBicmVha1xyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnS2VlcCBBbHZlIG1lc3NhZ2UnKVxyXG4gICAgICAgICAgY21kc2l6ZSA9IDhcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAweDQxOlxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgOCkgYnJlYWtcclxuICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ0tWTSB0cmFmZmljLiBDYWxsIG9uU3RhcnQgaGFuZGxlci4gQW5kIGZvcndhcmQgcmVzdCBvZiBhY2MgZGlyZWN0bHkuJylcclxuICAgICAgICAgIHRoaXMuY29ubmVjdFN0YXRlID0gMVxyXG4gICAgICAgICAgdGhpcy5vblN0YXJ0KClcclxuICAgICAgICAgIC8vIEtWTSB0cmFmZmljLCBmb3J3YXJkIHJlc3Qgb2YgYWNjdW11bGF0b3IgZGlyZWN0bHkuXHJcbiAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPiA4KSB7IHRoaXMub25Qcm9jZXNzRGF0YSh0aGlzLmFtdEFjY3VtdWxhdG9yLnN1YnN0cmluZyg4KSkgfVxyXG4gICAgICAgICAgY21kc2l6ZSA9IHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihgVW5rbm93biBJbnRlbCBBTVQgY29tbWFuZDogICR7dGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDApfSAgYWNjbGVuPSR7dGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGh9YClcclxuICAgICAgICAgIHRoaXMuc3RvcCgpXHJcbiAgICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBpZiAoY21kc2l6ZSA9PT0gMCkgcmV0dXJuXHJcbiAgICAgIHRoaXMuYW10QWNjdW11bGF0b3IgPSB0aGlzLmFtdEFjY3VtdWxhdG9yLnN1YnN0cmluZyhjbWRzaXplKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGV4X21kNSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnTUQ1IHRoZSBzdHJpbmcnKVxyXG4gICAgcmV0dXJuIG1kNShzdHIpXHJcbiAgfVxyXG5cclxuICBzb2NrZXRTZW5kIChkYXRhOiBzdHJpbmcpOiBhbnkgeyAvLyB4eFNlbmRcclxuICAgIGlmIChpc1RydXRoeSh0aGlzLnVybHZhcnMpICYmIGlzVHJ1dGh5KHRoaXMudXJsdmFycy5yZWRpcnRyYWNlKSkgeyB0aGlzLmxvZ2dlci52ZXJib3NlKGBSRURJUi1TRU5EKCR7ZGF0YS5sZW5ndGh9KTogJHtUeXBlQ29udmVydGVyLnJzdHIyaGV4KGRhdGEpfWApIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAodGhpcy5zb2NrZXQgIT0gbnVsbCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSAxKSB7IC8vIDEgPSBXZWJTb2NrZXQuT1BFTlxyXG4gICAgICAgIGNvbnN0IGIgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aClcclxuICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKGBSZWRpciBTZW5kKCAke2RhdGEubGVuZ3RofSk6ICR7VHlwZUNvbnZlcnRlci5yc3RyMmhleChkYXRhKX1gKVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkgeyBiW2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpIH1cclxuICAgICAgICB0aGlzLnNvY2tldC5zZW5kKGIuYnVmZmVyKVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgU29ja2V0IHNlbmQgZXJyb3I6ICR7U3RyaW5nKGVycm9yKX1gKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZCBzZW5kcyBkYXRhIG92ZXIgdGhlIHdlYnNvY2tldCB0byB0aGUgc2VydmVyLlxyXG4gICAqIEBwYXJhbSBkYXRhIGRhdGEgdG8gc2VuZCB0byBzZXJ2ZXJcclxuICAgKi9cclxuICBzZW5kIChkYXRhOiBzdHJpbmcpOiBhbnkgeyAvLyBzZW5kXHJcbiAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdTZW5kIGNhbGxlZCAnICsgZGF0YSlcclxuICAgIGlmICh0aGlzLnNvY2tldCA9PSBudWxsIHx8IHRoaXMuY29ubmVjdFN0YXRlICE9PSAxKSByZXR1cm5cclxuICAgIGlmICh0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5TT0wpIHtcclxuICAgICAgdGhpcy5zb2NrZXRTZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMHgyOCwgMHgwMCwgMHgwMCwgMHgwMCkgK1xyXG4gICAgICAgIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRoaXMuYW10U2VxdWVuY2UrKykgK1xyXG4gICAgICAgIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0clgoZGF0YS5sZW5ndGgpICtcclxuICAgICAgICBkYXRhKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zb2NrZXRTZW5kKGRhdGEpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZW5kQW10S2VlcEFsaXZlICgpOiBhbnkge1xyXG4gICAgaWYgKHRoaXMuc29ja2V0ID09IG51bGwpIHJldHVyblxyXG4gICAgdGhpcy5zb2NrZXRTZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMHgyQiwgMHgwMCwgMHgwMCwgMHgwMCkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyWCh0aGlzLmFtdFNlcXVlbmNlKyspKVxyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVSYW5kb21Ob25jZSAobGVuZ3RoOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHI6IHN0cmluZyA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7IHIgKz0gdGhpcy5yYW5kb21Ob25jZUNoYXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLnJhbmRvbU5vbmNlQ2hhcnMubGVuZ3RoKSkgfVxyXG4gICAgcmV0dXJuIHJcclxuICB9XHJcblxyXG4gIG9uU29ja2V0Q2xvc2VkIChlOiBFdmVudCk6IGFueSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlKVxyXG4gICAgaWYgKGlzVHJ1dGh5KHRoaXMudXJsdmFycykgJiYgaXNUcnV0aHkodGhpcy51cmx2YXJzLnJlZGlydHJhY2UpKSB7IGNvbnNvbGUubG9nKCdSRURJUi1DTE9TRUQnKSB9XHJcbiAgICB0aGlzLmxvZ2dlci53YXJuKCdSZWRpciBTb2NrZXQgQ2xvc2VkJylcclxuICAgIHRoaXMuc3RvcCgpXHJcbiAgfVxyXG5cclxuICBvblN0YXRlQ2hhbmdlIChuZXdzdGF0ZTogbnVtYmVyKTogYW55IHtcclxuICAgIGNvbnNvbGUuaW5mbygnb25zdGF0ZWNoYW5nZScsIG5ld3N0YXRlKVxyXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IG5ld3N0YXRlKSByZXR1cm5cclxuICAgIHRoaXMuc3RhdGUgPSBuZXdzdGF0ZVxyXG4gICAgdGhpcy5vbk5ld1N0YXRlKHRoaXMuc3RhdGUpXHJcbiAgICBpZiAodGhpcy5vblN0YXRlQ2hhbmdlZCAhPSBudWxsKSB0aGlzLm9uU3RhdGVDaGFuZ2VkKHRoaXMsIHRoaXMuc3RhdGUpXHJcbiAgfVxyXG5cclxuICBzdG9wICgpOiB2b2lkIHtcclxuICAgIHRoaXMubG9nZ2VyLndhcm4oJ1N0b3AgY2FsbGVkIG9uIFJlZGlyZWN0b3IuIENoYW5nZSBzdGF0ZSB0byAwIGFuZCBjbG9zZSBTb2NrZXQuJylcclxuICAgIHRoaXMub25TdGF0ZUNoYW5nZSgwKVxyXG4gICAgdGhpcy5jb25uZWN0U3RhdGUgPSAtMVxyXG4gICAgdGhpcy5hbXRBY2N1bXVsYXRvciA9ICcnXHJcbiAgICBpZiAodGhpcy5zb2NrZXQgIT0gbnVsbCkgeyB0aGlzLnNvY2tldC5jbG9zZSgpOyB0aGlzLnNvY2tldCA9IG51bGwgfVxyXG4gICAgaWYgKHRoaXMuYW10S2VlcEFsaXZlVGltZXIgIT0gbnVsbCkgeyBjbGVhckludGVydmFsKHRoaXMuYW10S2VlcEFsaXZlVGltZXIpOyB0aGlzLmFtdEtlZXBBbGl2ZVRpbWVyID0gbnVsbCB9XHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlUG93ZXJBY3Rpb25zID0gW1xyXG4gIHsgdmFsdWU6ICcyJywgbGFiZWw6ICdQb3dlciBVcCcgfSxcclxuICB7IHZhbHVlOiAnMTAxJywgbGFiZWw6ICdSZXNldCBUbyBCSU9TJyB9LFxyXG4gIHsgdmFsdWU6ICc0JywgbGFiZWw6ICdTbGVlcCcgfSxcclxuICB7IHZhbHVlOiAnNScsIGxhYmVsOiAnUG93ZXIgQ3ljbGUnIH0sXHJcbiAgeyB2YWx1ZTogJzcnLCBsYWJlbDogJ0hpYmVybmF0ZScgfSxcclxuICB7IHZhbHVlOiAnOCcsIGxhYmVsOiAnUG93ZXIgRG93bicgfSxcclxuICB7IHZhbHVlOiAnMTAnLCBsYWJlbDogJ1Jlc2V0JyB9LFxyXG4gIHsgdmFsdWU6ICcxMicsIGxhYmVsOiAnU29mdC1PZmYnIH0sXHJcbiAgeyB2YWx1ZTogJzE0JywgbGFiZWw6ICdTb2Z0IFJlc2V0JyB9LFxyXG4gIHsgdmFsdWU6ICcxMDAnLCBsYWJlbDogJ1Bvd2VyIFVwIFRvIEJJT1MnIH0sXHJcbiAgeyB2YWx1ZTogJzQwMCcsIGxhYmVsOiAnUmVzZXQgVG8gUFhFJyB9LFxyXG4gIHsgdmFsdWU6ICc0MDEnLCBsYWJlbDogJ1Bvd2VyIFVwIFRvIFBYRScgfVxyXG5dXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QWN0aW9uQnlJZCA9IChhY3Rpb24pOiBhbnkgPT4gYWN0aW9uID09PSAyID8gJ1Bvd2VyIFVwJyA6IGFjdGlvbiA9PT0gOCA/ICdQb3dlciBPZmYnIDogYWN0aW9uID09PSA1ID8gJ1Bvd2VyIEN5Y2xlJyA6IGFjdGlvbiA9PT0gMTAgPyAnUmVzZXQnIDogYWN0aW9uID09PSAxMiA/ICdTb2Z0IE9mZicgOiBhY3Rpb24gPT09IDE0ID8gJ1NvZnQgUmVzZXQnIDogYWN0aW9uID09PSA0ID8gJ1NsZWVwJyA6IGFjdGlvbiA9PT0gNyA/ICdIaWJlcm5hdGUnIDogYWN0aW9uID09PSAxMDAgPyAnUG93ZXIgVXAgVG8gQklPUycgOiBhY3Rpb24gPT09IDEwMSA/ICdSZXNldCBUbyBCSU9TJyA6IG51bGxcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBJTG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJy4vSUxvZ2dlcidcclxuXHJcbi8qKlxyXG4gKiBDb25zb2xlTG9nZ2VyIGltcGxlbWVudHMgSUxvZ2dlciB0byBwcm92aWRlIGJhc2ljIGNvbnNvbGUgbG9nZ2luZyBmdW5jdGlvbmFsaXR5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbnNvbGVMb2dnZXIgaW1wbGVtZW50cyBJTG9nZ2VyIHtcclxuICBtaW5MZXZlbDogTG9nTGV2ZWxcclxuICBjb25zdHJ1Y3RvciAobGV2ZWw6IExvZ0xldmVsKSB7XHJcbiAgICB0aGlzLm1pbkxldmVsID0gbGV2ZWxcclxuICB9XHJcblxyXG4gIGxvZyAobGV2ZWw6IExvZ0xldmVsLCBkYXRhOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAobGV2ZWwpIHtcclxuICAgICAgY2FzZSBMb2dMZXZlbC5WRVJCT1NFOlxyXG4gICAgICAgIHRoaXMudmVyYm9zZShkYXRhKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgTG9nTGV2ZWwuSU5GTzpcclxuICAgICAgICB0aGlzLmluZm8oZGF0YSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIExvZ0xldmVsLkRFQlVHOlxyXG4gICAgICAgIHRoaXMuZGVidWcoZGF0YSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIExvZ0xldmVsLldBUk5JTkc6XHJcbiAgICAgICAgdGhpcy53YXJuKGRhdGEpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSBMb2dMZXZlbC5FUlJPUjpcclxuICAgICAgICB0aGlzLmVycm9yKGRhdGEpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVha1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVidWcgKGxvZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5taW5MZXZlbCA+PSBMb2dMZXZlbC5ERUJVRykgY29uc29sZS5kZWJ1Zyhsb2cpXHJcbiAgfVxyXG5cclxuICBpbmZvIChsb2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWluTGV2ZWwgPj0gTG9nTGV2ZWwuSU5GTykgY29uc29sZS5pbmZvKGxvZylcclxuICB9XHJcblxyXG4gIGVycm9yIChsb2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWluTGV2ZWwgPj0gTG9nTGV2ZWwuRVJST1IpIGNvbnNvbGUuZXJyb3IobG9nKVxyXG4gIH1cclxuXHJcbiAgd2FybiAobG9nOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm1pbkxldmVsID49IExvZ0xldmVsLldBUk5JTkcpIGNvbnNvbGUud2Fybihsb2cpXHJcbiAgfVxyXG5cclxuICB2ZXJib3NlIChsb2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWluTGV2ZWwgPj0gTG9nTGV2ZWwuVkVSQk9TRSkgY29uc29sZS5sb2cobG9nKVxyXG4gIH1cclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG93ZXJPcHRpb25Qcm9wcyB7XHJcbiAgYXZhaWxhYmxlT3B0aW9uczogYW55XHJcbiAgb25DaGFuZ2U6IGFueVxyXG4gIGlzU2VsZWN0ZWQ6IGJvb2xlYW5cclxuICBvbkJsdXI/OiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBQb3dlck9wdGlvbnM6IFJlYWN0LlNGQzxQb3dlck9wdGlvblByb3BzPiA9IHByb3BzID0+IDxzZWxlY3Qgb25DbGljaz17cHJvcHMub25DaGFuZ2V9IG5hbWU9J1Bvd2VyT3B0aW9ucyc+XHJcbiAgPG9wdGlvbiB2YWx1ZT0nJyBzZWxlY3RlZD17IXByb3BzLmlzU2VsZWN0ZWR9PkNob29zZTwvb3B0aW9uPlxyXG4gIHtwcm9wcy5hdmFpbGFibGVPcHRpb25zLm1hcCgoeyB2YWx1ZSwgbGFiZWwgfSkgPT4gKFxyXG4gICAgPG9wdGlvbiBrZXk9e3ZhbHVlfSB2YWx1ZT17dmFsdWV9PlxyXG4gICAgICB7bGFiZWx9XHJcbiAgICA8L29wdGlvbj5cclxuICApKX1cclxuPC9zZWxlY3Q+XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDIwXHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBnZXRQb3dlclN0YXRlIH0gZnJvbSAnLi4vc2VydmljZXMvUG93ZXJBY3Rpb25TZXJ2aWNlcydcclxuaW1wb3J0IHsgRG9tYWluQ29udGV4dCB9IGZyb20gJy4vY29udGV4dC9CYXNpY0NvbnRleHRQcm92aWRlcidcclxuaW1wb3J0IHsgaXNGYWxzeSB9IGZyb20gJy4vVXRpbGl0aWVzJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQb3dlclN0YXRlUHJvcHMge1xyXG4gIGRldmljZUlkOiBzdHJpbmcgfCBudWxsXHJcbiAgc2VydmVyOiBzdHJpbmcgfCBudWxsXHJcbiAgaGFuZGxlUG93ZXJTdGF0dXM6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgdXBkYXRlUGFyZW50OiAoKSA9PiB2b2lkXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmljIGNsYXNzIHRvIGZldGNoIHRoZSBBTVQgRGV2aWNlIFBvd2VyIHN0YXRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUG93ZXJTdGF0ZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQb3dlclN0YXRlUHJvcHMsIHsgcG93ZXJTdGF0ZTogbnVtYmVyIH0+IHtcclxuICB0aW1lSW50ZXJ2YWw6IGFueVxyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBwb3dlclN0YXRlOiAwXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKTogdm9pZCB7XHJcbiAgICB0aGlzLmdldEFtdFBvd2VyU3RhdGUoKVxyXG4gICAgdGhpcy50aW1lSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmdldEFtdFBvd2VyU3RhdGUoKSwgMTUwMDApXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKTogdm9pZCB7XHJcbiAgICBjbGVhckludGVydmFsKHRoaXMudGltZUludGVydmFsKVxyXG4gIH1cclxuXHJcbiAgLyoqIEZldGNoIHRoZSBQb3dlciBzdGF0ZSBmcm9tIEFNVCBEZXZpY2UgKi9cclxuICBnZXRBbXRQb3dlclN0YXRlID0gKCk6IGFueSA9PiB7XHJcbiAgICBnZXRQb3dlclN0YXRlKHRoaXMucHJvcHMuZGV2aWNlSWQsIHRoaXMucHJvcHMuc2VydmVyLCB0aGlzLmNvbnRleHQuZGF0YS5tcHNLZXkpXHJcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIHRoaXMucHJvcHMudXBkYXRlUGFyZW50KClcclxuICAgICAgICBpZiAoaXNGYWxzeShkYXRhLnBvd2Vyc3RhdGUpKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgcG93ZXJTdGF0ZTogZGF0YS5wb3dlcnN0YXRlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgcG93ZXJTdGF0ZTogMTAwXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRhLnBvd2Vyc3RhdGUgPT09IDIgPyB0aGlzLnByb3BzLmhhbmRsZVBvd2VyU3RhdHVzKCdwb3dlcm9uJykgOiB0aGlzLnN0YXRlLnBvd2VyU3RhdGUgIT09IDEwMCA/IHRoaXMucHJvcHMuaGFuZGxlUG93ZXJTdGF0dXMoJ3NsZWVwJykgOiB0aGlzLnByb3BzLmhhbmRsZVBvd2VyU3RhdHVzKCdmYWlsZWQnKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbygnZXJyb3InLCBlcnJvcilcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlclBvd2VyU3RhdGUgPSAocGFyYW0pOiBhbnkgPT4ge1xyXG4gICAgc3dpdGNoIChwYXJhbSkge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgIGNhc2UgMTA6XHJcbiAgICAgIGNhc2UgMTE6XHJcbiAgICAgIGNhc2UgMTQ6XHJcbiAgICAgIGNhc2UgMTc6XHJcbiAgICAgICAgcmV0dXJuIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fT5PdGhlcjwvc3Bhbj5cclxuICAgICAgY2FzZSAyOlxyXG4gICAgICAgIHJldHVybiA8c3BhbiBzdHlsZT17eyBjb2xvcjogJ2dyZWVuJyB9fT5Qb3dlciBvbjwvc3Bhbj5cclxuICAgICAgY2FzZSAzOlxyXG4gICAgICBjYXNlIDQ6XHJcbiAgICAgICAgcmV0dXJuIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fT5kZWVwIHNsZWVwPC9zcGFuPlxyXG4gICAgICBjYXNlIDU6XHJcbiAgICAgIGNhc2UgNjpcclxuICAgICAgY2FzZSA4OlxyXG4gICAgICBjYXNlIDk6XHJcbiAgICAgIGNhc2UgMTI6XHJcbiAgICAgIGNhc2UgMTM6XHJcbiAgICAgIGNhc2UgMTU6XHJcbiAgICAgIGNhc2UgMTY6XHJcbiAgICAgICAgcmV0dXJuIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fT5Qb3dlciBPZmY8L3NwYW4+XHJcbiAgICAgIGNhc2UgNzpcclxuICAgICAgICByZXR1cm4gPHNwYW4gc3R5bGU9e3sgY29sb3I6ICdyZWQnIH19PkhpYmVybmF0ZTwvc3Bhbj5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gPHNwYW4gc3R5bGU9e3sgY29sb3I6ICdyZWQnIH19PlVua25vd248L3NwYW4+XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICBjb25zdCB7IHBvd2VyU3RhdGUgfSA9IHRoaXMuc3RhdGVcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMucmVuZGVyUG93ZXJTdGF0ZShwb3dlclN0YXRlKVxyXG4gICAgLy8gcG93ZXJTdGF0ZSA9PT0gNCA/ICg8c3BhbiBzdHlsZT17eyBjb2xvcjogXCJyZWRcIiB9fT5kZWVwIHNsZWVwIDwvc3Bhbj4pIDogcG93ZXJTdGF0ZSA9PT0gMiA/ICg8c3BhbiBzdHlsZT17eyBjb2xvcjogXCJncmVlblwiIH19PlBvd2VyIG9uIDwvc3Bhbj4pIDogKDxzcGFuPnVua25vd248L3NwYW4+KVxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuUG93ZXJTdGF0ZS5jb250ZXh0VHlwZSA9IERvbWFpbkNvbnRleHRcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAyMFxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBTdHlsZSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IHsgaXNGYWxzeSB9IGZyb20gJy4vVXRpbGl0aWVzJ1xyXG5cclxuY29uc3QgQ2hlY2tib3hDb250YWluZXIgPSBTdHlsZS5kaXZgXHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbmBcclxuXHJcbmNvbnN0IEljb24gPSBTdHlsZS5zdmdgXHJcbiAgZmlsbDogbm9uZTtcclxuICBzdHJva2U6IGdyZWVuO1xyXG4gIHN0cm9rZS13aWR0aDogMnB4O1xyXG5gXHJcblxyXG5jb25zdCBIaWRkZW5DaGVja2JveCA9IFN0eWxlLmlucHV0LmF0dHJzKHsgdHlwZTogJ2NoZWNrYm94JyB9KWBcclxuICBib3JkZXI6IDA7XHJcbiAgY2xpcDogcmVjdCgwIDAgMCAwKTtcclxuICBjbGlwcGF0aDogaW5zZXQoNTAlKTtcclxuICBoZWlnaHQ6IDFweDtcclxuICBtYXJnaW46IC0xcHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBwYWRkaW5nOiAwO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gIHdpZHRoOiAxcHg7XHJcbmBcclxuXHJcbmNvbnN0IFN0eWxlZENoZWNrYm94ID0gU3R5bGUuZGl2YFxyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICB3aWR0aDogMTZweDtcclxuICBoZWlnaHQ6IDE2cHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyBkaXNhYmxlQ2hlY2tib3ggfSkgPT4gZ2V0Q29sb3IoZGlzYWJsZUNoZWNrYm94KX07XHJcbiAgYm9yZGVyLXJhZGl1czogMXB4IHNvbGlkIGJsYWNrO1xyXG4gIHRyYW5zaXRpb246IGFsbCAxNTBtcztcclxuXHJcbiAgJHtIaWRkZW5DaGVja2JveH06Zm9jdXMgKyAmIHtcclxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB3aGl0ZTtcclxuICB9XHJcblxyXG4gICR7SWNvbn0ge1xyXG4gICAgdmlzaWJpbGl0eTogJHtwcm9wcyA9PiAoaXNGYWxzeShwcm9wcy5jaGVja2VkKSA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nKX1cclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IGdldENvbG9yID0gKGRpc2FibGVDaGVja2JveCk6IHN0cmluZyA9PiBkaXNhYmxlQ2hlY2tib3ggPT09IHRydWUgPyAnI2NjYycgOiAnd2hpdGUnXHJcbi8qKiBHZW5lcmljIHByZXNlbnRhdGlvbmFsIGZ1bmN0aW9uIGZvciBDaGVja2JveCAqL1xyXG5leHBvcnQgY29uc3QgQ2hlY2tib3ggPSAoeyBjbGFzc05hbWUsIGNoZWNrZWQsIGRpc2FibGVDaGVja2JveCwgLi4ucHJvcHMgfSk6IEpTWC5FbGVtZW50ID0+IChcclxuICA8Q2hlY2tib3hDb250YWluZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxyXG4gICAgPEhpZGRlbkNoZWNrYm94IGNoZWNrZWQ9e2NoZWNrZWR9IHsuLi5wcm9wc30gZGlzYWJsZWQ9e2Rpc2FibGVDaGVja2JveH0vPlxyXG4gICAgPFN0eWxlZENoZWNrYm94IGNoZWNrZWQ9e2NoZWNrZWR9IGRpc2FibGVDaGVja2JveD17ZGlzYWJsZUNoZWNrYm94fT5cclxuICAgICAgPEljb24gdmlld0JveD1cIjAgMCAyNCAyNFwiPlxyXG4gICAgICAgIDxwb2x5bGluZSBwb2ludHM9XCIyMCA2IDkgMTcgNCAxMlwiIC8+XHJcbiAgICAgIDwvSWNvbj5cclxuICAgIDwvU3R5bGVkQ2hlY2tib3g+XHJcbiAgPC9DaGVja2JveENvbnRhaW5lcj5cclxuKVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAyMFxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBnZXRBbXRGZWF0dXJlcywgc2V0QW10RmVhdHVyZXMgfSBmcm9tICcuLi9zZXJ2aWNlcy9BbXRGZWF0dXJlc1NlcnZpY2VzJ1xyXG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4uL3NoYXJlZC9DaGVja2JveCdcclxuaW1wb3J0IFNuYWNrQmFyIGZyb20gJy4uL3NoYXJlZC9TbmFja0JhcidcclxuaW1wb3J0IHsgdHJhbnNsYXRlVGV4dCwgdHJhbnNsYXRlRHluYW1pY1RleHQgfSBmcm9tICcuL01ldGhvZHMnXHJcblxyXG5pbXBvcnQgJy4vYW10ZmVhdHVyZXMuc2NzcydcclxuaW1wb3J0IHsgRG9tYWluQ29udGV4dCB9IGZyb20gJy4vY29udGV4dC9CYXNpY0NvbnRleHRQcm92aWRlcidcclxuXHJcbi8qKlxyXG4gKiBpbnRlcmZhY2UgZm9yIGlucHV0IHByb3BzIHRvIEFNVEZlYXR1cmVzIGNsYXNzXHJcbiAqIGRldmljZUlkIC0tIGd1aWQgb2YgdGhlIEFNVCBkZXZpY2VcclxuICogc2VydmVyIC0tIE1QUyBzZXJ2ZXIgYWRkcmVzcyhJUDpwb3J0KVxyXG4gKiBmZWF0dXJlIC0tIEluZGljYXRlcyB3aGljaCBjb250cm9sIGlzIGJlaW5nIGFjY2Vzc2VkKEtWTSwgU09MKVxyXG4gKiBoYW5kbGVGZWF0dXJlU3RhdHVzIC0tIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgU25hY2tCYXIgbWVzc2FnZXNcclxuICogZ2V0Q29ubmVjdFN0YXRlIC0tIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGdldCB0aGUgS1ZNIG9yIFNPTCBjb25uZWN0aW9uIHN0YXRlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFtdEZlYXR1cmVQcm9wcyB7XHJcbiAgZGV2aWNlSWQ6IHN0cmluZyB8IG51bGxcclxuICBzZXJ2ZXI6IHN0cmluZyB8IG51bGxcclxuICBmZWF0dXJlOiBzdHJpbmdcclxuICBoYW5kbGVGZWF0dXJlU3RhdHVzOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZFxyXG4gIGdldENvbm5lY3RTdGF0ZTogKCkgPT4gbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQW10RmVhdHVyZVN0YXRlIHtcclxuICBjaGVja2VkOiBib29sZWFuXHJcbiAgdXNlckNvbnNlbnQ6IHN0cmluZ1xyXG4gIHVzZUtWTTogYm9vbGVhblxyXG4gIHVzZVNPTDogYm9vbGVhblxyXG4gIHVzZUlERVI6IGJvb2xlYW5cclxuICByZWRpcmVjdGlvbjogYm9vbGVhblxyXG4gIHNob3dNZXNzYWdlOiBib29sZWFuXHJcbiAgbWVzc2FnZTogc3RyaW5nXHJcbiAgdHlwZTogc3RyaW5nXHJcbn1cclxuXHJcbi8qKiBHZW5lcmljIGNsYXNzIHRvIGdldCBhbmQgc2V0IHRoZSBBTVQgZmVhdHVyZXMgbGlrZSBLVk0sIFNPTFxyXG4gKiBmZWF0dXJlIHByb3AgZm9yIHRoaXMgY2xhc3MgZGV0ZXJtaW5lcyB3aGV0aGVyIHdlIGFyZSBvbiBLVk0gb3IgU09MIHBhZ2VcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBbXRGZWF0dXJlcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxBbXRGZWF0dXJlUHJvcHMsIEFtdEZlYXR1cmVTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBjaGVja2VkOiBmYWxzZSxcclxuICAgICAgdXNlckNvbnNlbnQ6ICcnLFxyXG4gICAgICB1c2VLVk06IGZhbHNlLFxyXG4gICAgICB1c2VTT0w6IGZhbHNlLFxyXG4gICAgICB1c2VJREVSOiBmYWxzZSxcclxuICAgICAgcmVkaXJlY3Rpb246IGZhbHNlLFxyXG4gICAgICBzaG93TWVzc2FnZTogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICB0eXBlOiAnJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCk6IHZvaWQge1xyXG4gICAgdGhpcy5mZXRjaEFtdEZlYXR1cmVzKClcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgdGhlIEFNVCBEZXZpY2UgZmVhdHVyZXMgICovXHJcbiAgZmV0Y2hBbXRGZWF0dXJlcyA9ICgpOiBhbnkgPT4ge1xyXG4gICAgY29uc3QgbXBzU2VydmVyOiBzdHJpbmcgPSB0aGlzLnByb3BzLnNlcnZlciAhPSBudWxsID8gdGhpcy5wcm9wcy5zZXJ2ZXIgOiAnJ1xyXG4gICAgZ2V0QW10RmVhdHVyZXModGhpcy5wcm9wcy5kZXZpY2VJZCwgbXBzU2VydmVyLCB0aGlzLmNvbnRleHQuZGF0YS5tcHNLZXkpXHJcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhLnN0YXR1c2NvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHVzZXJDb25zZW50OiBkYXRhLnBheWxvYWQudXNlckNvbnNlbnQsXHJcbiAgICAgICAgICAgIHVzZUtWTTogZGF0YS5wYXlsb2FkLktWTSxcclxuICAgICAgICAgICAgdXNlU09MOiBkYXRhLnBheWxvYWQuU09MLFxyXG4gICAgICAgICAgICB1c2VJREVSOiBkYXRhLnBheWxvYWQuSURFUixcclxuICAgICAgICAgICAgcmVkaXJlY3Rpb246IGRhdGEucGF5bG9hZC5yZWRpcmVjdGlvblxyXG4gICAgICAgICAgfSwgKCkgPT4gdGhpcy51cGRhdGVDaGVja2JveFN0YXR1cygpKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZlYXR1cmVTdGF0dXMoJ2ZhaWxlZCcpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgLmNhdGNoKCgpID0+IGNvbnNvbGUuaW5mbygnZXJyb3InKSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgICogQmluZCB0aGUgY2hlY2tib3ggc3RhdHVzIGJhc2VkIG9uIHRoZSBmZWF0dXJlIGFuZCB0aGUgZmVhdHVyZSByZXNwb25zZSBmcm9tIHRoZSBBTVQgZGV2aWNlXHJcbiAgICAgKi9cclxuICB1cGRhdGVDaGVja2JveFN0YXR1cyA9ICgpOiB2b2lkID0+IHtcclxuICAgIGNvbnN0IHsgZmVhdHVyZSB9ID0gdGhpcy5wcm9wc1xyXG4gICAgY29uc3QgeyB1c2VLVk0sIHVzZVNPTCwgdXNlSURFUiwgcmVkaXJlY3Rpb24gfSA9IHRoaXMuc3RhdGVcclxuICAgIGlmIChyZWRpcmVjdGlvbiAmJiAoKGZlYXR1cmUgPT09IHRyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLmZlYXR1cmVzLmt2bScpICYmIHVzZUtWTSkgfHwgKGZlYXR1cmUgPT09IHRyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLmZlYXR1cmVzLnNvbCcpICYmIHVzZVNPTCkgfHwgKGZlYXR1cmUgPT09ICdJREVSJyAmJiB1c2VJREVSKSkpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY2hlY2tlZDogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgICB0aGlzLnByb3BzLmhhbmRsZUZlYXR1cmVTdGF0dXMoJ2VuYWJsZWQnKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGZWF0dXJlU3RhdHVzKCdub3RFbmFibGVkJylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBTZXQgQU1UIGZlYXR1cmVzIG9uIGNsaWNrIG9mIGNoZWNrYm94ICovXHJcbiAgc2V0QW10RmVhdHVyZSA9ICgpOiBhbnkgPT4ge1xyXG4gICAgY29uc3QgeyBkZXZpY2VJZCwgZmVhdHVyZSwgc2VydmVyLCBoYW5kbGVGZWF0dXJlU3RhdHVzIH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCB7IHVzZUtWTSwgdXNlSURFUiwgdXNlU09MLCBjaGVja2VkIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBjb25zdCBmZWF0dXJlU3RhdHVzVGV4dCA9IGNoZWNrZWQgPyB0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5lbmFibGVkJykgOiB0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5kaXNhYmxlZCcpXHJcbiAgICBjb25zdCBtcHNTZXJ2ZXI6IHN0cmluZyA9IHNlcnZlciAhPSBudWxsID8gc2VydmVyIDogJydcclxuICAgIGhhbmRsZUZlYXR1cmVTdGF0dXMoJ2VuYWJsZWQnKVxyXG4gICAgY29uc3QgdHJhbnNsYXRlID0ge1xyXG4gICAgICBmZWF0dXJlOiBmZWF0dXJlLFxyXG4gICAgICBmZWF0dXJlVGV4dDogZmVhdHVyZVN0YXR1c1RleHRcclxuICAgIH1cclxuICAgIHNldEFtdEZlYXR1cmVzKGRldmljZUlkLCAnbm9uZScsIHVzZUtWTSwgdXNlU09MLCB1c2VJREVSLCBtcHNTZXJ2ZXIsIHRoaXMuY29udGV4dC5kYXRhLm1wc0tleSlcclxuICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2hvd01lc3NhZ2U6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZUR5bmFtaWNUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy5mZWF0dXJlU3VjY2VzcycsIHRyYW5zbGF0ZSksXHJcbiAgICAgICAgICAgIHR5cGU6IHRyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VUeXBlcy5zdWNjZXNzJylcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93TWVzc2FnZTogdHJ1ZSxcclxuICAgICAgICAgICAgY2hlY2tlZDogIWNoZWNrZWQsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZUR5bmFtaWNUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy51cGRhdGVGYWlsZWQnLCB0cmFuc2xhdGUpLFxyXG4gICAgICAgICAgICB0eXBlOiB0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlVHlwZXMuZXJyb3InKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dChcclxuICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgc2hvd01lc3NhZ2U6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vIHNob3dzIGZlYXR1cmUgbm90IGVuYWJsZWQgbWVzc2FnZSBpZiBjaGVja2JveCB2YWx1ZSBpcyBub3QgdHJ1ZVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuY2hlY2tlZCkgdGhpcy5wcm9wcy5oYW5kbGVGZWF0dXJlU3RhdHVzKCdub3RFbmFibGVkJylcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICA0MDAwXHJcbiAgICAgICAgKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5pbmZvKCdlcnJvcicsIGVycm9yKSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBjaGVja2JveCBzdGF0dXMgYW5kIHRoZSBmZWF0dXJlKEtWTSwgU09MKSBvbiBjbGljayBvZiBjaGVja2JveCBiZWZvcmUgbWFraW5nIHRoZSBSZXN0IEFQSVxyXG4gICAgICogcmVxdWVzdCB0byBTZXQgdGhlIEFNVCBmZWF0dXJlc1xyXG4gICAgICovXHJcbiAgaGFuZGxlQ2hlY2tib3hDaGFuZ2UgPSAoZXZlbnQpOiB2b2lkID0+IHtcclxuICAgIHN3aXRjaCAodGhpcy5wcm9wcy5mZWF0dXJlKSB7XHJcbiAgICAgIGNhc2UgJ0tWTSc6XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBjaGVja2VkOiBldmVudC50YXJnZXQuY2hlY2tlZCxcclxuICAgICAgICAgIHVzZUtWTTogZXZlbnQudGFyZ2V0LmNoZWNrZWRcclxuICAgICAgICB9LCAoKSA9PiB0aGlzLnNldEFtdEZlYXR1cmUoKSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdTT0wnOlxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgY2hlY2tlZDogZXZlbnQudGFyZ2V0LmNoZWNrZWQsXHJcbiAgICAgICAgICB1c2VTT0w6IGV2ZW50LnRhcmdldC5jaGVja2VkXHJcbiAgICAgICAgfSwgKCkgPT4gdGhpcy5zZXRBbXRGZWF0dXJlKCkpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnSURFUic6XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBjaGVja2VkOiBldmVudC50YXJnZXQuY2hlY2tlZCxcclxuICAgICAgICAgIHVzZUlERVI6IGV2ZW50LnRhcmdldC5jaGVja2VkXHJcbiAgICAgICAgfSwgKCkgPT4gdGhpcy5zZXRBbXRGZWF0dXJlKCkpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGNoZWNrZWQ6IGV2ZW50LnRhcmdldC5jaGVja2VkXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgIGNvbnN0IHsgZmVhdHVyZSB9ID0gdGhpcy5wcm9wc1xyXG4gICAgY29uc3QgeyBzaG93TWVzc2FnZSwgbWVzc2FnZSwgdHlwZSB9ID0gdGhpcy5zdGF0ZVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICB7c2hvd01lc3NhZ2UgJiYgPFNuYWNrQmFyXHJcbiAgICAgICAgICBtZXNzYWdlPXttZXNzYWdlfVxyXG4gICAgICAgICAgdHlwZT17dHlwZX1cclxuICAgICAgICAvPn1cclxuICAgICAgICA8bGFiZWw+XHJcbiAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5jaGVja2VkfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGVja2JveENoYW5nZX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPSdjaGVja2JveC1jbGFzcydcclxuICAgICAgICAgICAgZGlzYWJsZUNoZWNrYm94PXt0aGlzLnByb3BzLmdldENvbm5lY3RTdGF0ZSgpID09PSAyfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YGxhYmVsLXRleHQgJHt0aGlzLnByb3BzLmdldENvbm5lY3RTdGF0ZSgpID09PSAyID8gJ2dyZXktbGFiZWwnIDogJyd9YH0+e2ZlYXR1cmV9IHt0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5lbmFibGVkJyl9PC9zcGFuPlxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5BbXRGZWF0dXJlcy5jb250ZXh0VHlwZSA9IERvbWFpbkNvbnRleHRcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAyMFxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnLi9IdHRwQ2xpZW50J1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEFtdEZlYXR1cmVzID0gYXN5bmMgKGd1aWQsIG1wc1NlcnZlcjogc3RyaW5nLCBhcGlLZXkpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICBhcGlrZXk6ICd4eHh4eCcsXHJcbiAgICBtZXRob2Q6ICdHZXRBTVRGZWF0dXJlcycsXHJcbiAgICBwYXlsb2FkOiB7IGd1aWQgfVxyXG4gIH0pXHJcblxyXG4gIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LnBvc3QoYGh0dHBzOi8vJHttcHNTZXJ2ZXJ9L2FtdGAsIGJvZHksIGFwaUtleSwgdHJ1ZSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldEFtdEZlYXR1cmVzID0gYXN5bmMgKGd1aWQsIHVzZXJDb25zZW50LCBlbmFibGVLVk0sIGVuYWJsZVNPTCwgZW5hYmxlSURFUiwgbXBzU2VydmVyOiBzdHJpbmcsIGFwaUtleSk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcclxuICAgIGFwaWtleTogJ3h4eHh4JyxcclxuICAgIG1ldGhvZDogJ1NldEFNVEZlYXR1cmVzJyxcclxuICAgIHBheWxvYWQ6IHtcclxuICAgICAgZ3VpZCwgdXNlckNvbnNlbnQsIGVuYWJsZUtWTSwgZW5hYmxlU09MLCBlbmFibGVJREVSXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgcmV0dXJuIGF3YWl0IEh0dHBDbGllbnQucG9zdChgaHR0cHM6Ly8ke21wc1NlcnZlcn0vYW10YCwgYm9keSwgYXBpS2V5LCB0cnVlKVxyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1kNVwiKTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FtdGZlYXR1cmVzLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubGFiZWwtdGV4dHttYXJnaW4tbGVmdDo4cHh9LmdyZXktbGFiZWx7b3BhY2l0eTouNX1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwieHRlcm1cIik7IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5leHBvcnQgY2xhc3MgQW10VGVybWluYWwge1xyXG4gIHRlcm1pbmFsRW11bGF0aW9uID0gMVxyXG4gIGZ4RW11bGF0aW9uID0gMFxyXG4gIGZ4TGluZUJyZWFrID0gMCAvLyAwID0gQ1IrTEYsIDEgPSBMRlxyXG5cclxuICAvKiogdXNlZCB0byBtYXAgQXNjaWkgdmFsdWVzIHJlY2VpdmVkIGZyb20gc2VyaWFsIHBvcnQgdG8gdW5pY29kZSBjaGFyYWN0ZXJzICovXHJcbiAgQXNjaWlUb1VuaWNvZGUgPSBbXHJcbiAgICAweDAwYzcsXHJcbiAgICAweDAwZmMsXHJcbiAgICAweDAwZTksXHJcbiAgICAweDAwZTIsXHJcbiAgICAweDAwZTQsXHJcbiAgICAweDAwZTAsXHJcbiAgICAweDAwZTUsXHJcbiAgICAweDAwZTcsXHJcbiAgICAweDAwZWEsXHJcbiAgICAweDAwZWIsXHJcbiAgICAweDAwZTgsXHJcbiAgICAweDAwZWYsXHJcbiAgICAweDAwZWUsXHJcbiAgICAweDAwZWMsXHJcbiAgICAweDAwYzQsXHJcbiAgICAweDAwYzUsXHJcbiAgICAweDAwYzksXHJcbiAgICAweDAwZTYsXHJcbiAgICAweDAwYzYsXHJcbiAgICAweDAwZjQsXHJcbiAgICAweDAwZjYsXHJcbiAgICAweDAwZjIsXHJcbiAgICAweDAwZmIsXHJcbiAgICAweDAwZjksXHJcbiAgICAweDAwZmYsXHJcbiAgICAweDAwZDYsXHJcbiAgICAweDAwZGMsXHJcbiAgICAweDAwYTIsXHJcbiAgICAweDAwYTMsXHJcbiAgICAweDAwYTUsXHJcbiAgICAweDIwYTcsXHJcbiAgICAweDAxOTIsXHJcbiAgICAweDAwZTEsXHJcbiAgICAweDAwZWQsXHJcbiAgICAweDAwZjMsXHJcbiAgICAweDAwZmEsXHJcbiAgICAweDAwZjEsXHJcbiAgICAweDAwZDEsXHJcbiAgICAweDAwYWEsXHJcbiAgICAweDAwZGEsXHJcbiAgICAweDAwYmYsXHJcbiAgICAweDIzMTAsXHJcbiAgICAweDAwYWMsXHJcbiAgICAweDAwYmQsXHJcbiAgICAweDAwYmMsXHJcbiAgICAweDAwYTEsXHJcbiAgICAweDAwYWIsXHJcbiAgICAweDAwYmIsXHJcbiAgICAweDI1OTMsXHJcbiAgICAweDI1OTIsXHJcbiAgICAweDI1OTEsXHJcbiAgICAweDI1MDIsXHJcbiAgICAweDI1MjQsXHJcbiAgICAweDI1NjEsXHJcbiAgICAweDI1NjIsXHJcbiAgICAweDI1NTYsXHJcbiAgICAweDI1NTUsXHJcbiAgICAweDI1NjMsXHJcbiAgICAweDI1NTEsXHJcbiAgICAweDI1NTcsXHJcbiAgICAweDI1NWQsXHJcbiAgICAweDI1NWMsXHJcbiAgICAweDI1NWIsXHJcbiAgICAweDI1MTAsXHJcbiAgICAweDI1MTQsXHJcbiAgICAweDI1MzQsXHJcbiAgICAweDI1MmMsXHJcbiAgICAweDI1MWMsXHJcbiAgICAweDI1MDAsXHJcbiAgICAweDI1M2MsXHJcbiAgICAweDI1NWUsXHJcbiAgICAweDI1NWYsXHJcbiAgICAweDI1NWEsXHJcbiAgICAweDI1NTQsXHJcbiAgICAweDI1NjksXHJcbiAgICAweDI1NjYsXHJcbiAgICAweDI1NjAsXHJcbiAgICAweDI1NTAsXHJcbiAgICAweDI1NmMsXHJcbiAgICAweDI1NjcsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NjQsXHJcbiAgICAweDI1NjUsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NTgsXHJcbiAgICAweDI1NTIsXHJcbiAgICAweDI1NTMsXHJcbiAgICAweDI1NmIsXHJcbiAgICAweDI1NmEsXHJcbiAgICAweDI1MTgsXHJcbiAgICAweDI1MGMsXHJcbiAgICAweDI1ODgsXHJcbiAgICAweDI1ODQsXHJcbiAgICAweDI1OGIsXHJcbiAgICAweDI1OTAsXHJcbiAgICAweDI1ODAsXHJcbiAgICAweDAzYjEsXHJcbiAgICAweDAwZGYsXHJcbiAgICAweDAzOTMsXHJcbiAgICAweDAzYzAsXHJcbiAgICAweDAzYTMsXHJcbiAgICAweDAzYzMsXHJcbiAgICAweDAwYjUsXHJcbiAgICAweDAzYzQsXHJcbiAgICAweDAzYzYsXHJcbiAgICAweDAzYjgsXHJcbiAgICAweDIxMjYsXHJcbiAgICAweDAzYjQsXHJcbiAgICAweDIyMWUsXHJcbiAgICAweDAwZjgsXHJcbiAgICAweDAzYjUsXHJcbiAgICAweDIyMGYsXHJcbiAgICAweDIyNjEsXHJcbiAgICAweDAwYjEsXHJcbiAgICAweDIyNjUsXHJcbiAgICAweDIyNjYsXHJcbiAgICAweDIzMjAsXHJcbiAgICAweDIzMjEsXHJcbiAgICAweDAwZjcsXHJcbiAgICAweDIyNDgsXHJcbiAgICAweDAwYjAsXHJcbiAgICAweDIwMjIsXHJcbiAgICAweDAwYjcsXHJcbiAgICAweDIyMWEsXHJcbiAgICAweDIwN2YsXHJcbiAgICAweDAwYjIsXHJcbiAgICAweDIyMGUsXHJcbiAgICAweDAwYTBcclxuICBdXHJcblxyXG4gIEFzY2lpVG9Vbmljb2RlSW50ZWwgPSBbXHJcbiAgICAweDAwYzcsXHJcbiAgICAweDAwZmMsXHJcbiAgICAweDAwZTksXHJcbiAgICAweDAwZTIsXHJcbiAgICAweDAwZTQsXHJcbiAgICAweDAwZTAsXHJcbiAgICAweDAwZTUsXHJcbiAgICAweDAwZTcsXHJcbiAgICAweDAwZWEsXHJcbiAgICAweDAwZWIsXHJcbiAgICAweDAwZTgsXHJcbiAgICAweDAwZWYsXHJcbiAgICAweDAwZWUsXHJcbiAgICAweDAwZWMsXHJcbiAgICAweDAwYzQsXHJcbiAgICAweDAwYzUsXHJcbiAgICAweDAwYzksXHJcbiAgICAweDAwZTYsXHJcbiAgICAweDAwYzYsXHJcbiAgICAweDAwZjQsXHJcbiAgICAweDAwZjYsXHJcbiAgICAweDAwZjIsXHJcbiAgICAweDAwZmIsXHJcbiAgICAweDAwZjksXHJcbiAgICAweDAwZmYsXHJcbiAgICAweDAwZDYsXHJcbiAgICAweDAwZGMsXHJcbiAgICAweDAwYTIsXHJcbiAgICAweDAwYTMsXHJcbiAgICAweDAwYTUsXHJcbiAgICAweDIwYTcsXHJcbiAgICAweDAxOTIsXHJcbiAgICAweDAwZTEsXHJcbiAgICAweDAwZWQsXHJcbiAgICAweDAwZjMsXHJcbiAgICAweDAwZmEsXHJcbiAgICAweDAwZjEsXHJcbiAgICAweDAwZDEsXHJcbiAgICAweDAwYWEsXHJcbiAgICAweDAwZGEsXHJcbiAgICAweDAwYmYsXHJcbiAgICAweDIzMTAsXHJcbiAgICAweDAwYWMsXHJcbiAgICAweDAwYmQsXHJcbiAgICAweDAwYmMsXHJcbiAgICAweDAwYTEsXHJcbiAgICAweDAwYWUsXHJcbiAgICAweDAwYmIsXHJcbiAgICAweDI1OTMsXHJcbiAgICAweDI1OTIsXHJcbiAgICAweDI1OTEsXHJcbiAgICAweDI1MDIsXHJcbiAgICAweDI1MjQsXHJcbiAgICAweDI1NjEsXHJcbiAgICAweDI1NjIsXHJcbiAgICAweDI1NTYsXHJcbiAgICAweDI1NTUsXHJcbiAgICAweDI1NjMsXHJcbiAgICAweDI1NTEsXHJcbiAgICAweDI1NTcsXHJcbiAgICAweDI1NWQsXHJcbiAgICAweDI1NWMsXHJcbiAgICAweDI1NWIsXHJcbiAgICAweDI1MTAsXHJcbiAgICAweDI1MTQsXHJcbiAgICAweDI1MzQsXHJcbiAgICAweDI1MmMsXHJcbiAgICAweDI1MWMsXHJcbiAgICAweDI1MDAsXHJcbiAgICAweDI1M2MsXHJcbiAgICAweDI1NWUsXHJcbiAgICAweDI1NWYsXHJcbiAgICAweDI1NWEsXHJcbiAgICAweDI1NTQsXHJcbiAgICAweDI1NjksXHJcbiAgICAweDI1NjYsXHJcbiAgICAweDI1NjAsXHJcbiAgICAweDI1NTAsXHJcbiAgICAweDI1NmMsXHJcbiAgICAweDI1NjcsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NjQsXHJcbiAgICAweDI1NjUsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NTgsXHJcbiAgICAweDI1NTIsXHJcbiAgICAweDI1NTMsXHJcbiAgICAweDI1NmIsXHJcbiAgICAweDI1NmEsXHJcbiAgICAweDI1MTgsXHJcbiAgICAweDI1MGMsXHJcbiAgICAweDI1ODgsXHJcbiAgICAweDI1ODQsXHJcbiAgICAweDI1OGIsXHJcbiAgICAweDI1OTAsXHJcbiAgICAweDI1ODAsXHJcbiAgICAweDAzYjEsXHJcbiAgICAweDAwZGYsXHJcbiAgICAweDAzOTMsXHJcbiAgICAweDAzYzAsXHJcbiAgICAweDAzYTMsXHJcbiAgICAweDAzYzMsXHJcbiAgICAweDAwYjUsXHJcbiAgICAweDAzYzQsXHJcbiAgICAweDAzYzYsXHJcbiAgICAweDAzYjgsXHJcbiAgICAweDIxMjYsXHJcbiAgICAweDAzYjQsXHJcbiAgICAweDIyMWUsXHJcbiAgICAweDAwZjgsXHJcbiAgICAweDAzYjUsXHJcbiAgICAweDIyMGYsXHJcbiAgICAweDIyNjEsXHJcbiAgICAweDAwYjEsXHJcbiAgICAweDIyNjUsXHJcbiAgICAweDIyNjYsXHJcbiAgICAweDIzMjAsXHJcbiAgICAweDIzMjEsXHJcbiAgICAweDAwZjcsXHJcbiAgICAweDIyNDgsXHJcbiAgICAweDAwYjAsXHJcbiAgICAweDIwMjIsXHJcbiAgICAweDAwYjcsXHJcbiAgICAweDIyMWEsXHJcbiAgICAweDIwN2YsXHJcbiAgICAweDAwYjIsXHJcbiAgICAweDIyMGUsXHJcbiAgICAweDAwYTBcclxuICBdXHJcblxyXG4gIFN0YXRlQ2hhbmdlID0gKG5ld1N0YXRlKTogYW55ID0+IHsgfVxyXG5cclxuICAvKiogc2VuZGluZyAgbXVsdGlwbGUgdW5pY29kZSB2YWx1ZXMgdG8gc29ja2V0ICovXHJcbiAgVGVybVNlbmRLZXlzID0gKGtleXMpOiBhbnkgPT4gdGhpcy5vblNlbmQoa2V5cylcclxuXHJcbiAgb25TZW5kOiAoZGF0YTogYW55KSA9PiB2b2lkXHJcblxyXG4gIFByb2Nlc3NEYXRhOiAoc3RyOiBzdHJpbmcpID0+IHZvaWRcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IElEYXRhUHJvY2Vzc29yIH0gZnJvbSAnLi9JRGF0YVByb2Nlc3NvcidcclxuXHJcbi8qKiBjbGFzcyB0byBwcm9jZXNzIHNlcmlhbCBvdmVyIGxhbiBkYXRhICoqL1xyXG5leHBvcnQgY2xhc3MgVGVybWluYWxEYXRhUHJvY2Vzc29yIGltcGxlbWVudHMgSURhdGFQcm9jZXNzb3Ige1xyXG4gIHRlcm1pbmFsOiBhbnlcclxuICBjb25zdHJ1Y3RvciAodGVybWluYWwpIHtcclxuICAgIHRoaXMudGVybWluYWwgPSB0ZXJtaW5hbFxyXG4gIH1cclxuXHJcbiAgcHJvY2Vzc0RhdGFUb1h0ZXJtOiAoc3RyOiBhbnkpID0+IHZvaWRcclxuICBjbGVhclRlcm1pbmFsOiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKiBwcm9jZXNzaW5nIGRhdGEgcmVjZWl2ZWQgZnJvbSBzZXJpYWwgcG9ydCoqL1xyXG4gIHByb2Nlc3NEYXRhID0gKHN0cjogc3RyaW5nKTogYW55ID0+IHtcclxuICAgIGlmICh0aGlzLnRlcm1pbmFsLmNhcHR1cmUgIT0gbnVsbCkgdGhpcy50ZXJtaW5hbC5jYXB0dXJlICs9IHN0clxyXG4gICAgbGV0IGM6IHN0cmluZyA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBjaCA9IHN0ci5jaGFyQ29kZUF0KGkpXHJcbiAgICAgIGlmIChzdHJbaV0gPT09ICdKJykge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUZXJtaW5hbCgpXHJcbiAgICAgIH0gZWxzZSBpZiAoKGNoICYgMHg4MCkgIT09IDApIHtcclxuICAgICAgICBjICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy50ZXJtaW5hbC5Bc2NpaVRvVW5pY29kZVtjaCAmIDB4N2ZdKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGMgKz0gYCR7c3RyW2ldfWBcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5wcm9jZXNzRGF0YVRvWHRlcm0oYylcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBTdHlsZSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IHsgaXNGYWxzeSB9IGZyb20gJy4uL3NoYXJlZC9VdGlsaXRpZXMnXHJcblxyXG5jb25zdCBUZXJtaW5hbENvbnRhaW5lciA9IFN0eWxlLmRpdmBcclxuICAgZGlzcGxheTpibG9jaztcclxuICAgdGV4dC1hbGlnbjpjZW50ZXI7XHJcbmBcclxuY29uc3QgWFRlcm0gPSBTdHlsZS5kaXZgXHJcbiAgIGRpc3BsYXk6aW5saW5lLWJsb2NrO1xyXG5gXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wVGVybWluYWwge1xyXG4gIGhhbmRsZUtleVByZXNzOiBhbnlcclxuICB4dGVybTogYW55XHJcbiAgaGFuZGxlS2V5RG93blByZXNzOiBhbnlcclxufVxyXG5cclxuY2xhc3MgVGVybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcFRlcm1pbmFsPiB7XHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd4dGVybScpID8/ICcnXHJcbiAgICBjb25zdCB7IHh0ZXJtLCBoYW5kbGVLZXlQcmVzcyB9ID0gdGhpcy5wcm9wc1xyXG4gICAgaWYgKGlzRmFsc3koZWxlbWVudCkpIHtcclxuICAgICAgeHRlcm0ub3BlbihlbGVtZW50KVxyXG4gICAgICB4dGVybS5vbkRhdGEoZGF0YSA9PiBoYW5kbGVLZXlQcmVzcyhkYXRhKSlcclxuICAgICAgeHRlcm0uYXR0YWNoQ3VzdG9tS2V5RXZlbnRIYW5kbGVyKGUgPT4ge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBpZiAoaXNGYWxzeShlLmN0cmxLZXkpICYmIGlzRmFsc3koZS5zaGlmdEtleSkgJiYgKGUua2V5Q29kZSA9PT0gNjcpKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoeHRlcm0uZ2V0U2VsZWN0aW9uKCkpXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZhbHN5KGUuY3RybEtleSkgJiYgaXNGYWxzeShlLnNoaWZ0S2V5KSAmJiAoZS5rZXlDb2RlID09PSA4NikpIHtcclxuICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IuY2xpcGJvYXJkLnJlYWRUZXh0KClcclxuICAgICAgICAgICAgLnRoZW4odGV4dCA9PiBoYW5kbGVLZXlQcmVzcyh0ZXh0KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09ICdTcGFjZScpIHtcclxuICAgICAgICAgIHJldHVybiBoYW5kbGVLZXlQcmVzcyhlLmtleSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8VGVybWluYWxDb250YWluZXI+XHJcbiAgICAgICAgPFhUZXJtIGlkPVwieHRlcm1cIiAvPlxyXG4gICAgICA8L1Rlcm1pbmFsQ29udGFpbmVyPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGVybVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgQW10VGVybWluYWwgfSBmcm9tICcuLi8uLi8uLi9jb3JlL0FNVFRlcm1pbmFsJ1xyXG5pbXBvcnQgU3R5bGUgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcbmltcG9ydCB7IEFNVFJlZGlyZWN0b3IsIFByb3RvY29sIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9BTVRSZWRpcmVjdG9yJ1xyXG5pbXBvcnQgeyBDb25zb2xlTG9nZ2VyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9Db25zb2xlTG9nZ2VyJ1xyXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvSUxvZ2dlcidcclxuaW1wb3J0IHsgVGVybWluYWxEYXRhUHJvY2Vzc29yIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9UZXJtaW5hbERhdGFQcm9jZXNzb3InXHJcbmltcG9ydCB7IFBvd2VyT3B0aW9ucyB9IGZyb20gJy4uL3NoYXJlZC9Qb3dlck9wdGlvbnMnXHJcbmltcG9ydCB7IFRlcm1pbmFsIH0gZnJvbSAneHRlcm0nXHJcbmltcG9ydCBUZXJtIGZyb20gJy4vVGVybWluYWwnXHJcbmltcG9ydCB7IGF2YWlsYWJsZVBvd2VyQWN0aW9ucywgZ2V0QWN0aW9uQnlJZCB9IGZyb20gJy4uL3NoYXJlZC9Qb3dlckFjdGlvbnMnXHJcbmltcG9ydCAneHRlcm0vY3NzL3h0ZXJtLmNzcydcclxuaW1wb3J0ICcuL3NvbC5zY3NzJ1xyXG5pbXBvcnQgeyBwb3dlckFjdGlvbnMgfSBmcm9tICcuLi9zZXJ2aWNlcy9Qb3dlckFjdGlvblNlcnZpY2VzJ1xyXG5pbXBvcnQgU25hY2tCYXIgZnJvbSAnLi4vc2hhcmVkL1NuYWNrQmFyJ1xyXG5pbXBvcnQgeyBBbXRGZWF0dXJlcyB9IGZyb20gJy4uL3NoYXJlZC9BbXRGZWF0dXJlcydcclxuaW1wb3J0IHsgUG93ZXJTdGF0ZSB9IGZyb20gJy4uL3NoYXJlZC9Qb3dlclN0YXRlJ1xyXG5pbXBvcnQgeyB0cmFuc2xhdGVUZXh0IH0gZnJvbSAnLi4vc2hhcmVkL01ldGhvZHMnXHJcbmltcG9ydCB7IERvbWFpbkNvbnRleHQgfSBmcm9tICcuLi9zaGFyZWQvY29udGV4dC9CYXNpY0NvbnRleHRQcm92aWRlcidcclxuaW1wb3J0IHsgaXNGYWxzeSB9IGZyb20gJy4uL3NoYXJlZC9VdGlsaXRpZXMnXHJcblxyXG5jb25zdCBTdHlsZWREaXYgPSBTdHlsZS5kaXZgXHJcbmRpc3BsYXkgOiBpbmxpbmUtYmxvY2s7XHJcbnBhZGRpbmcgOiAwcHggNXB4O1xyXG5gXHJcblxyXG5jb25zdCBIZWFkZXJTdHJpcCA9IFN0eWxlLmRpdmBcclxuYmFja2dyb3VuZC1jb2xvcjogZGFya2dyYXk7XHJcbnBhZGRpbmc6IDVweDtcclxuZm9udC1zaXplOiAxM3B4O1xyXG50ZXh0LWFsaWduOiBjZW50ZXI7XHJcbmBcclxuXHJcbmNvbnN0IFN0eWxlZExhYmVsID0gU3R5bGUubGFiZWxgXHJcbmZvbnQtc2l6ZSA6IDE1cHg7XHJcbm1hcmdpbi1sZWZ0OiAzMHB4O1xyXG5gXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNPTFByb3BzIHtcclxuICBkZXZpY2VJZDogc3RyaW5nIHwgbnVsbFxyXG4gIG1wc1NlcnZlcjogc3RyaW5nIHwgbnVsbFxyXG4gIGF1dG9Db25uZWN0PzogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNPTFN0YXRlcyB7XHJcbiAgaXNDb25uZWN0ZWQ6IGJvb2xlYW5cclxuICBTT0xzdGF0ZTogbnVtYmVyXHJcbiAgcG93ZXJTdGF0ZTogbnVtYmVyXHJcbiAgc2hvd1N1Y2Nlc3M6IGJvb2xlYW5cclxuICBtZXNzYWdlOiBzdHJpbmdcclxuICBpc1NlbGVjdGVkOiBib29sZWFuXHJcbiAgdHlwZTogc3RyaW5nXHJcbiAgc29sTm90RW5hYmxlZDogc3RyaW5nXHJcbiAgZGV2aWNlT25TbGVlcDogc3RyaW5nXHJcbiAgaXNQb3dlclN0YXRlTG9hZGVkOiBib29sZWFuXHJcbn1cclxuXHJcbi8qKiBjb250YWluZXIgY2xhc3MgZm9yIFNPTCAqL1xyXG5leHBvcnQgY2xhc3MgU29sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFNPTFByb3BzLCBTT0xTdGF0ZXM+IHtcclxuICByZWRpcmVjdG9yOiBhbnlcclxuICB0ZXJtaW5hbDogYW55XHJcbiAgbG9nZ2VyOiBhbnlcclxuICBkYXRhUHJvY2Vzc29yOiBhbnlcclxuICBjYWxsYmFjazogYW55XHJcbiAgdGVybTogYW55XHJcbiAgZnI6IEZpbGVSZWFkZXJcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFNPTFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuICAgIHRoaXMubG9nZ2VyID0gbmV3IENvbnNvbGVMb2dnZXIoTG9nTGV2ZWwuRVJST1IpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpc0Nvbm5lY3RlZDogZmFsc2UsXHJcbiAgICAgIFNPTHN0YXRlOiAwLFxyXG4gICAgICBwb3dlclN0YXRlOiAwLFxyXG4gICAgICBzaG93U3VjY2VzczogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICBpc1NlbGVjdGVkOiB0cnVlLFxyXG4gICAgICB0eXBlOiAnJyxcclxuICAgICAgc29sTm90RW5hYmxlZDogJycsXHJcbiAgICAgIGRldmljZU9uU2xlZXA6ICcnLFxyXG4gICAgICBpc1Bvd2VyU3RhdGVMb2FkZWQ6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3Qgc2VydmVyOiBzdHJpbmcgPSB0aGlzLnByb3BzLm1wc1NlcnZlciAhPSBudWxsID8gdGhpcy5wcm9wcy5tcHNTZXJ2ZXIgOiAnJ1xyXG4gICAgY29uc3QgZGV2aWNlVXVpZDogc3RyaW5nID0gdGhpcy5wcm9wcy5kZXZpY2VJZCAhPSBudWxsID8gdGhpcy5wcm9wcy5kZXZpY2VJZCA6ICcnXHJcbiAgICB0aGlzLnRlcm1pbmFsID0gbmV3IEFtdFRlcm1pbmFsKClcclxuICAgIHRoaXMucmVkaXJlY3RvciA9IG5ldyBBTVRSZWRpcmVjdG9yKFxyXG4gICAgICB0aGlzLmxvZ2dlcixcclxuICAgICAgUHJvdG9jb2wuU09MLFxyXG4gICAgICBuZXcgRmlsZVJlYWRlcigpLFxyXG4gICAgICBkZXZpY2VVdWlkLFxyXG4gICAgICAxNjk5NCxcclxuICAgICAgJycsXHJcbiAgICAgICcnLFxyXG4gICAgICAwLFxyXG4gICAgICAwLFxyXG4gICAgICBgJHtzZXJ2ZXJ9L3JlbGF5YFxyXG4gICAgKVxyXG4gICAgdGhpcy5kYXRhUHJvY2Vzc29yID0gbmV3IFRlcm1pbmFsRGF0YVByb2Nlc3Nvcih0aGlzLnRlcm1pbmFsKVxyXG4gICAgdGhpcy50ZXJtaW5hbC5vblNlbmQgPSB0aGlzLnJlZGlyZWN0b3Iuc2VuZC5iaW5kKHRoaXMucmVkaXJlY3RvcilcclxuICAgIHRoaXMucmVkaXJlY3Rvci5vbk5ld1N0YXRlID0gdGhpcy50ZXJtaW5hbC5TdGF0ZUNoYW5nZS5iaW5kKHRoaXMudGVybWluYWwpXHJcbiAgICB0aGlzLnJlZGlyZWN0b3Iub25TdGF0ZUNoYW5nZWQgPSB0aGlzLm9uVGVybWluYWxTdGF0ZUNoYW5nZS5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnJlZGlyZWN0b3Iub25Qcm9jZXNzRGF0YSA9IHRoaXMuZGF0YVByb2Nlc3Nvci5wcm9jZXNzRGF0YS5iaW5kKHRoaXMuZGF0YVByb2Nlc3NvcilcclxuICAgIHRoaXMuZGF0YVByb2Nlc3Nvci5wcm9jZXNzRGF0YVRvWHRlcm0gPSB0aGlzLmhhbmRsZVdyaXRlVG9YdGVybS5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLmRhdGFQcm9jZXNzb3IuY2xlYXJUZXJtaW5hbCA9IHRoaXMuaGFuZGxlQ2xlYXJUZXJtaW5hbC5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnRlcm0gPSBuZXcgVGVybWluYWwoe1xyXG4gICAgICBjdXJzb3JTdHlsZTogJ2Jsb2NrJyxcclxuICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxyXG4gICAgICByb3dzOiAzMCxcclxuICAgICAgY29sczogMTAwXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY2xlYW5VcCA9ICgpOiB2b2lkID0+IHtcclxuICAgIHRoaXMudGVybWluYWwgPSBudWxsXHJcbiAgICB0aGlzLnJlZGlyZWN0b3IgPSBudWxsXHJcbiAgICB0aGlzLmRhdGFQcm9jZXNzb3IgPSBudWxsXHJcbiAgICB0aGlzLnRlcm0gPSBudWxsXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKTogdm9pZCB7XHJcbiAgICB0aGlzLmluaXQoKVxyXG4gIH1cclxuXHJcbiAgLyoqIHdyaXRlIHRoZSBwcm9jZXNzZWQgZGF0YSBmcm9tIHdlYnNjb2tldCBpbiB0byB4dGVybSAqL1xyXG5cclxuICBoYW5kbGVXcml0ZVRvWHRlcm0gPSAoc3RyKTogYW55ID0+IHRoaXMudGVybS53cml0ZShzdHIpXHJcblxyXG4gIGhhbmRsZUNsZWFyVGVybWluYWwgPSAoKTogYW55ID0+IHRoaXMudGVybS5yZXNldCgpXHJcblxyXG4gIC8qKiBjYXB0dXJlIHRoZSBkYXRhIG9uIHh0ZXJtIGtleSBwcmVzcyAqL1xyXG4gIGhhbmRsZUtleVByZXNzID0gKGRvbUV2ZW50KTogYW55ID0+IHRoaXMudGVybWluYWwuVGVybVNlbmRLZXlzKGRvbUV2ZW50KVxyXG5cclxuICBoYW5kbGVLZXlEb3duUHJlc3MgPSAoZG9tRXZlbnQpOiBhbnkgPT4gdGhpcy50ZXJtaW5hbC5oYW5kbGVLZXlEb3duRXZlbnRzKGRvbUV2ZW50KVxyXG5cclxuICBzdGFydFNPTCA9ICgpOiB2b2lkID0+IHtcclxuICAgIGlmICh0eXBlb2YgdGhpcy5yZWRpcmVjdG9yICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0aGlzLnJlZGlyZWN0b3Iuc3RhcnQoV2ViU29ja2V0KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RvcFNPTCA9ICgpOiB2b2lkID0+IHtcclxuICAgIGlmICh0eXBlb2YgdGhpcy5yZWRpcmVjdG9yICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0aGlzLnJlZGlyZWN0b3Iuc3RvcCgpXHJcbiAgICB9XHJcbiAgICB0aGlzLmhhbmRsZUNsZWFyVGVybWluYWwoKVxyXG4gICAgdGhpcy5jbGVhblVwKClcclxuICAgIHRoaXMuaW5pdCgpXHJcbiAgfVxyXG5cclxuICBoYW5kbGVTT0xDb25uZWN0ID0gKGUpOiB2b2lkID0+IHtcclxuICAgIGUucGVyc2lzdCgpXHJcbiAgICBpZiAodGhpcy5zdGF0ZS5TT0xzdGF0ZSA9PT0gMCkge1xyXG4gICAgICB0aGlzLnN0YXJ0U09MKClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RvcFNPTCgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblRlcm1pbmFsU3RhdGVDaGFuZ2UgPSAocmVkaXJlY3Rvciwgc3RhdGU6IG51bWJlcik6IHZvaWQgPT4gdGhpcy5zZXRTdGF0ZSh7IFNPTHN0YXRlOiBzdGF0ZSB9KVxyXG5cclxuICAvKiogc2VuZCBwb3dlciBhY3Rpb25zIHRvIEFNVCBkZXZpY2UgKi9cclxuICBoYW5kbGVQb3dlck9wdGlvbnMgPSBhc3luYyAoZSk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICBpZiAoZS5kZXRhaWwgPT09IDApIHtcclxuICAgICAgY29uc3QgeyBtcHNLZXkgfSA9IHRoaXMuY29udGV4dC5kYXRhXHJcbiAgICAgIGNvbnN0IHBvd2VyQWN0aW9uOiBzdHJpbmcgPSBnZXRBY3Rpb25CeUlkKHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKSlcclxuICAgICAgaWYgKHRoaXMuc3RhdGUuU09Mc3RhdGUgPT09IDMgJiYgKGUudGFyZ2V0LnZhbHVlID09PSAnOCcgfHwgZS50YXJnZXQudmFsdWUgPT09ICc1JykpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNob3dTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxyXG4gICAgICAgICAgbWVzc2FnZTogYCR7cG93ZXJBY3Rpb259IG5vdCBhbGxvd2VkIHdoaWxlIHRlcm1pbmExIGlzIGNvbm5lY3RlZGAsXHJcbiAgICAgICAgICBpc1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5pc1NlbGVjdGVkXHJcbiAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwb3dlckFjdGlvbnModGhpcy5wcm9wcy5kZXZpY2VJZCwgZS50YXJnZXQudmFsdWUsIHRoaXMucHJvcHMubXBzU2VydmVyLCBtcHNLZXksIHRydWUpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgY29uc3QgcmVzQm9keSA9IHJlc3BvbnNlLkJvZHlcclxuICAgICAgICAgIGlmIChyZXNCb2R5ICE9PSB1bmRlZmluZWQgJiYgcmVzQm9keS5SZXR1cm5WYWx1ZVN0ciA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIHNob3dTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcclxuICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtwb3dlckFjdGlvbn0gc3VjY2Vzc2AsXHJcbiAgICAgICAgICAgICAgaXNTZWxlY3RlZDogIXRoaXMuc3RhdGUuaXNTZWxlY3RlZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICBtZXNzYWdlOiAocmVzQm9keSAhPT0gdW5kZWZpbmVkICYmIHJlc0JvZHkuUmV0dXJuVmFsdWUgIT09IDApID8gYCR7cG93ZXJBY3Rpb259ICR7U3RyaW5nKHJlc0JvZHkuUmV0dXJuVmFsdWVTdHIpfWAgOiByZXNwb25zZS5lcnJvckRlc2NyaXB0aW9uIHx8ICdTb3JyeSEgdGhlcmUgd2FzIHNvbWUgdGVjaG5pY2FsIGRpZmZpY3VsdGllcycsXHJcbiAgICAgICAgICAgICAgaXNTZWxlY3RlZDogIXRoaXMuc3RhdGUuaXNTZWxlY3RlZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2hvd1N1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5pc1NlbGVjdGVkXHJcbiAgICAgICAgICB9KSwgNDAwMClcclxuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93U3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgbWVzc2FnZTogKGlzRmFsc3koZXJyb3IuYWpheEVycm9yLnJlc3BvbnNlKSAmJiBTdHJpbmcoZXJyb3IuYWpheEVycm9yLnJlc3BvbnNlLmVycm9yKSkgfHwgJ1Bvd2VyIEFjdGlvbiBGYWlsZWQnLFxyXG4gICAgICAgICAgICBpc1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5pc1NlbGVjdGVkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2hvd1N1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5pc1NlbGVjdGVkXHJcbiAgICAgICAgICB9KSwgNDAwMClcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogY2FsbGJhY2sgZnVuY3Rpb25zIGZyb20gY2hpbGQgY29tcG9uZW50cyB0byB1cGRhdGUgdGhlIHN0YXRlIHZhbHVlcyAqL1xyXG4gIGhhbmRsZUZlYXR1cmVTdGF0dXMgPSAodmFsdWUpOiB2b2lkID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBzb2xOb3RFbmFibGVkOiB2YWx1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGhhbmRsZVBvd2VyU3RhdHVzID0gKHZhbHVlKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZGV2aWNlT25TbGVlcDogdmFsdWVcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICB1cGRhdGVQb3dlclN0YXR1cyA9ICgpOiB2b2lkID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBpc1Bvd2VyU3RhdGVMb2FkZWQ6IHRydWVcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBnZXRTT0xTdGF0ZSA9ICgpOiBhbnkgPT4gdGhpcy5zdGF0ZS5TT0xzdGF0ZSA9PT0gMyA/IDIgOiAwXHJcblxyXG4gIHJlbmRlciAoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgIGNvbnN0IHsgU09Mc3RhdGUsIHNob3dTdWNjZXNzLCBtZXNzYWdlLCB0eXBlLCBkZXZpY2VPblNsZWVwLCBzb2xOb3RFbmFibGVkLCBpc1Bvd2VyU3RhdGVMb2FkZWQgfSA9IHRoaXMuc3RhdGVcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICB7c29sTm90RW5hYmxlZCA9PT0gJ2ZhaWxlZCcgJiYgZGV2aWNlT25TbGVlcCA9PT0gJ3Bvd2Vyb24nID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZhaWxlZFNvbEZldGNoJyl9IHR5cGU9J2Vycm9yJyAvPiA6ICcnfVxyXG4gICAgICAgIHtzb2xOb3RFbmFibGVkID09PSAnZmFpbGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnc2xlZXAnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZhaWxlZFNvbEZldGNoQW5kTm90UG93ZXJlZFVwJyl9IHR5cGU9J3dhcm5pbmcnIC8+IDogJyd9XHJcbiAgICAgICAge3NvbE5vdEVuYWJsZWQgPT09ICdmYWlsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdmYWlsZWQnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZhaWxlZFNvbEZldGNoQW5kRmFpbGVkUG93ZXJGZXRjaCcpfSB0eXBlPSdlcnJvcicgLz4gOiAnJ31cclxuICAgICAgICB7c29sTm90RW5hYmxlZCA9PT0gJ25vdEVuYWJsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdzbGVlcCcgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMuc29sTm90RW5hYmxlZEFuZE5vdFBvd2VyZWRVcCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcbiAgICAgICAge3NvbE5vdEVuYWJsZWQgPT09ICdub3RFbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnZmFpbGVkJyA/IDxTbmFja0JhciBtZXNzYWdlPXt0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy5zb2xOb3RFbmFibGVkQW5kRmFpbGVkUG93ZXJGZXRjaCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcbiAgICAgICAge3NvbE5vdEVuYWJsZWQgPT09ICdlbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnc2xlZXAnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLm5vdFBvd2VyZWRVcCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcbiAgICAgICAge3NvbE5vdEVuYWJsZWQgPT09ICdlbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnZmFpbGVkJyA/IDxTbmFja0JhciBtZXNzYWdlPXt0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy5mYWlsZWRQb3dlckZldGNoJyl9IHR5cGU9eydlcnJvcid9IC8+IDogJyd9XHJcbiAgICAgICAge3NvbE5vdEVuYWJsZWQgPT09ICdub3RFbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAncG93ZXJvbicgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMuc29sTm90RW5hYmxlZCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcbiAgICAgICAge3Nob3dTdWNjZXNzICYmIDxTbmFja0JhciBtZXNzYWdlPXttZXNzYWdlfSB0eXBlPXt0eXBlfSAvPn1cclxuICAgICAgICA8SGVhZGVyU3RyaXA+XHJcbiAgICAgICAgICA8U3R5bGVkRGl2PlxyXG4gICAgICAgICAgICA8U3R5bGVkTGFiZWw+XHJcbiAgICAgICAgICAgICAge2lzUG93ZXJTdGF0ZUxvYWRlZCAmJiA8QW10RmVhdHVyZXNcclxuICAgICAgICAgICAgICAgIGRldmljZUlkPXt0aGlzLnByb3BzLmRldmljZUlkfVxyXG4gICAgICAgICAgICAgICAgc2VydmVyPXt0aGlzLnByb3BzLm1wc1NlcnZlcn1cclxuICAgICAgICAgICAgICAgIGZlYXR1cmU9eydTT0wnfVxyXG4gICAgICAgICAgICAgICAgaGFuZGxlRmVhdHVyZVN0YXR1cz17dGhpcy5oYW5kbGVGZWF0dXJlU3RhdHVzfVxyXG4gICAgICAgICAgICAgICAgZ2V0Q29ubmVjdFN0YXRlPXt0aGlzLmdldFNPTFN0YXRlfVxyXG4gICAgICAgICAgICAgIC8+fVxyXG4gICAgICAgICAgICA8L1N0eWxlZExhYmVsPlxyXG4gICAgICAgICAgPC9TdHlsZWREaXY+XHJcbiAgICAgICAgICA8U3R5bGVkRGl2PlxyXG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlU09MQ29ubmVjdH0+e1NPTHN0YXRlID09PSAzID8gJ0Rpc2Nvbm5lY3QnIDogJ0Nvbm5lY3QnfTwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9TdHlsZWREaXY+XHJcbiAgICAgICAgICA8U3R5bGVkRGl2PlxyXG4gICAgICAgICAgICA8U3R5bGVkTGFiZWw+UG93ZXIgU3RhdHVzIDo8L1N0eWxlZExhYmVsPlxyXG4gICAgICAgICAgICA8UG93ZXJTdGF0ZVxyXG4gICAgICAgICAgICAgIGRldmljZUlkPXt0aGlzLnByb3BzLmRldmljZUlkfVxyXG4gICAgICAgICAgICAgIHNlcnZlcj17dGhpcy5wcm9wcy5tcHNTZXJ2ZXJ9XHJcbiAgICAgICAgICAgICAgaGFuZGxlUG93ZXJTdGF0dXM9e3RoaXMuaGFuZGxlUG93ZXJTdGF0dXN9XHJcbiAgICAgICAgICAgICAgdXBkYXRlUGFyZW50PXt0aGlzLnVwZGF0ZVBvd2VyU3RhdHVzfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9TdHlsZWREaXY+XHJcbiAgICAgICAgICA8U3R5bGVkRGl2PlxyXG4gICAgICAgICAgICA8U3R5bGVkTGFiZWw+UG93ZXIgQWN0aW9uczp7JyAnfTwvU3R5bGVkTGFiZWw+XHJcbiAgICAgICAgICAgIDxQb3dlck9wdGlvbnMgYXZhaWxhYmxlT3B0aW9ucz17YXZhaWxhYmxlUG93ZXJBY3Rpb25zfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVQb3dlck9wdGlvbnN9IGlzU2VsZWN0ZWQ9e3RoaXMuc3RhdGUuaXNTZWxlY3RlZH0gLz5cclxuICAgICAgICAgIDwvU3R5bGVkRGl2PlxyXG4gICAgICAgIDwvSGVhZGVyU3RyaXA+XHJcbiAgICAgICAge1NPTHN0YXRlID09PSAzICYmIHRoaXMudGVybSAmJiA8VGVybSBoYW5kbGVLZXlQcmVzcz17dGhpcy5oYW5kbGVLZXlQcmVzc30gaGFuZGxlS2V5RG93blByZXNzPXt0aGlzLmhhbmRsZUtleURvd25QcmVzc30geHRlcm09e3RoaXMudGVybX0gLz59XHJcbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5Tb2wuY29udGV4dFR5cGUgPSBEb21haW5Db250ZXh0XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInh0ZXJtL2Nzcy94dGVybS5jc3NcIik7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zb2wuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zb2wtaGVhZGVye2Rpc3BsYXk6ZmxleH0ucG93ZXItb3B0aW9uc3tkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjElfVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwic291cmNlUm9vdCI6IiJ9